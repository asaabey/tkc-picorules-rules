        /* Algorithm to plot acr graph  */
        
            
             #define_ruleblock(acr_graph,
                {
                    description: "Algorithm to plot acr graph ",
                    
                    is_active:2
                    
                }
            );
            
            rrt => rout_rrt.rrt.val.bind();
            
            acr_max => eadv.lab_ua_acr._.maxldv();
            
            acr_min => eadv.lab_ua_acr._.minldv();
            
            acr_f => eadv.lab_ua_acr._.firstdv();
            
            acr_l => eadv.lab_ua_acr._.lastdv();
            
            dspan : { acr_l_dt> acr_f_dt => acr_l_dt - acr_f_dt};
            
            dspan_y : { dspan>0 => ceil(dspan/365)};
                        
            acr_n => eadv.lab_ua_acr.dt.count();
            
            acr_n_30 => eadv.lab_ua_acr.val.count();
            
            acr_graph_canvas_x : {1=1 => 350};
            
            acr_graph_canvas_y : {1=1 => 100};

            acr_graph => eadv.lab_ua_acr.val.serializedv2(round(val,0)~dt);    
            
            
            acr_graph_y_max : {. => acr_max_val};
            
            acr_graph_y_min : { . => acr_min_val};
            
            acr_graph_x_scale : {. => round(acr_graph_canvas_x/dspan,5)};
            
            acr_graph_y_scale : { acr_graph_y_max > acr_graph_y_min => round(acr_graph_canvas_y/(acr_graph_y_max-acr_graph_y_min),5)},{=>round(acr_graph_canvas_y/10,5)};
            
                        
            line_upper_y : {.=> 0};
            
            line_lower_y : {. => (acr_graph_y_max-acr_graph_y_min) * acr_graph_y_scale};
            
            
            acr_graph : { acr_n_30>3 and rrt=0 =>1},{=>0};
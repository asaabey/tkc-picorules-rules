/*  Test  */
        
        #define_ruleblock(test2,
            {
                description: "This is a test algorithm",
                version: "0.0.0.1",
                blockid: "test2",
                target_table:"rout_test2",
                environment:"DEV_2",
                rule_owner:"TKCADMIN",
                is_active:1,
                def_exit_prop:"test2",
                def_predicate:">0",
                exec_order:1
                
            }
        );
        
        ckd_icpc_val => eadv.[icpc_u99035,icpc_u99036,icpc_u99037,icpc_u99043,icpc_u99044,icpc_u99038,icpc_u99039,icpc_u88j91,icpc_u88j92,icpc_u88j93,icpc_u88j94,icpc_u88j95,icpc_u88j95,6].val.last();
        
        
        u88_att => eadv.[
                            icpc_u88j91,
                            icpc_u88j92,
                            icpc_u88j93,
                            icpc_u88j94,
                            icpc_u88j95,
                            icpc_u88j96
                        ].att.last();
        
        u88_dt => eadv.[icpc_u88j91,icpc_u88j92,icpc_u88j93,icpc_u88j94,icpc_u88j95,icpc_u88j96].dt.last();
        
        u99_att => eadv.[icpc_u99035,icpc_u99036,icpc_u99037,icpc_u99043,icpc_u99044,icpc_u99038,icpc_u99039].att.last();
        
        u99_dt => eadv.[icpc_u99035,icpc_u99036,icpc_u99037,icpc_u99043,icpc_u99044,icpc_u99038,icpc_u99039].dt.last();
        
        u99f : { u99_att!? => to_number(substr(u99_att,-2))};
        
        u99v : { u99f=35 => 1},{ u99f=36 => 2},{ u99f=37 => 3},{ u99f=43 => 3},{ u99f=44 => 4},{ u99f=38 => 5},{ u99f=39 => 6},{=> 0};
        
        u88v : { u88_att!? => to_number(substr(u88_att,-1))},{=>0};
        
        ckd_icpc_ext : { u99_dt > u88_dt => u99v },{ u88_dt > u99_dt => u88v},{ => greatest(u88v,u99v)};
        
        err_flag : { ckd_icpc_val<> ckd_icpc_ext =>1},{=>0};
        
        test2 : {. =>1};
        
        #define_attribute(test2,
            { 
                label: "This is a test variable uics"
            }
        );
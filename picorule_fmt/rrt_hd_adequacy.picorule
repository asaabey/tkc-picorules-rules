        /* Rule block to determine Haemodialysis adequacy*/
        
        #define_ruleblock(rrt_hd_adequacy,
            {
                description: "Rule block to determine Haemodialysis adequacy",
                is_active:2
                
            }
        );

        
        
        rrt => rout_rrt.rrt.val.bind();
        
        #doc(,{
                txt : "Post dialysis urea"
        });
        
        post_u => eadv.lab_bld_urea_post_hd._.lastdv();
        
        pre_u => eadv.lab_bld_urea_pre_hd._.lastdv().where(dt = post_u_dt);
        
        urr : { pre_u_val>post_u_val and post_u_val>0 => round((pre_u_val - post_u_val)/pre_u_val,2)};
        
        #doc(,{
                txt : "Post dialysis urea preceding 1st"
        });
        
        post_u_1 => eadv.lab_bld_urea_post_hd._.lastdv(1);
        
        pre_u_1 => eadv.lab_bld_urea_pre_hd._.lastdv(1).where(dt = post_u_1_dt);
        
        urr_1 : { pre_u_1_val>post_u_1_val and post_u_1_val>0 => round((pre_u_1_val - post_u_1_val)/pre_u_1_val,2)};
        
        
        #doc(,{
                txt : "Post dialysis urea preceding 2nd"
        });
        
        post_u_2 => eadv.lab_bld_urea_post_hd._.lastdv(2);
        
        pre_u_2 => eadv.lab_bld_urea_pre_hd._.lastdv(2).where(dt = post_u_2_dt);
        
        urr_2 : { pre_u_2_val>post_u_2_val and post_u_2_val>0 => round((pre_u_2_val - post_u_2_val)/pre_u_2_val,2)};
        
        #doc(,{
                txt : "Persistent suboptimal flag"
        });
        
        low_urr_flag : {urr<0.65 and (urr_1<0.65 or urr_2<0.65) and rrt=1 =>1},{=>0};
        
        #doc(,{
                txt : "Erroneous collection flag"
        });
        
        err_urr_flag : {urr<0.5 and rrt=1 =>1},{=>0};
        
        #doc(,{
                txt : "Calc spKTV based Ln transformation"
        });
        
        spktv : { coalesce(urr,0)>0 => round(ln(1-urr)*-1,2) };
            
        
        rrt_hd_adequacy : { rrt in (1,4) and urr!? =>1},{=>0};
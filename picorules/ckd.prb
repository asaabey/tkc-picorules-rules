/* Rule block to stage CKD */

  #define_ruleblock(ckd,
    {
        description: "Rule block to stage CKD",
        is_active:2

    }
);

rrt => rout_rrt.rrt.val.bind();

hd_131_n => rout_rrt.hd_131_n.val.bind();

#doc(,{
        txt : "Gather egfr metrics "
});

egfr_l_val => rout_ckd_egfr_metrics.egfr_l_val.val.bind();
egfr_l_dt => rout_ckd_egfr_metrics.egfr_l_dt.val.bind();

egfr_outdated => rout_ckd_egfr_metrics.egfr_outdated.val.bind();

egfr_decline => rout_ckd_egfr_metrics.egfr_decline.val.bind();
egfr_rapid_decline => rout_ckd_egfr_metrics.egfr_rapid_decline.val.bind();
egfr_slope2 => rout_ckd_egfr_metrics.egfr_slope2.val.bind();


#doc(,{
        txt : "Check for egfr and uacr assumption violation exclusion "
});


g_asm_viol_ex => rout_ckd_egfr_metrics.g_asm_viol_ex.val.bind();

a_asm_viol_ex => rout_ckd_uacr_metrics.a_asm_viol_ex.val.bind();

asm_viol_ex : { g_asm_viol_ex=1 and a_asm_viol_ex=1 =>1},{=>0};

#doc(,{
        txt : "Gather uacr metrics"
});


acr_l_dt => rout_ckd_uacr_metrics.acr_l_dt.val.bind();

acr_l_val => rout_ckd_uacr_metrics.acr_l_val.val.bind();


acr_outdated => rout_ckd_uacr_metrics.acr_outdated.val.bind();

acr_past_pers_flag => rout_ckd_uacr_metrics.acr_past_pers_flag.val.bind();

acr_past_singular_flag => rout_ckd_uacr_metrics.acr_past_singular_flag.val.bind();

acr_decline_flag => rout_ckd_uacr_metrics.acr_decline_flag.val.bind();

acr_nom_crit => rout_ckd_uacr_metrics.acr_nom_crit.val.bind();

#doc(,{
        txt : "check for eGFR and uACR persistence based on KDIGO persistence definition "
});

g_pers => rout_ckd_egfr_metrics.g_pers.val.bind();

a_pers => rout_ckd_uacr_metrics.a_pers.val.bind();

pers : {greatest(g_pers,a_pers)>0 => 1},{=>0};

#doc(,{
        txt : "Evidence of renal injury satisfying ckd without G and A"
});

c_gn => rout_ckd_c_gn.ckd_c_gn.val.bind();

c_tid => rout_ckd_c_tid.ckd_c_tid.val.bind();

c_rnm => rout_ckd_c_rnm.ckd_c_rnm.val.bind();

c_crit : { greatest(c_gn,c_tid,c_rnm)>0 =>1},{=>0};

#doc(,{
        txt : "Apply KDIGO 2012 staging",
        cite: "ckd_ref1, ckd_ref2"
});



cga_g:  {egfr_l_val>=90 AND rrt=0 => `G1`},
        {egfr_l_val<90 AND egfr_l_val>=60  AND rrt=0 => `G2`},
        {egfr_l_val<60 AND egfr_l_val>=45  AND rrt=0 => `G3A`},
        {egfr_l_val<45 AND egfr_l_val>=30  AND rrt=0 => `G3B`},
        {egfr_l_val<30 AND egfr_l_val>=15  AND rrt=0 => `G4`},
        {egfr_l_val<15 AND rrt=0 => `G5`},
        {=>`NA`};


cga_g_val:  {egfr_l_val>=90 AND rrt=0 => 1},
        {egfr_l_val<90 AND egfr_l_val>=60  AND rrt=0 => 2},
        {egfr_l_val<60 AND egfr_l_val>=45  AND rrt=0 => 3},
        {egfr_l_val<45 AND egfr_l_val>=30  AND rrt=0 => 4},
        {egfr_l_val<30 AND egfr_l_val>=15  AND rrt=0 => 5},
        {egfr_l_val<15 AND rrt=0 => 6},
        {=>0};

cga_a: {acr_l_val<3 => `A1`},
        {acr_l_val<30 AND acr_l_val>=3 => `A2`},
        {acr_l_val<300 AND acr_l_val>=30 => `A3`},
        {acr_l_val>300 => `A4`},{=>`NA`};

cga_a_val: {acr_l_val<3 => 1},
        {acr_l_val<30 AND acr_l_val>=3 => 2},
        {acr_l_val<300 AND acr_l_val>=30 => 3},
        {acr_l_val>300 => 4},{=>0};

#doc(,{
        txt : "KDIGO 2012 string composite attribute"
});




ckd_stage_val :{cga_g_val=1 and (cga_a_val>1 or c_crit=1 or acr_nom_crit=1) => 1},
        {cga_g_val=2 and (cga_a_val>1 or c_crit=1 or acr_nom_crit=1) => 2},
        {cga_g_val=3 => 3},
        {cga_g_val=4 => 4},
        {cga_g_val=5 => 5},
        {cga_g_val=6 => 6},
        {=> 0};

ckd_stage :{ ckd_stage_val=1 => `1`},
        {ckd_stage_val=2 => `2`},
        {ckd_stage_val=3 => `3A`},
        {ckd_stage_val=4 => `3B`},
        {ckd_stage_val=5 => `4`},
        {ckd_stage_val=6 => `5`},
        {ckd_stage_val=0=> null};

#doc(,
    {
        txt : "KDIGO 2012 numeric composite attribute"
    }
);


ckd : {. => ckd_stage_val};

egfr_current : { egfr_l_dt > sysdate-730 =>1},{=>0};

assert_level : {. => 100000 + pers*10000 + g_asm_viol_ex*1000 + egfr_current * 100 + acr_nom_crit * 10};

mm2 : {assert_level<111100=>1},{=>0};


esrd_risk : { cga_g_val >= 5 or (cga_g_val >=4 and cga_a_val >= 2)  or (cga_g_val >=3 and cga_a_val >=3 ) => 4},
            { cga_g_val >= 4 or (cga_g_val >=3 and cga_a_val >= 2)  or (cga_g_val >=1 and cga_a_val >=3 ) => 3},
            { (cga_g_val = 3) or (cga_g_val>=1 and cga_a_val=2)  => 2},
            { ckd>=1 => 1};

#doc(,
    {
        txt : "KDIGO 2012 binary attributes"
    }
);


ckd_stage_1 : { ckd=1 => 1},{=>0};

ckd_stage_2 : { ckd=2 => 1},{=>0};

ckd_stage_3a : { ckd=3 => 1},{=>0};

ckd_stage_3b : { ckd=4 => 1},{=>0};

ckd_stage_4 : { ckd=5 => 1},{=>0};

ckd_stage_5 : { ckd=6 => 1},{=>0};

#define_attribute(
    ckd_stage,
    {
        label:"CKD stage as string as per KDIGO 2012",
        desc:"VARCHAR2 corresponding to stage. eg.3A",
        is_reportable:0,
        type:1
    }
);

#define_attribute(
    ckd,
    {
        label:"CKD stage as number as per KDIGO 2012",
        desc:"Integer [1-6] corresponding to ordinal value",
        is_reportable:0,
        type:2
    }
);

#define_attribute(
    ckd_stage_1,
    {

        label:"CKD stage 1",
        is_reportable:1,
        type:2
    }
);

#define_attribute(
    ckd_stage_2,
    {
        label:"CKD stage 2",
        is_reportable:1,
        type:2
    }
);

#define_attribute(
    ckd_stage_3a,
    {
        label:"CKD stage 3A",
        is_reportable:1,
        type:2
    }
);

#define_attribute(
    ckd_stage_3b,
    {
        label:"CKD stage 3B",
        is_reportable:1,
        type:2
    }
);

#define_attribute(
    ckd_stage_4,
    {
        label:"CKD stage 4",
        is_reportable:1,
        type:2
    }
);

#define_attribute(
    ckd_stage_5,
    {
        label:"CKD stage 5",
        is_reportable:1,
        type:2
    }
);


#doc(,
    {
        txt : "Gather careplan info and extract CKD specific component"
    }
);



cp_ckd_val => rout_ckd_careplan.cp_ckd_val.val.bind();

cp_ckd_ld => rout_ckd_careplan.cp_ckd_ld.val.bind();

is_pcis => rout_ckd_careplan.is_pcis.val.bind();

rsc_ld => rout_ckd_careplan.rsc_ld.val.bind();



#doc(,
    {
        txt : "Gather ICPC2+ coding from EHR"
    }
);


dx_ckd => rout_ckd_coded_dx.ckd_coded_dx.val.bind();

dx_ckd_icd => rout_ckd_coded_dx.n18v.val.bind();

dx_ckd_stage :{dx_ckd=1 => `1`},
        {dx_ckd=2 => `2`},
        {dx_ckd=3 => `3A`},
        {dx_ckd=4 => `3B`},
        {dx_ckd=5 => `4`},
        {dx_ckd=6 => `5`},
        {dx_ckd=0 => `0`};

#define_attribute(
    dx_ckd,
    {
        label:"CKD stage on EHR as per ICPC2+ Code",
        desc:"Integer",
        is_reportable:0,
        type:2
    }
);

#define_attribute(
    dx_ckd_stage,
    {
        label:"CKD stage on EHR as per ICPC2+ Code",
        desc:"VARCHAR2 corresponding to stage. eg 3A",
        is_reportable:0,
        type:1
    }
);

dx_ckd_diff :{abs(ckd-dx_ckd)>=2 => 1 },{=>0};

#define_attribute(
    dx_ckd_diff,
    {
        label:"Difference between coded and calculated",
        desc:"Algebraic difference between numeric stages ",
        is_reportable:0,
        type:1001
    }
);

#define_attribute(
    assert_level,
    {
        label:"Composite indicating persistence and no assumption violation",
        desc:"Composite number",
        is_reportable:0,
        type:2
    }
);

#doc(,
    {
        txt : " Encounters with specialist services"
    }
);


ref_ld => rout_engmnt_renal.ref_ren_ld.val.bind();

enc_ld => rout_engmnt_renal.enc_ld.val.bind();

enc_n => rout_engmnt_renal.enc_n.val.bind();

enc_fd => rout_engmnt_renal.enc_fd.val.bind();

#doc(,
    {
        txt : "Access formation"
    }
);



cp_mis :{cp_ckd_val>0 and (ckd - cp_ckd_val)>=2 => 1},{=>0};

avf => rout_ckd_access.avf.val.bind();
avf_dt => rout_ckd_access.avf_dt.val.bind();


#define_attribute(
    cp_mis,
    {
        label:"Misclassifcation occured",
        desc:"Integer [0-1]",
        is_reportable:0,
        type:1001
    }
);

#define_attribute(
    egfr_l_val,
    {
        label:"CKD panel eGFR last value",
        is_reportable:1,
        type:2
    }
);

#define_attribute(
    egfr_l_dt,
    {
        label:"CKD panel eGFR last date",
        is_reportable:1,
        type:12
    }
);


#define_attribute(
    acr_l_val,
    {
        label:"CKD panel uACR last value",
        is_reportable:1,
        type:2
    }
);

#define_attribute(
    acr_l_dt,
    {
        label:"CKD panel uACR last date",
        is_reportable:1,
        type:12
    }
);

mm1 : { ckd>3 and coalesce(hd_131_n,0)>0 =>1},{=>0};
[
  {
    "name": "ckd_dense",
    "text": "/* Optimized Rule block for cube generation in CKD*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Optimized Rule block for cube generation in CKD\",\n                is_active:0,\n\n                \n            }\n        );\n        \n        dob => eadv.dmg_dob.dt.max();\n        \n        dod => eadv.dmg_dod.dt.max();\n        \n        alive : { dod < sysdate-365 => 0},{ => 1};\n        \n        gender => eadv.dmg_gender.val.last();\n        \n        loc_mode_phc => eadv.dmg_location.val.stats_mode().where(substr(val,-1)=1);\n        \n        loc_mode => eadv.dmg_location.val.stats_mode().where(dt > sysdate - 730);\n        \n        source => eadv.dmg_source.val.last();\n        \n        \n        \n                \n        hd_z49_n => eadv.icd_z49_1.dt.count(0);\n        \n        hd_z49_1y_n => eadv.icd_z49_1.dt.count(0).where(dt>sysdate-365);\n        \n        hd_dt => eadv.icd_z49_1.dt.max(1900); \n        \n        hd_dt_min => eadv.icd_z49_1.dt.min();\n        \n        \n        pd_dt => eadv.[caresys_13100_06,caresys_13100_07,caresys_13100_08,icpc_u59007,icpc_u59009,icd_z49_2].dt.max(1900);\n        \n        tx_dt => eadv.[icpc_u28001,icd_z94%].dt.max(1900);\n        \n        homedx_dt => eadv.[icpc_u59j99].dt.max(1900);\n        \n        \n        ren_enc => eadv.enc_op_renal.dt.max(1900);\n        \n        rrt_ex_flag : { alive=0 =>1},{=>0};\n        \n        rrt:{hd_dt > greatest(pd_dt,tx_dt,homedx_dt) and hd_z49_1y_n>10  and hd_dt>sysdate-365  and rrt_ex_flag=0 => 1},\n            {pd_dt > greatest(hd_dt,tx_dt,homedx_dt) and rrt_ex_flag=0 => 2},\n            {tx_dt > greatest(hd_dt,pd_dt,homedx_dt) and rrt_ex_flag=0 => 3},\n            {homedx_dt > greatest(hd_dt,pd_dt,tx_dt) and rrt_ex_flag=0 => 4},\n            {=>0};\n\n             \n        pd_dt_min => eadv.[caresys_13100_06,caresys_13100_07,caresys_13100_08,icpc_u59007,icpc_u59009,icd_z49_2].dt.min();\n        \n        \n        hd_incd : {hd_dt_min > sysdate-365 and hd_z49_n>=10 => 1},{=>0};\n          \n        pd_incd : {pd_dt_min > sysdate-365 => 1},{=>0};\n        \n        rrt_incd : { hd_incd=1 or pd_incd=1 => 1},{=>0};\n        \n        #doc(,\n            {\n                txt : \"CKD staging based KDIGO 2012\"\n            }\n        );\n        \n        #doc(,\n            {\n                txt : \"Exclusions\"\n            }\n        );\n        \n        ckd_ex_flag : { rrt>0 or alive=0 =>1},{=>0};\n        \n        #doc(,\n            {\n                txt : \"Read last,first, -30 day and -365 day egfr values\"\n            }\n        );\n        \n        egfr_l => eadv.lab_bld_egfr_c.val.lastdv().where(dt > sysdate - 365);\n        \n        egfr_l1 => eadv.lab_bld_egfr_c.val.lastdv().where(dt < egfr_l_dt-90 and dt>egfr_l_dt-365);\n        \n        egfr_l2 => eadv.lab_bld_egfr_c.val.lastdv().where(dt < egfr_l_dt-365);\n        \n        egfr_f => eadv.lab_bld_egfr_c.val.firstdv();\n        \n        \n        #doc(,\n            {\n                txt : \"Check for 30 day egfr assumption violation\"\n            }\n        );\n        \n        egfr_30_n2 => eadv.lab_bld_egfr_c.val.count(0).where(dt>egfr_l_dt-30);\n        egfr_30_mu => eadv.lab_bld_egfr_c.val.avg().where(dt>egfr_l_dt-30);\n        \n        egfr_30_qt : {egfr_30_n2>=2 => round(egfr_l_val/egfr_30_mu,2)};\n        \n        asm_viol_30 : {nvl(egfr_30_qt,1)>1.2 or nvl(egfr_30_qt,1)<0.8  => 1},{=> 0};\n        \n        asm_viol_ex : {asm_viol_30=1 =>0},{=>1};       \n               \n        #doc(,\n            {\n                txt : \"Check for 90 day egfr persistence\"\n            }\n        );\n        \n        \n        g_pers : { egfr_l1_val<90 and egfr_l_val<60 => 1},{ egfr_l2_val<90 and egfr_l_val<60 =>1},{=>0};\n        \n        \n        #doc(,\n            {\n                txt : \"Check for 1y egfr progression\"\n            }\n        );\n        \n        ckd_prog : { egfr_l2_val!? =>1},{=>0};\n   \n        l_l2_delta : { egfr_l2_val!? => egfr_l_val-egfr_l2_val};\n        \n        g_stage_prog : {l_l2_delta < -15 =>1},{=>0};\n        \n        #doc(,\n            {\n                txt : \"Check for 30 day uacr persistence\"\n            }\n        );\n        \n        acr_l => eadv.lab_ua_acr.val.lastdv().where(dt > sysdate - 365);\n        \n        acr_l1 => eadv.lab_ua_acr.val.lastdv().where(dt < acr_l_dt-30 and dt > sysdate - 730);    \n        \n        a_pers : {acr_l_val>3 and acr_l1_val>3 => 1},{=>0};\n        \n        ckd_pers : {greatest(g_pers,a_pers)>0 => 1},{=>0};\n        \n        g_l_val:  {egfr_l_val>=90  => 1},\n                {egfr_l_val<90 AND egfr_l_val>=60  AND rrt=0 => 2},\n                {egfr_l_val<60 AND egfr_l_val>=45  AND rrt=0 => 3},\n                {egfr_l_val<45 AND egfr_l_val>=30  AND rrt=0 => 4},\n                {egfr_l_val<30 AND egfr_l_val>=15  AND rrt=0 => 5},\n                {egfr_l_val<15 AND rrt=0 => 6},\n                {=>0};\n                \n                \n        a_l_val: {acr_l_val<3 => 1},\n                {acr_l_val<30 AND acr_l_val>=3 => 2},\n                {acr_l_val<300 AND acr_l_val>=30 => 3},\n                {acr_l_val>300 => 4},{=>0};\n        \n        \n       \n        avf => eadv.caresys_3450901.dt.max();        \n        \n        ckd :{g_l_val=1 and a_l_val>1 and ckd_ex_flag=0=> 1},\n                {g_l_val=2 and a_l_val>1 and ckd_ex_flag=0 => 2},\n                {g_l_val>2 and ckd_ex_flag=0 => g_l_val},\n                {=> 0};\n        \n        dx_ckd0_  => eadv.[icpc_u99035,icpc_u99036,icpc_u99037,icpc_u99043,icpc_u99044,icpc_u99038,icpc_u99039,icpc_u88j91,icpc_u88j92,icpc_u88j93,icpc_u88j94,icpc_u88j95,icpc_u88j95,6].val.last();\n        \n        dx_ckd : { 1=1 => nvl(dx_ckd0_,0)};            \n        \n        dx_ckd_diff :{abs(ckd-dx_ckd)>=2 => 1 },{=>0};\n        \n       \n        \n        \n        \n        assert_level : {. => 100000 + ckd_pers*10000 + asm_viol_ex*1000 + ckd_prog*100};",
    "is_active": true
  },
  {
    "name": "at_risk_dense",
    "text": "/*  Test  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is the at_risk_dense algorithm\",\n                is_active:0\n                \n            }\n        );\n        \n        ckd => rout_ckd_dense.ckd.val.bind();\n        \n        rrt => rout_ckd_dense.rrt.val.bind();\n        \n        alive => rout_ckd_dense.alive.val.bind();\n        \n        ckd_icpc_val => eadv.[icpc_u99035,icpc_u99036,icpc_u99037,icpc_u99043,icpc_u99044,icpc_u99038,icpc_u99039].dt.max();\n        \n        dm_icd_fd => eadv.[icd_e08%,icd_e09%,icd_e10%,icd_e11%,icd_e14%].dt.min();\n        \n        dm_icpc_fd => eadv.[icpc_t89%,icpc_t90%].dt.min();\n        \n        \n        \n        dm_fd : {.=>least_date(dm_icd_fd, dm_icpc_fd)};\n        \n        dm_prev : { dm_fd!? => 1 },{=>0};\n        \n        dm_incd : { dm_fd > sysdate - 365 => 1},{=>0};\n        \n        htn_icd_fd => eadv.[icd_i10_%,icd_i15_%].dt.min();\n        \n        htn_icpc_fd => eadv.[icpc_k85%,icpc_k86%,icpc_k87%].dt.min();\n\n        htn_fd : { htn_icd_fd!? and htn_icpc_fd!? => least(htn_icd_fd,htn_icpc_fd) },{htn_icd_fd!? => htn_icd_fd},{htn_icpc_fd!? => htn_icpc_fd};\n        \n        htn_prev : { htn_fd!? => 1 },{=>0};\n        \n        htn_incd : { htn_fd > sysdate - 365 => 1},{=>0};\n        \n        ihd_fd => eadv.[icd_z95_1%,icpc_k54007,icd_i21%,icd_i22%,icd_i23%,icd_i24%,icd_i25%,icpc_k74%,icpc_k75%,icpc_k76%].dt.min(2999);\n        \n        cva_fd => eadv.[icd_g46%,icpc_k89%,icpc_k90%,icpc_k91%].dt.min(2999);\n            \n        pvd_fd => eadv.[icd_i70%,icd_i71%,icd_i72%,icd_i73%,icpc_k92%].dt.min(2999);\n        \n        cvd_fd : { least(ihd_fd,cva_fd,pvd_fd)< to_date(`29991231`,`YYYYMMDD`) => least(ihd_fd,cva_fd,pvd_fd)};\n        \n        \n        cvd_prev : { cvd_fd!? => 1 },{=>0};\n        \n        cvd_incd : { cvd_fd > sysdate - 365 => 1},{=>0};\n        \n        \n        \n        dyslip_fd => eadv.[icpc_t93%].dt.min();\n        \n        dyslip_prev : { dyslip_fd!? => 1 },{=>0};\n        \n        dyslip_incd : { dyslip_fd > sysdate - 365 => 1},{=>0};\n        \n        obese_fd => eadv.[icd_e66%,icpc_t82%].dt.min();\n        \n        obese_prev : { obese_fd!? => 1 },{=>0};\n        \n        obese_incd : { obese_fd > sysdate - 365 => 1},{=>0};\n        \n        at_risk : {coalesce(obese_fd, dyslip_fd,cvd_fd,htn_fd,dm_fd)!? and ckd=0 and rrt=0 and alive=1 =>1},{=>0};\n        \n            \n        egfr_1y_n => eadv.lab_bld_egfr_c.dt.count(0).where(dt > sysdate -365);\n        \n        uacr_1y_n => eadv.lab_bld_egfr_c.dt.count(0).where(dt > sysdate -365);\n        \n        \n        \n        screen_egfr : { egfr_1y_n>0 =>1 },{ => 0}; \n        \n        screen_uacr : { uacr_1y_n>0 =>1 },{ => 0};\n        \n        \n        \n        screen_full : { . => screen_egfr + screen_uacr };\n        \n        mbs_715 => eadv.mbs_715.dt.count().where(dt > sysdate -365);\n        \n        mbs_715_2y => eadv.mbs_715.dt.count().where(dt > sysdate -730);\n        \n        mbs_721 => eadv.mbs_721.dt.count().where(dt > sysdate -365);\n        \n        mbs_723 => eadv.mbs_721.dt.count().where(dt > sysdate -365);\n        \n        mbs_flag : { . => coalesce(mbs_715,mbs_721,mbs_723)};\n        [[rb_id]] : {1=1 =>1};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"This is a test variable uics\"\n            }\n        );",
    "is_active": true
  },
  {
    "name": "id_covid19",
    "text": "/*  This is a algorithm to identify covid19  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify covid19\",\n                is_active:2\n                \n            }\n        );\n        \n        covid19_icpc => eadv.[icpc_r83015].dt.last();\n                        \n        [[rb_id]] : { covid19_icpc!? => 1 },{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of covid19 infection\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ckd_labs2",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n\n       egfr1 => eadv.lab_bld_egfr_c.val.lastdv().where(dt>sysdate-730);\n       egfr2 => eadv.lab_bld_egfr_c.val.lastdv(1).where(dt>sysdate-730);\n       egfr3 => eadv.lab_bld_egfr_c.val.lastdv(2).where(dt>sysdate-730);\n       \n       creat1 => eadv.lab_bld_creatinine.val.lastdv().where(dt>sysdate-730);\n       creat2 => eadv.lab_bld_creatinine.val.lastdv(1).where(dt>sysdate-730);\n       creat3 => eadv.lab_bld_creatinine.val.lastdv(2).where(dt>sysdate-730);\n       \n       uacr1 => eadv.lab_ua_acr.val.lastdv().where(dt>sysdate-730);\n       uacr2 => eadv.lab_ua_acr.val.lastdv(1).where(dt>sysdate-730);\n       uacr3 => eadv.lab_ua_acr.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n      \n       sodium1 => eadv.lab_bld_sodium.val.lastdv().where(dt>sysdate-730);\n       sodium2 => eadv.lab_bld_sodium.val.lastdv(1).where(dt>sysdate-730);\n       sodium3 => eadv.lab_bld_sodium.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       potassium1 => eadv.lab_bld_potassium.val.lastdv().where(dt>sysdate-730);\n       potassium2 => eadv.lab_bld_potassium.val.lastdv(1).where(dt>sysdate-730);\n       potassium3 => eadv.lab_bld_potassium.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       bicarb1 => eadv.lab_bld_bicarbonate.val.lastdv().where(dt>sysdate-730);\n       bicarb2 => eadv.lab_bld_bicarbonate.val.lastdv(1).where(dt>sysdate-730);\n       bicarb3 => eadv.lab_bld_bicarbonate.val.lastdv(2).where(dt>sysdate-730);\n       \n       calcium1 => eadv.lab_bld_calcium.val.lastdv().where(dt>sysdate-730);\n       calcium2 => eadv.lab_bld_calcium.val.lastdv(1).where(dt>sysdate-730);\n       calcium3 => eadv.lab_bld_calcium.val.lastdv(2).where(dt>sysdate-730);\n       \n       phos1 => eadv.lab_bld_phosphate.val.lastdv().where(dt>sysdate-730);\n       phos2 => eadv.lab_bld_phosphate.val.lastdv(1).where(dt>sysdate-730);\n       phos3 => eadv.lab_bld_phosphate.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       hb1 => eadv.lab_bld_hb.val.lastdv().where(dt>sysdate-730);\n       hb2 => eadv.lab_bld_hb.val.lastdv(1).where(dt>sysdate-730);\n       hb3 => eadv.lab_bld_hb.val.lastdv(2).where(dt>sysdate-730);\n\n       \n       \n       \n       ferritin1 => eadv.lab_bld_ferritin.val.lastdv().where(dt>sysdate-730);\n       ferritin2 => eadv.lab_bld_ferritin.val.lastdv(1).where(dt>sysdate-730);\n       ferritin3 => eadv.lab_bld_ferritin.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       [[rb_id]] : {nvl(egfr1_val,0)>0 and nvl(egfr2_val,0)>0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "ckd_labs_euc",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n       \n       creat1 => eadv.lab_bld_creatinine.val.lastdv().where(dt>sysdate-730);\n       creat2 => eadv.lab_bld_creatinine.val.lastdv(1).where(dt>sysdate-730);\n       creat3 => eadv.lab_bld_creatinine.val.lastdv(2).where(dt>sysdate-730);\n             \n       sodium1 => eadv.lab_bld_sodium.val.lastdv().where(dt>sysdate-730);\n       sodium2 => eadv.lab_bld_sodium.val.lastdv(1).where(dt>sysdate-730);\n       sodium3 => eadv.lab_bld_sodium.val.lastdv(2).where(dt>sysdate-730);\n       \n       potassium1 => eadv.lab_bld_potassium.val.lastdv().where(dt>sysdate-730);\n       potassium2 => eadv.lab_bld_potassium.val.lastdv(1).where(dt>sysdate-730);\n       potassium3 => eadv.lab_bld_potassium.val.lastdv(2).where(dt>sysdate-730);\n       \n       bicarb1 => eadv.lab_bld_bicarbonate.val.lastdv().where(dt>sysdate-730);\n       bicarb2 => eadv.lab_bld_bicarbonate.val.lastdv(1).where(dt>sysdate-730);\n       bicarb3 => eadv.lab_bld_bicarbonate.val.lastdv(2).where(dt>sysdate-730);\n       \n       [[rb_id]] : {nvl(creat1_val,0)>0 and nvl(creat2_val,0)>0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "ckd_labs_cmp",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n       calcium1 => eadv.lab_bld_calcium.val.lastdv().where(dt>sysdate-730);\n       calcium2 => eadv.lab_bld_calcium.val.lastdv(1).where(dt>sysdate-730);\n       calcium3 => eadv.lab_bld_calcium.val.lastdv(2).where(dt>sysdate-730);\n       \n       phos1 => eadv.lab_bld_phosphate.val.lastdv().where(dt>sysdate-730);\n       phos2 => eadv.lab_bld_phosphate.val.lastdv(1).where(dt>sysdate-730);\n       phos3 => eadv.lab_bld_phosphate.val.lastdv(2).where(dt>sysdate-730);\n\n       pth1 => eadv.lab_bld_pth.val.lastdv().where(dt>sysdate-730);\n       pth2 => eadv.lab_bld_pth.val.lastdv(1).where(dt>sysdate-730);\n       pth3 => eadv.lab_bld_pth.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n      \n       [[rb_id]] : {coalesce(calcium1_val,0)>0 and coalesce(calcium2_val,0)>0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "ckd_labs_haem",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n       hb1 => eadv.lab_bld_hb._.lastdv().where(dt>sysdate-730);\n       hb2 => eadv.lab_bld_hb._.lastdv(1).where(dt>sysdate-730);\n       hb3 => eadv.lab_bld_hb._.lastdv(2).where(dt>sysdate-730);\n\n       plt1 => eadv.lab_bld_platelets._.lastdv().where(dt>sysdate-730);\n        \n       wcc_neut1 => eadv.lab_bld_wcc_neutrophils._.lastdv().where(dt>sysdate-730);\n        \n       wcc_eos1 => eadv.lab_bld_wcc_eosinophils._.lastdv().where(dt>sysdate-730);\n       \n       fer1 => eadv.lab_bld_ferritin._.lastdv().where(dt>sysdate-730);\n        \n       crp1 => eadv.lab_bld_crp._.lastdv().where(dt>sysdate-730);\n        \n       tsat1 => eadv.lab_bld_tsat._.lastdv().where(dt>sysdate-730);\n       \n             \n       [[rb_id]] : {coalesce(hb1_val,0)>0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "cd_cva",
    "text": "/* Ruleblock to assess for cva*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess for cva\",\n                is_active:2\n                \n            }\n        );\n        \n        \n        cva_infarct_dt => eadv.[icd_i63%,icd_i65%,icd_i66%,icd_i67%].dt.min();\n        \n        cva_hmrage_dt => eadv.[icd_i60%,icd_i61%,icd_i62%].dt.min();\n        \n        cva_nos_dt =>  eadv.icd_i64.dt.min();\n        \n        cva_icpc_dt => eadv.[icpc_k90%,icpc_k91%].dt.min();\n        \n        cva_dt : {.=> least_date(cva_infarct_dt,cva_nos_dt,cva_hmrage_dt,cva_icpc_dt)};\n        \n        \n        [[rb_id]] :  {cva_dt!? => 1},{=>0};\n        \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Stroke\",\n                desc:\"Presence of haemorrhagic or thromboembolic stroke\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "egfr_graph2",
    "text": "/* Algorithm to plot egfr graph 2 */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to plot egfr graph 2\",\n                   \n                    is_active:2\n                    \n                }\n            );\n            \n            rrt => rout_rrt.rrt.val.bind();\n            \n            egfr_n => eadv.lab_bld_egfr_c.val.count(0).where(dt > sysdate - 3650);\n            \n            egfr_f => eadv.lab_bld_egfr_c.val.firstdv().where(dt > sysdate - 3650);\n            \n            egfr_l => eadv.lab_bld_egfr_c.val.lastdv().where(dt > sysdate - 3650);\n            \n            \n            egfr_max => eadv.lab_bld_egfr_c.val.maxldv().where(dt > sysdate - 3650);\n            \n            egfr_min => eadv.lab_bld_egfr_c.val.minldv().where(dt > sysdate - 3650);\n            \n            \n            egfr60_last => eadv.lab_bld_egfr_c.val.lastdv().where(val>60);\n            \n            \n            \n            dspan : { . => egfr_l_dt - egfr_f_dt };\n            \n            yspan : { . => round((dspan/365.25),1)};\n\n            egfr_graph => eadv.lab_bld_egfr_c.val.serializedv2(round(val,0)~dt).where(dt > sysdate - 3650);\n\n            \n            egfr_graph_canvas_x : {1=1 => 450};\n            \n            egfr_graph_canvas_y : {1=1 => 300};\n            \n            egfr_graph_y_max : {1=1 => egfr_max_val + 10 };\n            \n            egfr_graph_y_min : {1=1 => egfr_min_val };\n            \n            \n            \n            x_scale : { dspan >0 => round(egfr_graph_canvas_x / dspan,5)};\n            \n            \n            y_scale : {1=1 => round( egfr_graph_canvas_y /( egfr_graph_y_max - egfr_graph_y_min),5)};\n            \n            \n            line1_x1 : {1=1 => round(( egfr60_last_dt - egfr_f_dt )* x_scale,0) };\n            \n            line1_x2 : {1=1 => round(( egfr_l_dt - egfr_f_dt )* x_scale,0) };\n            \n            line1_y1 : {1=1 => round((egfr_graph_y_max-egfr60_last_val) * y_scale,0) };\n            \n            line1_y2 : {1=1 => round((egfr_graph_y_max-egfr_l_val) * y_scale,0) };\n            \n            line2_y1 : {1=1 => round((egfr_graph_y_max-egfr_f_val) * y_scale,0) };\n            \n            line_max_y : {1=1 => round((egfr_graph_y_max - egfr_max_val)*y_scale,0) };\n                \n            slope1 : { egfr_l_dt - egfr60_last_dt>0 =>round(((egfr_l_val - egfr60_last_val)/(egfr_l_dt - egfr60_last_dt))*365.25,2) },{=>0};\n            \n            show_slope1 : { slope1 <-5 => 1 },{=>0};\n            \n            \n            txt_upper_y : { 1=1 => line_max_y -5};\n            \n            txt_lower_y : { 1=1 => line1_y2 - 15};\n            \n            \n            txt_slope1_x : {1=1 => round((line1_x1 + ((egfr_l_dt-egfr60_last_dt)/2))*x_scale,0)};\n            \n            txt_slope1_y : {1=1 => round((150-50)* y_scale,0)};\n\n            mspan : { egfr_n>0 => round((egfr_l_dt-egfr_f_dt)/12,0)};\n            \n            \n            \n            [[rb_id]] : {rrt=0 and egfr_graph_val is not null and egfr_n>2 and mspan>=3 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "acr_graph",
    "text": "/* Algorithm to plot acr graph  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to plot acr graph \",\n                    \n                    is_active:2\n                    \n                }\n            );\n            \n            rrt => rout_rrt.rrt.val.bind();\n            \n            acr_max => eadv.lab_ua_acr._.maxldv();\n            \n            acr_min => eadv.lab_ua_acr._.minldv();\n            \n            acr_f => eadv.lab_ua_acr._.firstdv();\n            \n            acr_l => eadv.lab_ua_acr._.lastdv();\n            \n            dspan : { acr_l_dt> acr_f_dt => acr_l_dt - acr_f_dt};\n            \n            dspan_y : { dspan>0 => ceil(dspan/365)};\n                        \n            acr_n => eadv.lab_ua_acr.dt.count();\n            \n            acr_n_30 => eadv.lab_ua_acr.val.count();\n            \n            acr_graph_canvas_x : {1=1 => 350};\n            \n            acr_graph_canvas_y : {1=1 => 100};\n\n            acr_graph => eadv.lab_ua_acr.val.serializedv2(round(val,0)~dt);    \n            \n            \n            acr_graph_y_max : {. => acr_max_val};\n            \n            acr_graph_y_min : { . => acr_min_val};\n            \n            acr_graph_x_scale : {. => round(acr_graph_canvas_x/dspan,5)};\n            \n            acr_graph_y_scale : { acr_graph_y_max > acr_graph_y_min => round(acr_graph_canvas_y/(acr_graph_y_max-acr_graph_y_min),5)},{=>round(acr_graph_canvas_y/10,5)};\n            \n                        \n            line_upper_y : {.=> 0};\n            \n            line_lower_y : {. => (acr_graph_y_max-acr_graph_y_min) * acr_graph_y_scale};\n            \n            \n            [[rb_id]] : { acr_n_30>3 and rrt=0 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "hb_graph",
    "text": "/* Algorithm to plot hb graph  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to plot hb graph\",\n                    \n                    is_active:2\n                    \n                }\n            );\n            \n            hb_max => eadv.lab_bld_hb._.maxldv().where(dt>sysdate-730);\n            \n            hb_min => eadv.lab_bld_hb._.minldv().where(dt>sysdate-730);\n            \n                        \n            hb_n => eadv.lab_bld_hb.dt.count().where(dt>sysdate-730);\n            \n            rrt => rout_rrt.rrt.val.bind();\n            \n            hb_graph_canvas_x : {1=1 => 350};\n            \n            hb_graph_canvas_y : {1=1 => 100};\n            \n            \n            hb_target_max : { . => 130};\n            hb_target_min : { . => 100};\n            \n            \n                       \n            hb_graph => eadv.lab_bld_hb.val.serializedv2(round(val,0)~dt).where(dt>sysdate-730);    \n            \n            \n            hb_graph_y_max : {. => hb_max_val};\n            \n            hb_graph_y_min : { hb_min_val < hb_target_min => hb_min_val},{=> hb_target_min};\n            \n            hb_graph_x_scale : {. => round(hb_graph_canvas_x/730,5)};\n            \n            hb_graph_y_scale : { hb_graph_y_max > hb_graph_y_min => round(hb_graph_canvas_y/(hb_graph_y_max-hb_graph_y_min),5)},{=>round(hb_graph_canvas_y/10,5)};\n            \n                        \n            line_upper_y : {.=> 0};\n            \n            line_lower_y : {. => (hb_graph_y_max-hb_graph_y_min) * hb_graph_y_scale};\n            \n            line_target_upper_y : {hb_graph_y_min< hb_target_max and hb_graph_y_max> hb_target_max => (hb_graph_y_max-10) * hb_graph_y_scale};\n            \n            \n            [[rb_id]] : { rrt=1 and hb_n>3 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "phos_graph",
    "text": "/* Algorithm to plot phosphate graph  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to plot phosphate graph\",\n                    is_active:2\n                    \n                    \n                }\n            );\n            \n            phos_max => eadv.lab_bld_phosphate._.maxldv().where(dt>sysdate-730);\n            \n            phos_min => eadv.lab_bld_phosphate._.minldv().where(dt>sysdate-730);\n            \n                        \n            phos_n => eadv.lab_bld_phosphate.dt.count().where(dt>sysdate-730);\n            \n            rrt => rout_rrt.rrt.val.bind();\n            \n            phos_graph_canvas_x : {1=1 => 350};\n            \n            phos_graph_canvas_y : {1=1 => 100};\n            \n            \n            phos_target_max : { . => 1.7};\n            phos_target_min : { . => 1.1};\n            \n            \n                       \n            phos_graph => eadv.lab_bld_phosphate.val.serializedv2(round(val,1)~dt).where(dt>sysdate-730);    \n            \n            \n            phos_graph_y_max : {. => greatest(phos_max_val,phos_target_max)};\n            \n            phos_graph_y_min : {. => least(phos_min_val,phos_target_min)};\n            \n            phos_graph_x_scale : {. => round(phos_graph_canvas_x/730,5)};\n            \n            phos_graph_y_scale : { . => round(phos_graph_canvas_y/(phos_graph_y_max-phos_graph_y_min),5)};\n            \n                        \n            line_upper_y : {.=> 0};\n            \n            line_lower_y : {. => 100};\n            \n            \n            line_target_upper_y : { phos_max_val > phos_target_max => (phos_max_val - phos_target_max) * phos_graph_y_scale },{ => 0 };\n            \n            line_target_lower_y : { phos_min_val < phos_target_min => (phos_target_min - phos_min_val) * phos_graph_y_scale },{ => phos_graph_canvas_y };\n            [[rb_id]] : { rrt in (1,2,4) and phos_n>3 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "ipa_icu",
    "text": "/* Algorithm to assess Inpatient activity for ICU admissions */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Inpatient activity for ICU admissions\",\n                is_active:2\n                \n            }\n        );\n        \n        icu_vent_los => eadv.adm_icu_vent_los._.lastdv(); \n        \n        vent_ld => eadv.[caresys_1387900,caresys_1388200,caresys_1388201,caresys_1388202].dt.last();\n        \n        vent_fd => eadv.[caresys_1387900,caresys_1388200,caresys_1388201,caresys_1388202].dt.last();\n        \n        icu_los => eadv.adm_icu._.lastdv(); \n        \n        icu_vent_max_los => eadv.adm_icu_vent_los._.maxldv(); \n        \n        icu_max_los => eadv.adm_icu._.maxldv(); \n        \n        cvvhf_ld => eadv.[caresys_1310004,caresys_1310002].dt.last();\n        \n        cvvhf_fd => eadv.[caresys_1310004,caresys_1310002].dt.first();\n        \n        dt_diff : { icu_los_val<icu_max_los_val=>1},{=>0};\n        \n        icu_ld : {.=> greatest_date(cvvhf_ld,vent_ld)};\n        \n        icu_fd : {.=> least_date(cvvhf_fd,vent_fd)};\n        \n        [[rb_id]] : { coalesce(icu_vent_los_dt,icu_los_dt,cvvhf_ld,vent_ld)!? => 1 },{=>0};    \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Inpatient activity for ICU admissions\",\n                type:2,\n                is_reportable:0\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ipa_sep",
    "text": "/* Algorithm to assess Inpatient activity*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Inpatient activity with exclusions\",\n                is_active:2\n                \n            }\n        );\n        \n        \n        \n        icd_ld => eadv.[icd_%].dt.last().where(att not in(`icd_z49_1`));\n        \n        icd_n => eadv.[icd_%].dt.distinct_count().where(att not in(`icd_z49_1`));\n        \n        icd_fd => eadv.[icd_%].dt.first().where(att not in(`icd_z49_1`));\n        \n        [[rb_id]] : { icd_ld!? => 1 },{=>0};    \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Inpatient activity\",\n                type:2,\n                is_reportable:0\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_vhd",
    "text": "/* Algorithm to assess cardiac disease  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess cardiac disease\",\n                is_active:2\n                \n            }\n        );\n        \n                \n            #doc(,\n                {\n                    section:\"VHD\"\n                }\n            );\n            #doc(,\n                {\n                    txt:\"rheumatic heart disease based on coding\"\n                }\n            );  \n            \n            \n            \n            rhd_dt => eadv.[icd_i05%,icd_i06%,icd_i07%,icd_i08%,icd_i09%,icpc_k71%].dt.min();\n            \n            rhd_aet : {rhd_dt!? => 1},{=>0};\n            \n            #doc(,\n                {\n                    txt:\"mitral  including rheumatic and non-rheumatic\"\n                }\n            ); \n            \n            \n            \n            mv_s_dt => eadv.[icd_i05_0,icd_i05_2,icd_34_2,icpc_k73006, icpc_k83007,icpc_k71005].dt.min();\n            \n            mv_i_dt => eadv.[icd_i05_1,icd_i05_2,icd_34_0,icpc_k83004].dt.min();\n            \n            mv_r_dt => eadv.[icpc_k54009].dt.min();\n            \n            mv_s : {mv_s_dt!? => 1},{=>0};\n            \n            mv_i : {mv_i_dt!? => 1},{=>0};\n            \n            mv_r : {mv_r_dt!? => 1},{=>0};\n            \n            mv : { greatest(mv_s,mv_i,mv_r)>0 => 1},{=>0};\n            \n            #doc(,\n                {\n                    txt:\"Aortic  including rheumatic and non-rheumatic\"\n                }\n            ); \n            \n                        \n            av_s_dt => eadv.[icd_i06_0,icd_35_0, icpc_k83006,icpc_k71008].dt.min();\n            \n            av_i_dt => eadv.[icd_i06_1,icd_35_1,icpc_k83004].dt.min();\n            \n            av_r_dt => eadv.[icpc_k54005].dt.min();\n            \n            av_s : { av_s_dt!? => 1},{=>0};\n            \n            av_i : { av_i_dt!? => 1},{=>0};\n            \n            av_r : { av_r_dt!? => 1},{=>0};\n            \n            av : {greatest(av_s,av_i,av_r)>0 => 1},{=>0};\n            \n            #doc(,\n                {\n                    txt:\"Tricuspid  including rheumatic and non-rheumatic\"\n                }\n            ); \n            \n            tv_s_dt => eadv.[icd_i07_0,icd_36_0].dt.min();\n            \n            tv_i_dt => eadv.[icd_i07_1,icd_36_1,icpc_k83012].dt.min();\n            \n            tv_r_dt => eadv.[icpc_k54019].dt.min();\n            \n            tv_s : { tv_s_dt!? => 1},{=>0};\n            \n            tv_i : { tv_i_dt!? => 1},{=>0};\n            \n            tv_r : { tv_r_dt!? => 1},{=>0};\n            \n            tv : { greatest(tv_s,tv_i,tv_r)>0 => 1},{=>0};\n            \n           \n             #doc(,\n                {\n                    txt:\" infective endocarditis\"\n                }\n            ); \n            \n           \n            \n            \n            vhd_ie_icd_dt => eadv.[icd_i33%,icd_i38%,icd_i39%].dt.min();\n            \n            #doc(,\n                {\n                    txt:\" cardiac outpatient encounters\"\n                }\n            ); \n            \n            car_enc_l_dt => eadv.enc_op_car.dt.last();\n            \n            #doc(,\n                {\n                    txt:\" anticoagulation\"\n                }\n            ); \n            \n            rxn_anticoag_dt => rout_cd_cardiac_rx.rxn_anticoag.val.bind();\n        \n            rxn_anticoag : { rxn_anticoag_dt!? => 1},{=>0};\n\n            vhd : { greatest(mv,av,tv)>0 =>1},{=>0};\n            \n            echo_ld => rout_cd_cardiac_ix.echo_ld.val.bind();\n            \n            \n            \n            [[rb_id]] : {.=>vhd};\n            \n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"Valvular heart disease\",\n                    desc:\"Presence of Valvular heart disease\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            mv_s,\n                {\n                    label:\"Mitral valve stenosis\",\n                    desc:\"Presence of Mitral valve stenosis\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            mv_i,\n                {\n                    label:\"Mitral valve insufficiency\",\n                    desc:\"Presence of Mitral valve insufficiency or regurgitation\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            mv_r,\n                {\n                    label:\"Mitral valve replacement\",\n                    desc:\"Presence of Mitral valve replacement\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            av_s,\n                {\n                    label:\"Aortic valve stenosis\",\n                    desc:\"Presence of Aortic valve stenosis\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            av_i,\n                {\n                    label:\"Aortic valve insufficiency\",\n                    desc:\"Presence of Aortic valve insufficiency or regurgitation\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            av_r,\n                {\n                    label:\"Aortic valve replacement\",\n                    desc:\"Presence of Aortic valve replacement\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            rhd_aet,\n                {\n                    label:\"Rheumatic heart disease\",\n                    desc:\"Presence of Rheumatic heart disease\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_af",
    "text": "/*  AF  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a assess chadvas score in AF\",\n                is_active:2\n                \n            }\n        );\n        \n        dob => eadv.dmg_dob.dt.max();\n        \n        gender => eadv.dmg_gender.val.last();\n        \n        \n        #doc(,\n                {\n                    txt:\"atrial fibrillation based on coding\"\n                }\n        );  \n            \n        af_icd => eadv.[icd_i48_%].dt.min();\n            \n        af_icpc => eadv.[icpc_k78%].dt.min();\n            \n        af_dt : {.=>least_date(af_icd,af_icpc)};\n            \n        af : {coalesce(af_icd,af_icpc)!? =>1},{=>0};\n        \n        vhd => rout_cd_cardiac_vhd.cd_cardiac_vhd.val.bind();\n        \n        cad =>rout_cd_cardiac_cad.cad.val.bind();\n        \n        chf =>rout_cd_cardiac_chf.chf.val.bind();\n        \n        pvd =>rout_cd_cardiac_cad.pvd.val.bind();\n        \n        cva =>rout_cd_cardiac_cad.cva.val.bind();\n        \n        htn =>rout_cd_htn.cd_htn.val.bind();\n        \n        dm =>rout_cd_dm_dx.dm.val.bind();\n        \n        age : {.=>round((sysdate-dob)/365.25,0)};\n        \n        rxn_anticoag_dt => rout_cd_cardiac_rx.rxn_anticoag.val.bind();\n        \n        rxn_anticoag : { rxn_anticoag_dt!? => 1},{=>0};\n        \n        #doc(,\n                {\n                    txt: \"CHADVASC score\"\n                }\n            ); \n            \n        \n            \n        age_score : {age <65 => 0},{age>75 > 2},{=>1};\n            \n        gender_score : {.=>gender};\n            \n        chf_hx_score :{ chf>0 => 1},{=>0};\n        \n        htn_score : { htn>0 => 1},{=>0};\n        \n        cva_score : {cva>0 =>2},{=>0};\n        \n        cvd_score : {cad>0 or pvd>0 =>1},{=>0};\n        \n        dm_score : { dm>0 => 1},{=>0};\n        \n        nv_af : { af=1 and vhd=0 =>1},{=>0};\n        \n        cha2ds2vasc : { nv_af=1 => age_score + gender_score + chf_hx_score + cva_score +cvd_score + dm_score},{=>0};\n        \n        echo_ld => rout_cd_cardiac_ix.echo_ld.val.bind();\n        \n           \n        \n        \n        [[rb_id]] : {af=1 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of AF\",\n                desc:\"Presence of AF\",\n                is_reportable:1,\n                type:2\n                \n            }\n        );\n        \n        #define_attribute(nv_af,\n            { \n                label: \"Presence of Non-Valvular AF\",\n                desc:\"Presence of Non-Valvular AF\",\n                is_reportable:1,\n                type:2\n                \n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_rhd",
    "text": "/* Algorithm to assess rheumatic heart disease  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess rheumatic heart disease\",\n                is_active:2\n                \n            }\n        );\n        \n            #doc(,\n                {\n                    txt:\"rheumatic heart disease based on coding\"\n                }\n            );  \n            \n            rhd_dt => eadv.[icd_i05%,icd_i06%,icd_i07%,icd_i08%,icd_i09%,icpc_k71%].dt.min();\n            \n            rhd_aet : {rhd_dt!? => 1},{=>0};\n            \n            echo_ld => rout_cd_cardiac_ix.echo_ld.val.bind();\n           \n            [[rb_id]] : {. => rhd_aet};\n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"rheumatic heart disease\",\n                    desc:\"Presence of rheumatic heart disease\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "dmg_vm",
    "text": "/* Algorithm to assess demographic view model */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess demographic view model\",\n                is_active:2\n                \n            }\n        );\n                \n        \n                \n        loc_def => rout_dmg_loc.loc_def.val.bind();\n        \n        loc_mode_n => rout_dmg_loc.loc_mode_n.val.bind();\n        \n        loc_n => rout_dmg_loc.loc_n.val.bind();\n        \n        mode_pct => rout_dmg_loc.mode_pct.val.bind();\n        \n        hrn => rout_dmg_hrn.hrn_last.val.bind();\n        \n\n        pcis_n => rout_dmg_source.pcis_n.val.bind();\n        \n        pcis_ld => rout_dmg_source.pcis_ld.val.bind();\n        \n        eacs_n => rout_dmg_source.eacs_n.val.bind();\n        \n        eacs_ld => rout_dmg_source.eacs_ld.val.bind();\n        \n        laynhapuy_n => rout_dmg_source.laynhapuy_n.val.bind();\n        \n        laynhapuy_ld => rout_dmg_source.laynhapuy_ld.val.bind();\n        \n        miwatj_n => rout_dmg_source.miwatj_n.val.bind();\n        \n        miwatj_ld => rout_dmg_source.miwatj_ld.val.bind();\n        \n        anyinginyi_n => rout_dmg_source.anyinginyi_n.val.bind();\n        \n        anyinginyi_ld => rout_dmg_source.anyinginyi_ld.val.bind();\n        \n        congress_n => rout_dmg_source.congress_n.val.bind();\n        \n        congress_ld => rout_dmg_source.congress_ld.val.bind();\n        \n        wurli_n => rout_dmg_source.wurli_n.val.bind();\n        \n        wurli_ld => rout_dmg_source.wurli_ld.val.bind();\n        \n        kwhb_n => rout_dmg_source.kwhb_n.val.bind();\n        \n        kwhb_ld => rout_dmg_source.kwhb_ld.val.bind();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        tkc_provider => rout_dmg_source.tkc_provider.val.bind();\n        \n        ipa_sep_ld => rout_ipa_sep.icd_ld.val.bind();\n        \n        ipa_sep_fd => rout_ipa_sep.icd_fd.val.bind();\n        \n        ipa_sep_n => rout_ipa_sep.icd_n.val.bind();\n        \n        opa_sep_ld => rout_opa_sep.op_ld.val.bind();\n        \n        opa_sep_fd => rout_opa_sep.op_fd.val.bind();\n        \n        opa_sep_n => rout_opa_sep.op_n.val.bind();\n        \n        icu_fd => rout_ipa_icu.icu_fd.val.bind();\n        \n        icu_ld => rout_ipa_icu.icu_ld.val.bind();\n        \n        preg_ld => rout_pregnancy.preg_ld.val.bind();\n        \n        preg_1y_f => rout_pregnancy.preg_1y_f.val.bind();\n        \n        [[rb_id]] : { .=> dmg_source};    \n        \n       #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Demographic phc source\",\n                type:2,\n                is_reportable:1\n            }\n        );\n        \n        \n        #define_attribute(\n            phc_pcis,\n            {\n                label:\"Demographic phc source Pcis\",\n                type:2,\n                is_reportable:1\n            }\n        );\n        \n        #define_attribute(\n            phc_miwatj,\n            {\n                label:\"Demographic phc source Miwatj\",\n                type:2,\n                is_reportable:1\n            }\n        );\n        \n        #define_attribute(\n            phc_congress,\n            {\n                label:\"Demographic phc source Congress\",\n                type:2,\n                is_reportable:1\n            }\n        );\n        \n        #define_attribute(\n            phc_congress_mutitjulu,\n            {\n                label:\"Demographic phc source Congress Mutitjulu\",\n                type:2,\n                is_reportable:1\n            }\n        );\n        \n        #define_attribute(\n            phc_wurli,\n            {\n                label:\"Demographic phc source Wurli\",\n                type:2,\n                is_reportable:1\n            }\n        );\n        \n\n        #define_attribute(\n            loc_def,\n            {\n                label:\"Default locality\",\n                type:1002,\n                is_reportable:1\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ldl_graph",
    "text": "/* Algorithm to plot LDL graph  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to plot LDL graph\",\n                    is_active:2\n                    \n                    \n                }\n            );\n            \n            dyslip => rout_cd_dyslip.cd_dyslip.val.bind();\n            \n            g_max => eadv.lab_bld_cholesterol_ldl._.maxldv();\n            \n            g_min => eadv.lab_bld_cholesterol_ldl._.minldv();\n                        \n            g_n => eadv.lab_bld_cholesterol_ldl.dt.count();\n            \n            g_graph => eadv.lab_bld_cholesterol_ldl.val.serializedv2(round(val,1)~dt);\n            \n            \n            g_graph_canvas_x : { . => 350};\n            \n            g_graph_canvas_y : { . => 100};\n            \n            \n            g_target_max : { . => 4.0};\n            g_target_min : { . => 1.0};\n            \n            \n                       \n                \n            \n            \n            g_graph_y_max : {. => greatest(g_max_val,g_target_max)};\n            \n            g_graph_y_min : {. => least(g_min_val,g_target_min)};\n            \n            g_graph_x_scale : {. => round(g_graph_canvas_x/730,5)};\n            \n            g_graph_y_scale : { . => round(g_graph_canvas_y/(g_graph_y_max-g_graph_y_min),5)};\n            \n                        \n            line_upper_y : {.=> 0};\n            \n            line_lower_y : {. => 100};\n            \n            \n            line_target_upper_y : { g_max_val > g_target_max => (g_max_val - g_target_max) * g_graph_y_scale },{ => 0 };\n            \n            line_target_lower_y : { g_min_val < g_target_min => (g_target_min - g_min_val) * g_graph_y_scale },{ => g_graph_canvas_y };\n            \n            canddt : { dyslip>0 and g_n>2 =>1},{=>0};\n            \n            [[rb_id]] : { canddt=1 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "cd_cardiac_cad",
    "text": "/* Algorithm to assess cardiac disease  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess cardiac disease\",\n                is_active:2\n                \n            }\n        );\n        \n            \n        \n            #doc(,\n                {\n                    section:\"CAD\"\n                }\n            );\n            #doc(,\n                {\n                    txt:\"first date of coronary insufficiency based on coding (ICD and ICPC)\"\n                }\n            );    \n            \n            \n            \n            cabg => eadv.[icd_z95_1,icpc_k54007].dt.min();\n            \n            \n            \n            #doc(,\n                {\n                    txt:\"first date of type 2 AMI (not implemented as codes non-existent)\"\n                }\n            );   \n            \n            /* mi_type2_icd => eadv.icd_i21_a1.dt.min(); */\n            \n            #doc(,\n                {\n                    txt:\"first and last dates of AMI inclusive of NSTEMI and STEMI and subsequent\"\n                }\n            );  \n            \n            nstemi_fd_icd => eadv.[icd_i21_4,icd_i22_2].dt.min();\n            \n            nstemi_fd_icpc => eadv.icpc_k75016.dt.min();        \n            \n            nstemi_fd : {. => least_date(nstemi_fd_icd,nstemi_fd_icpc)};\n            \n            stemi_fd_icd => eadv.[icd_i21_0,icd_i21_1,icd_i21_2,icd_i21_3,icd_i22_0,icd_i22_1,icd_i22_8,icd_i22_9].dt.min();\n            \n            stemi_fd_icpc => eadv.icpc_k75015.dt.min();\n            \n            stemi_fd : {. => least_date(stemi_fd_icd,stemi_fd_icpc)};\n        \n            nstemi_ld => eadv.[icpc_k75016,icd_i21_4,icd_i22_2].dt.max().where(dt > nstemi_fd);\n            \n            stemi_ld => eadv.[icpc_k75015,icd_i21_0,icd_i21_1,icd_i21_2,icd_i21_3,icd_i22_0,icd_i22_1,icd_i22_8,icd_i22_9].dt.max().where(dt > stemi_fd);\n            \n            ami_icd_null : {coalesce(stemi_fd_icd,nstemi_fd_icd)? => 1};\n            \n            #doc(,\n                {\n                    txt:\"STEMI vascular region\"\n                }\n            );  \n            stemi_anat_0 => eadv.[icd_i21_0,icd_i21_1,icd_i21_2,icd_i21_3].att.first();\n            \n            stemi_anat : { stemi_anat_0!? => to_number(substr(stemi_anat_0,-1))+1};\n            \n            #doc(,\n                {\n                    txt:\"AMI complication\"\n                }\n            );\n            \n            ami_i23 => eadv.[icd_i23].dt.max();\n            \n            ami : { coalesce(stemi_fd,nstemi_fd,stemi_ld,nstemi_ld,ami_i23)!? => 1},{=>0};\n            \n            #doc(,\n                {\n                    txt:\"Coronary ischaemia other than AMI\"\n                }\n            );\n            \n            cad_chronic_icd => eadv.[icd_i24%,icd_i25%].dt.min();\n            \n            cad_ihd_icpc => eadv.[icpc_k74%,icpc_k76%].dt.min();        \n                \n            cad_ex_ami :{ coalesce(cad_chronic_icd,cad_ihd_icpc)!? =>1},{=>0};   \n            \n            cad_fd : { . => least_date(cad_ihd_icpc,cad_chronic_icd)};\n            \n            cad_prev : { cad_fd!? => 1 },{=>0};\n        \n            cad_incd : { cad_fd > sysdate - 365 => 1},{=>0};\n            \n            cad : { greatest(ami,cad_ex_ami)>0 or cabg!? =>1 },{=>0};\n            \n            \n            \n            #doc(,\n                {\n                    section:\"other CVD\"\n                }\n            );\n            \n            #doc(,\n                {\n                    txt:\"Other atherosclerotic disease\"\n                }\n            );   \n            \n            \n            cva_dt => eadv.[icd_g46%,icpc_k89%,icpc_k90%,icpc_k91%].dt.min();\n            \n            pvd_dt => eadv.[icd_i70%,icd_i71%,icd_i72%,icd_i73%,icpc_k92%].dt.min();\n           \n            cva : { cva_dt!? =>1},{=>0};\n           \n            pvd : { pvd_dt!? =>1},{=>0};\n            \n            \n            \n            #doc(,\n                {\n                    txt:\"Medication\"\n                }\n            ); \n            \n            #doc(,\n                {\n                    txt: \"antiplatelet agents\"\n                }\n            ); \n            \n            \n            rxn_ap => eadv.[rxnc_b01ac].dt.min().where(val=1);\n            \n            \n            #doc(,\n                {\n                    txt: \"anti-coagulation including NOAC\"\n                }\n            ); \n            \n            \n            rxn_anticoag => eadv.[rxnc_b01aa,rxnc_b01af,rxnc_b01ae,rxnc_b01ab].dt.min().where(val=1);\n            \n            #doc(,\n                {\n                    txt: \"beta blockers\"\n                }\n            ); \n            \n        \n            rxn_bb_ag => eadv.rxnc_c07ag.dt.min().where(val=1);\n            \n            rxn_bb_aa => eadv.rxnc_c07aa.dt.min().where(val=1);\n            \n            rxn_bb_ab => eadv.rxnc_c07ab.dt.min().where(val=1);\n            \n            rxn_bb : {. => least_date(rxn_bb_ag,rxn_bb_aa,rxn_bb_ab)};\n            \n            #doc(,\n                {\n                    txt: \"RAAS blockers\"\n                }\n            ); \n            \n            rxn_ace_aa => eadv.rxnc_c09aa.dt.min().where(val=1);\n            \n            rxn_arb_aa => eadv.rxnc_c09ca.dt.min().where(val=1);\n            \n            rxn_raas : {. => least_date(rxn_ace_aa, rxn_arb_aa)};\n            \n            #doc(,\n                {\n                    txt: \"lipid lowering\"\n                }\n            ); \n            \n            rxn_statin => eadv.[rxnc_c10aa,rxnc_c10bx,rxnc_c10ba].dt.min().where(val=1);\n            \n            rxn_c10_ax => eadv.rxnc_c10_ax.dt.min().where(val=1);\n           \n            rxn : {coalesce(rxn_ap,rxn_anticoag,rxn_bb,rxn_raas,rxn_statin,rxn_c10_ax)!? =>1};\n            \n            #doc(,\n                {\n                    txt: \"Investigations\"\n                }\n            ); \n            \n            echo_ld => rout_cd_cardiac_ix.echo_ld.val.bind();\n            \n            cardang_ld => rout_cd_cardiac_ix.cardang_ld.val.bind();\n            \n            [[rb_id]] : {cad=1 =>1},{=>0};\n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"Coronary artery disease\",\n                    desc:\"Presence of Coronary artery disease\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cd_obesity",
    "text": "/* Ruleblock to assess obesity  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess obesity\",\n                is_active:2\n\n            }\n        );\n        \n        #doc(,{\n                    txt: \"Height in cm\"\n        });\n            \n        ht => eadv.obs_height.val.lastdv();\n        \n        ht_err : { ht_val<50 or ht_val>300 =>1},{=>0};\n        \n        #doc(,{\n                    txt: \"Weight in kg\"\n        });\n        \n        wt => eadv.obs_weight.val.lastdv();\n        \n        wt_err : { wt_val<10 or wt_val>300 =>1},{=>0};\n\n        bmi_err : {ht_err=1 or wt_err=1 =>1},{=>0};\n        \n        bmi : { ht_err=0 and wt_err=0 => round(wt_val/power(ht_val/100,2),1) };\n    \n        \n        obs_icd => eadv.[icd_e66%].dt.count(0);\n        \n        obs_icpc => eadv.[icpc_t82%].dt.count(0);\n        \n        #doc(,{\n                    txt: \"Obesity classification\",\n                    cite: \"cd_obesity_ref2\"\n        });\n        \n        bmi_class : { bmi_err=0 and bmi between 30 and 34.9 => 1},\n                    { bmi_err=0 and bmi between 35 and 39.9 => 2},\n                    { bmi_err=0 and bmi >= 40 =>3},\n                    {=>0};\n        \n        \n        #doc(,\n                {\n                    txt: \"Obesity diagnosis where BMI >30\",\n                    cite: \"cd_obesity_ref1\"\n                }\n            );\n        \n        [[rb_id]] : { bmi>30 => 1 },{=>0};\n        \n        obs_dx_uncoded : {bmi>30 and greatest(obs_icd,obs_icpc)=0 =>1},{=>0};\n        \n        #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"Obesity\",\n                    desc:\"Integer [0-1] if Obesity based on code and observation criteria\",\n                    is_reportable:1,\n                    type:2\n                }\n        );",
    "is_active": true
  },
  {
    "name": "cd_nutr_low",
    "text": "/* Ruleblock to assess loss of weight */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess loss of weight\",\n                is_active:2\n                \n            }\n        );\n        \n            \n        ht => eadv.obs_height.val.lastdv();\n        \n        wt => eadv.obs_weight.val.lastdv().where(dt>sysdate-365);\n        \n        wt0 => eadv.obs_weight.val.lastdv().where(dt < wt_dt-180 and dt > sysdate-730 );\n        \n        bmi0 : { nvl(ht_val,0)>0 and nvl(wt0_val,0)>0 => round(wt0_val/power(ht_val/100,2),1) };\n        \n        wt_qt : { nvl(wt0_val,0)>0 => round((wt0_val - wt_val)/wt0_val,2)},{=>0};\n        \n        \n        \n        #doc(,\n                {\n                    txt: \"Loss of weight as a pct atleast 6 m apart\"\n                }\n            );\n        \n        \n        [[rb_id]] : { bmi0<20 and wt_qt>0.1 => 1 },{=>0};\n        \n        \n        #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"Loss of weight\",\n                    is_reportable:1,\n                    type:2\n                }\n        );",
    "is_active": true
  },
  {
    "name": "rrt_hd_loc",
    "text": "/* Rule block to count RRT presentations */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to count RRT HD presentations\",\n                is_active:2,\n                \n            }\n        );\n\n        loc_ca_gap_1m_n => eadv.[caresys_1310000].dt.distinct_count()\n                                .where(loc=111711800010132 and dt >= sysdate-30);\n        loc_ca_fd_1m_n => eadv.[caresys_1310000].dt.distinct_count()\n                                .where(loc=111711800010122 and dt >= sysdate-30);\n        loc_ca_tch_1m_n => eadv.[caresys_1310000].dt.distinct_count()\n                                .where(loc=111711800010122 and dt >= sysdate-30);\n        loc_ca_all_1m_n => eadv.[caresys_1310000,caresys_1310004,icpc_u59001,icpc_u59008,icd_z49_1,mbs_13105].dt.distinct_count()\n                                .where(substr(loc,1,5)=`11171` and dt >= sysdate-30);\n                                \n        loc_ca_other_1m_n : {coalesce(loc_ca_all_1m_n,0) > coalesce(loc_ca_gap_1m_n,loc_ca_fd_1m_n, loc_ca_fd_1m_n, loc_ca_tch_1m_n, loc_ca_all_1m_n,0) => loc_ca_all_1m_n };\n        \n        loc_te_nru_1m_n => eadv.[caresys_1310000].dt.distinct_count()\n                                .where(loc=111721600013032 and dt >= sysdate-30);\n        loc_te_7ad_1m_n => eadv.[caresys_1310000].dt.distinct_count()\n                                .where(loc in(111721600015062,111721600006002) and dt >= sysdate-30);\n        loc_te_kdh_1m_n => eadv.[caresys_1310000].dt.distinct_count()\n                                .where(loc IN (111721500016042, 111721500008032) and dt >= sysdate-30);\n        loc_te_pdu_1m_n => eadv.[caresys_1310000].dt.distinct_count()\n                                .where(loc=111721600014022 and dt >= sysdate-30);\n        loc_te_tiwi_1m_n => eadv.[caresys_1310000].dt.distinct_count()\n                                .where(loc=111721600017012 and dt >= sysdate-30);\n        loc_te_all_1m_n => eadv.[caresys_1310000,caresys_1310004,icpc_u59001,icpc_u59008,icd_z49_1,mbs_13105].dt.distinct_count()\n                                .where(substr(loc,1,5)=`11172` and dt >= sysdate-30);\n        loc_te_other_1m_n : {coalesce(loc_te_all_1m_n,0) > coalesce(loc_te_nru_1m_n,loc_te_7ad_1m_n, loc_te_kdh_1m_n, loc_te_pdu_1m_n, loc_te_tiwi_1m_n,0) => loc_te_all_1m_n };\n\n        loc_prplhouse_1m_n => eadv.[mbs_13105].dt.distinct_count()\n                                .where(substr(loc,1,5)=`11571`and dt >= sysdate-30); \n        loc_miwatj_1m_n => eadv.[mbs_13105].dt.distinct_count()\n                                .where(substr(loc,1,5)=`13472`and dt >= sysdate-30); \n                                            \n        loc_all_1m_n => eadv.[caresys_1310000,caresys_1310004,icpc_u59001,icpc_u59008,icd_z49_1,mbs_13105].dt.distinct_count()\n                                .where(dt >= sysdate-30);\n        \n        loc_mode_1m => eadv.[caresys_1310000,caresys_1310004,icpc_u59001,icpc_u59008,icd_z49_1,mbs_13105].loc.stats_mode()\n                                .where(dt >= sysdate-90);\n                                \n        loc_mode_1m_txt : {loc_mode_1m = 111711800010132  => `CA-GAP`}, \n                    {loc_mode_1m = 111721600013032   => `TEHS-NRU`},\n                    {loc_mode_1m = 111711800010122   => `CA-FD`},\n                    {loc_mode_1m  = 111711800010122  => `CA-TCH`},\n                    {loc_mode_1m in(111721600015062,111721600006002) => `TEHS-7AD`},\n                    {loc_mode_1m in (111721500016042, 111721500008032) => `TEHS-KDH`},\n                    {loc_mode_1m = 111721600014022 => `TEHS-PDU`},\n                    {loc_mode_1m = 111721600017012  => `TEHS-TIW`},\n                    {substr(loc_mode_1m,1,5)=`11171` =>`CA-OTHER`},\n                    {substr(loc_mode_1m,1,5)=`11172`=>`TEHS-OTHER`},\n                    {substr(loc_mode_1m,1,5)=`11571`=>`PURPLE_HOUSE`},\n                    {substr(loc_mode_1m,1,5)=`13472`=>`MIWATJ`},\n                    {loc_all_1m_n > 0=>`UNDETERMINED`}\n                    ;\n\n        [[rb_id]] => eadv.[caresys_1310000,caresys_1310004, icpc_u59001,icpc_u59008,icd_z49_1,mbs_13105].loc.last();\n\n        #define_attribute([[rb_id]],\n            {\n                label:\"Latest HD Loc\",\n                desc:\"Location of latest haemodialysis\",\n                is_reportable:1,\n                type:3\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_haem",
    "text": "/*  This is a algorithm to identify haematological disease  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify haematological disease\",\n                is_active:2\n            }\n        );\n        \n        hb1 => eadv.lab_bld_hb._.lastdv().where(dt>sysdate-365);\n        \n        hb2 => eadv.lab_bld_hb._.lastdv(2).where(dt>sysdate-365);\n        \n        \n        mcv => eadv.lab_bld_rbc_mcv._.lastdv().where(dt>sysdate-365);\n        \n        wcc => eadv.lab_bld_wcc_neutrophils._.lastdv().where(dt>sysdate-365);\n        \n        plt => eadv.lab_bld_platelets._.lastdv().where(dt>sysdate-365);\n        \n        fer => eadv.lab_bld_ferritin._.lastdv().where(dt>sysdate-365);\n        \n        hb_low : { hb1_val <100 => 1},{=>0};\n        \n        wcc_low : { wcc_val <1.5 => 1},{=>0};\n        \n        plt_low : { plt_val <100 => 1},{=>0};\n        \n        \n        \n        \n        low_cat : { (hb_low + wcc_low + plt_low=3) => 3},\n                    { (hb_low + wcc_low + plt_low=2) =>2},\n                    { (hb_low + wcc_low + plt_low=1) =>1},\n                    { =>0};\n        \n        [[rb_id]] : { low_cat>0 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of haematological disease\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "kfre",
    "text": "/*  Ruleblock to calculate KFRE */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to calculate KFRE\",\n               \n                is_active:2\n                \n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt:\"External bindings\"\n            }\n            \n        );\n        \n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        #doc(,\n            {\n                txt:\"Gather variables\"\n            }\n            \n        );\n       \n        \n        \n        \n        dob => rout_dmg.dob.val.bind();\n        \n        male => rout_dmg.gender.val.bind();\n        \n        \n        \n        egfr => eadv.lab_bld_egfr_c._.lastdv().where(dt > sysdate-365);\n        \n        uacr => eadv.lab_ua_acr._.lastdv().where(dt > sysdate-365);\n        \n\n        \n        #doc(,\n            {\n                txt:\"Determine if 4 variable equation is applicable - apply for CKD G3a, 3b, 4\"\n            }\n            \n        );\n        \n        \n        \n        kfre4v_ap : { coalesce(egfr_val,0)>0 and coalesce(uacr_val,0)>1 and male!? and ckd>=3 and ckd<5 => 1},{=>0};\n        \n        \n        \n        \n        age : { . => round(((egfr_dt-dob)/365.25),0)};\n        \n        #doc(,{\n                txt:\"Apply KFRE 4 variable equation. Note: KFRE is not validated in Indigenous populations.\",\n                cite: \"kfre_ref1, kfre_ref2\"\n        });\n        \n        \n        kfre4v_exp : { kfre4v_ap =1 => exp((-0.5567*(egfr_val/5-7.222))+(0.2467*(male - 0.5642))+(0.451*(ln(uacr_val * 8.84)-5.137))-(0.2201*(age/10-7.036)))},{=>0};\n        \n        kfre4v_2yr : { kfre4v_ap =1 => round(1-power(0.9832,kfre4v_exp) ,2)};\n        \n        kfre4v_5yr : { kfre4v_ap =1 => round(1-power(0.9365,kfre4v_exp) ,2)};\n        \n        [[rb_id]] : { . => kfre4v_ap};",
    "is_active": true
  },
  {
    "name": "pcd",
    "text": "/*  Ruleblock for PCD Traffic light report */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess PCD Traffic light report\",\n                \n                is_active:0\n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"External bindings\"\n            }\n            \n        );\n        \n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        dm => rout_cd_dm_dx.dm.val.bind();\n        \n        cvra_calc => rout_cvra.cvra.val.bind();\n        \n        \n        #doc(,\n            {\n                txt:\"Gather variables \"\n            }\n            \n        );\n        \n        \n        dob => eadv.dmg_dob.dt.max();\n        \n        male => eadv.dmg_gender.val.max();\n        \n        pcd_dt => eadv.mbs_721.dt.max();\n        \n        cvra => eadv.asm_cvra.val.lastdv();\n        \n        tc => eadv.lab_bld_cholesterol_tot.va.lastdv();\n        \n        sbp130 => eadv.obs_bp_systolic.val.last();\n        \n        rx_raas => eadv.[rxnc_c09%].val.last().where(val=1);\n        \n        rx_bb => eadv.[rxnc_c07%].val.last().where(val=1);\n        \n        rx_ccb => eadv.[rxnc_c08%].val.last().where(val=1);\n        \n        rx_htn2 => eadv.[rxnc_c02%].val.last().where(val=1);\n        \n        rx_statin => eadv.[rxnc_c10aa].val.last().where(val=1);\n        \n        hba => eadv.lab_bld_hba1c.val.lastdv();\n        \n        acr => eadv.lab_ua_acr.val.lastdv();\n        \n        smoke0 => eadv.status_smoking_h2_v1.val.lastdv();\n        \n        gpmp_dt => eadv.mbs_721.dt.max();\n        \n        ahc_dt => eadv.mbs_715.dt.max();\n        \n        \n        \n        pcd12m : { pcd_dt < sysdate-365 => 1 },{=>0};\n        \n        cvra12m : { cvra_dt < sysdate-365 =>1},{=>0};\n        \n        age : { dob< sysdate => (sysdate-dob)/365.25};\n        \n        [[rb_id]] : { pcd_dt is not null =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "cd_cardiac_rx",
    "text": "/* Algorithm to assess cardiac medication  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess cardiac medication\",\n                is_active:2\n                \n            }\n        );\n        \n           \n           #doc(,\n            {\n                txt: \"Medication\",\n                cite: \"cvd_tg_2019,cvd_heart_foundation_2012\"\n            }\n            ); \n            \n            \n            #doc(,\n                {\n                    txt: \"antiplatelet agents\"\n                }\n            ); \n            \n            \n            rxn_ap => eadv.[rxnc_b01ac].dt.min().where(val=1);\n            \n            \n            #doc(,\n                {\n                    txt: \"anti-coagulation including NOAC\"\n                }\n            ); \n            \n            \n            rxn_anticoag => eadv.[rxnc_b01aa,rxnc_b01af,rxnc_b01ae,rxnc_b01ab].dt.min().where(val=1);\n            \n            #doc(,\n                {\n                    txt: \"anti-arrhythmic\"\n                }\n            ); \n            \n        \n            \n            rxn_chrono => eadv.[rxnc_c01%].dt.min().where(val=1);\n            \n            #doc(,\n                {\n                    txt: \"diuretics\"\n                }\n            ); \n            \n            rxn_diu_loop => eadv.[rxnc_c03c%].dt.min().where(val=1);\n            \n            rxn_diu_low_ceil => eadv.[rxnc_c03b%,rxnc_c03a%].dt.min().where(val=1);\n            \n            rxn_diu_k_sp => eadv.[rxnc_c03d%].dt.min().where(val=1);\n            \n            #doc(,\n                {\n                    txt: \"lipid lowering\"\n                }\n            ); \n            \n            rxn_statin => eadv.[rxnc_c10aa,rxnc_c10bx,rxnc_c10ba].dt.min().where(val=1);\n            \n            rxn : {coalesce(rxn_statin,rxn_diu_k_sp,rxn_diu_low_ceil,rxn_diu_loop,rxn_chrono,rxn_anticoag,rxn_ap)!? =>1},{=>0};\n\n            \n            [[rb_id]] : {rxn=1 =>1},{=>0};\n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"Rx cardiac meds\",\n                    desc:\"Presence of cardiac\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_enc",
    "text": "/* Algorithm to assess cardiac encounters  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess cardiac encounters\",\n                is_active:2\n                \n            }\n        );\n        \n           car_enc_f_dt => eadv.enc_op_car.dt.first();\n           \n           car_enc_l_dt => eadv.enc_op_car.dt.last();\n           \n           [[rb_id]] : {car_enc_l_dt!? => 1},{=>0};\n           \n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"cardiac outpatient encounter\",\n                    desc:\"Presence of cardiac outpatient encounter\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cvra",
    "text": "/* Ruleblock to apply Framingham equations*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to apply Framingham equations\",            \n                is_active:2\n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Will  update ruleblock when validated CV risk assessment equation is available for Indigenous patients\",\n                cite:\"cvra_hlc_2019,cvra_circ_2018\"\n            }\n            \n        );\n        \n        #doc(,\n            {\n                txt:\"External bindings\"\n            }\n            \n        );\n        \n        \n        ckd => rout_ckd.ckd.val.bind();\n        esrd_risk => rout_ckd.esrd_risk.val.bind();\n        dm => rout_cd_dm_dx.dm.val.bind();\n        cp_hicvr => rout_cd_careplan.cp_hicvr.val.bind();\n        \n        \n        \n        #doc(,\n            {\n                txt:\"Gather variables including existing assessment demographics and diseases by coding\"\n            }\n            \n        );\n        \n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        asm_cvra => eadv.asm_cvra.val.lastdv();\n        \n        dob => eadv.dmg_dob.dt.max();\n        \n        \n        male => eadv.dmg_gender.val.max();\n        \n        cabg => eadv.[icd_z95_1%,icpc_k54007].dt.count(0);\n            \n        cad => eadv.[icd_i20%,icd_i21%,icd_i22%,icd_i23%,icd_i24%,icd_i25%,icpc_k74%,icpc_k75%,icpc_k76%].dt.count(0);\n            \n        cva => eadv.[icd_g46%,icpc_k89%,icpc_k90%,icpc_k91%].dt.count(0);\n        \n        cvd_prev : { (cabg + cad + cva)>0 =>1},{=>0};\n        \n        hdl => eadv.lab_bld_cholesterol_hdl.val.last();\n        \n        tc => eadv.lab_bld_cholesterol_total.val.last();\n        \n        sbp => eadv.obs_bp_systolic.val.last();\n        \n        smoke0 => eadv.status_smoking_h2_v1.val.last();\n\n        \n        \n        age : { dob < sysdate => round(((sysdate-dob)/365.25),0)};\n        \n        smoke : {smoke0>=29 =>1},{0};\n        \n        lvh : { . => 0};\n        \n        \n        #doc(,\n            {\n                txt:\"Determine if overide criteria are met\",\n                cite:\"cvra_nsf_2019\"\n            }\n            \n        );\n        \n        \n        dmckd1 : {dm=1 and ckd>=1 => 1},{=>0};\n        dm60 : {dm=1 and age>=60 => 1},{=>0};\n        ckd3 : {ckd>=3 => 1},{=>0};\n        tc7 : {tc>=7 => 1},{=>0};\n        sbp180 : {sbp >=180 => 1},{=>0};\n        age74 : {age>74 => 1},{=>0};\n        \n      \n        risk_high_ovr : { greatest(dm60,dmckd1,ckd3,tc7,sbp180,age74,cvd_prev)>0 =>1},{=>0};\n        \n        #doc(,\n            {\n                txt:\"Otherwise calculate the 5 year risk for non-fatal MI, and CVE\",\n                cite:\"cvra_ahj_1991\"\n            }\n            \n        );\n\n        ln_zero_ex1 : { nvl(least(age,tc,hdl,sbp),0)=0 => 1},{=>0};\n        \n        risk_5_chd : {risk_high_ovr=0 and ln_zero_ex1=0 => \n            round(100*(1-EXP(-EXP((LN(5)-(15.5305+(28.4441*(1-male))+(-1.4792*LN(age))+(0*LN(age)*LN(age))+\n            (-14.4588*LN(age)*(1-male))+(1.8515*LN(age)*LN(age)*(1-male))+(-0.9119*LN(sbp))+(-0.2767*smoke)+(-0.7181*LN(tc/hdl))+\n            (-0.1759*1)+(-0.1999*1*(1-male))+(-0.5865*0)+(0*0*male)))/(EXP(0.9145)*EXP(-0.2784*(15.5305+(28.4441*(1-male))+\n            (-1.4792*LN(age))+(0*LN(age)*LN(age))+(-14.4588*LN(age)*(1-male))+(1.8515*LN(age)*LN(age)*(1-male))+(-0.9119*LN(sbp))+\n            (-0.2767*smoke)+(-0.7181*LN(tc/hdl))+(-0.1759*1)+(-0.1999*1*(1-male))+(-0.5865*0)+(0*0*male))))))),2)\n        };\n        \n        risk_5_mi : { risk_high_ovr=0 and ln_zero_ex1=0 => round(100*(1-EXP(-EXP((LN(5)-(11.4712+(10.5109*(1-male))+(-0.7965*LN(age))+(0*LN(age)*LN(age))+\n            (-5.4216*LN(age)*(1-male))+(0.7101*LN(age)*LN(age)*(1-male))+(-0.6623*LN(sbp))+(-0.2675*smoke)+(-0.4277*LN(tc/hdl))+\n            (-0.1534*dm)+(-0.1165*dm*(1-male))+(0*lvh)+(-0.1588*lvh*male)))/(EXP(3.4064)*EXP(-0.8584*(11.4712+(10.5109*(1-male))+\n            (-0.7965*LN(age))+(0*LN(age)*LN(age))+(-5.4216*LN(age)*(1-male))+(0.7101*LN(age)*LN(age)*(1-male))+(-0.6623*LN(sbp))+\n            (-0.2675*smoke)+(-0.4277*LN(tc/hdl))+(-0.1534*dm)+(-0.1165*dm*(1-male))+(0*lvh)+(-0.1588*lvh*male))))))),2)\n        };\n        \n        risk_5 : { risk_high_ovr=0 => nvl(risk_5_chd,0) + nvl(risk_5_mi,0)};\n        \n        \n        cvra_cat :  {risk_high_ovr=1 => 3},\n                    { risk_5 >=15 => 3},\n                    { risk_5 >=10 and risk_5 <15 => 2},\n                    { risk_5 <10 => 1},{=>0};\n                    \n        cvra_dx_uncoded : {cvra_cat=3 and nvl(asm_cvra_val,0)=0=>1},{=>0};\n        \n        [[rb_id]] :  { cvra_cat>2 => 1},{=>0};\n            \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"High CVRA\",\n                type:2,\n                is_reportable:1\n            }\n        );",
    "is_active": true
  },
  {
    "name": "rx_desc_ptr",
    "text": "/* Algorithm to assess Medication  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to serialize active medications\",\n                    \n                    is_active:2\n                    \n                }\n            );\n            \n            \n            \n            \n            rx_name_obj => eadv.rx_desc_ptr.val.serialize2();\n            \n            rx_n => eadv.rx_desc_ptr.val.count();\n            \n            [[rb_id]] : {coalesce(rx_n,0)>0 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "cd_cardiac_chf",
    "text": "/*  CHF  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a assess CHF\",\n                is_active:2\n                \n            }\n        );\n        \n        #doc(,\n                {\n                    section:\"CHF\"\n                }\n            );\n            \n        chf_code => eadv.[icd_i50_%,icpc_k77%].dt.min();\n        \n        dcm => eadv.[icd_i42_0].dt.min();\n        \n        hocm => eadv.[icd_i42_1,icd_i42_2].dt.min();\n        \n        rcm => eadv.[icd_i42_5].dt.min();\n        \n        ethocm => eadv.[icd_i42_6].dt.min();\n        \n        noscm => eadv.[icd_i42_8,icd_42_9,icpc_k84041].dt.min();\n        \n        echo_ld => rout_cd_cardiac_ix.echo_ld.val.bind();\n            \n        chf : {coalesce(chf_code,dcm,hocm,rcm,ethocm,noscm)!? =>1},{=>0};\n        \n        [[rb_id]] : {chf=1 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"presence of CHF\",\n                type : 2,\n                is_reportable:1\n            }\n        );\n        \n        #define_attribute(dcm,{ \n                label: \"presence of dilated cardiomyopathy\",\n                type :2,\n                is_reportable:1\n        });\n        \n        #define_attribute(hocm,{ \n                label: \"presence of hypertrophic cardiomyopathy\",\n                type : 2,\n                is_reportable:1\n        });\n        \n        #define_attribute(rcm,{ \n                label: \"presence of restrictive cardiomyopathy\",\n                type : 2,\n                is_reportable:1\n        });",
    "is_active": true
  },
  {
    "name": "cd_cns",
    "text": "/*  This is a algorithm to identify cns  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify cns\",\n                is_active:2\n\n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Mood disorders\"\n            }\n        );\n        \n        code_md_dt => eadv.[icd_f3%,icpc_p76%].dt.min();\n        \n        rx_n06_dt => eadv.[rxnc_n06%].dt.max().where(val=1);\n        \n        md : {code_md_dt!? and rx_n06_dt!? =>1},{=>0};\n        \n        #doc(,\n            {\n                txt:\"Dementia\"\n            }\n        );\n        \n        code_dem_dt => eadv.[icd_f01%,icd_f02%,icd_f03%,icpc_p70004,icpc_p70003,icpc_p70011,icpc_p70009,icpc_p15004].dt.min();\n                \n        dem : {code_dem_dt!? =>1},{=>0};\n\n        #doc(,\n            {\n                txt:\"Schizophrenia\"\n            }\n        );\n        \n        code_schiz_dt => eadv.[icd_f40%,icpc_p72%].dt.min();        \n        \n        rx_n05a_dt => eadv.[rxnc_n05a%].dt.max().where(val=1);\n        \n        schiz : {code_schiz_dt!? and rx_n05a_dt!? => 2},{rx_n05a_dt!? => 1},{=>0};\n         \n        #doc(,\n            {\n                txt:\"Epilepsy\"\n            }\n        );\n        code_epil_dt => eadv.[icd_g40%,icpc_n88%].dt.min();\n        \n        /* \n        pregabalin captured as antiepileptic although correct , inapp\n        rx_n03_dt => eadv.[rxnc_n03%].dt.max().where(val=1);\n        */\n        \n        epil : {code_epil_dt!? => 1},{=>0};\n        \n        #doc(,\n            {\n                txt:\"Parkinsons\"\n            }\n        );\n        \n        code_pd_dt => eadv.[icpc_n87%].dt.min();\n        \n        rx_n04_dt => eadv.[rxnc_n04%].dt.max().where(val=1);\n        \n        \n        pd : {code_pd_dt!? and rx_n04_dt!? => 1},{=>0};\n        \n        [[rb_id]] : { greatest(md,epil,pd,schiz)>0 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of CNS disorder\"\n            }\n        );\n        \n        #define_attribute(dem,\n            { \n                label: \"Presence of Dementia\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(epil,\n            { \n                label: \"Presence of Epilepsy\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(pd,\n            { \n                label: \"Presence of Parkinsons disease\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "dmg",
    "text": "/* Algorithm to assess demographics */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess demographics\",\n                \n                is_active:2\n                \n            }\n        );\n        \n        dob => eadv.dmg_dob.dt.max();\n        \n        dod => eadv.dmg_dod.dt.max();\n        \n        gender => eadv.dmg_gender.val.last();\n        \n        age : { dob!? => round((sysdate-dob)/365.25,0)};\n        \n        alive : {dod? => 1},{=>0};\n        \n        /* Constants */\n        st_rman_ver : {.=> 1000};\n        \n        st_rman_init : {. => 1010};\n        \n        st_rman_rb : {. => 2010};\n        \n        st_rman_rb_err : {. => 2014};\n        [[rb_id]] : { 1=1 => 1},{=>0};  \n        \n        #define_attribute(\n            dob,\n            {\n                label:\"Date of birth [last recorded]\",\n                type:12,\n                is_reportable:1\n            }\n        );\n        \n        #define_attribute(\n            dod,\n            {\n                label:\"Date of death [last recorded]\",\n                type:12,\n                is_reportable:1\n            }\n        );\n        \n        #define_attribute(\n            gender,\n            {\n                label:\"Gender [male=1 female=0]\",\n                type:12,\n                is_reportable:1\n            }\n        );\n        \n        #define_attribute(\n            alive,\n            {\n                label:\"Alive with absent DOD\",\n                type:02,\n                is_reportable:1\n            }\n        );",
    "is_active": true
  },
  {
    "name": "dmg_residency",
    "text": "/* Algorithm to assess residential status */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess residential status\",\n                is_active:2\n                \n            }\n        );\n         \n        mbs731 => eadv.mbs_731.dt.max().where(dt > sysdate -730);\n        \n        nhr : { mbs731!? => 1},{=>0};\n        \n        [[rb_id]] : { nhr=1 => 1 },{=>0};    \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Nursing home resident\",\n                type:2,\n                is_reportable:1\n            }\n        );",
    "is_active": true
  },
  {
    "name": "dmg_eid_alt",
    "text": "/* Algorithm to assess alternative eid */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess alternative eid\",\n                is_active:2\n                \n            }\n        );\n         \n        alt_eid_last => eadv.dmg_eid_alt.val.last();\n        \n        alt_eid_last_1 => eadv.dmg_eid_alt.val.last(1);\n\n        [[rb_id]] : { alt_eid_last!? => 1 },{=>0};    \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Potential duplicate client\",\n                type:2,\n                is_reportable:1\n            }\n        );",
    "is_active": true
  },
  {
    "name": "dmg_hrn",
    "text": "/* Algorithm to assess HRN */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess HRN\",\n                is_active:2\n                \n            }\n        );\n         \n        hrn_last => eadv.dmg_hrn.val.last();\n\n        [[rb_id]] : { hrn_last!? => 1 },{=>0};    \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Last HRN\",\n                type:2,\n                is_reportable:0\n            }\n        );",
    "is_active": true
  },
  {
    "name": "dmg_tkcuser_interact",
    "text": "/* Algorithm to assess TKC user interaction */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess TKC user interaction\",\n                is_active:2                \n            }\n        );\n         \n        corr_ld => eadv.tkc_corresp.dt.max();\n        \n        tag_sys_pr => eadv.[sys_record_partial]._.lastdv();\n        \n        [[rb_id]] : { coalesce(corr_ld,tag_sys_pr_dt)!? => 1 },{=>0};    \n        \n        #define_attribute(\n            tag_sys_pr_dt,\n            {\n                label:\"Sys flag raised\",\n                type:2,\n                is_reportable:0\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ckd_prog_vm",
    "text": "/* Assemble CKD progress view model */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Assemble CKD progress view model\",\n                is_active:2\n                \n            }\n        );\n                \n        age => rout_dmg.age.val.bind();\n        \n        gender => rout_dmg.gender.val.bind();\n        \n        tkc_provider => rout_dmg_source.tkc_provider.val.bind();\n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        ckd_stage => rout_ckd.ckd_stage.val.bind();\n        \n        ckd_stage_val => rout_ckd.ckd_stage_val.val.bind();\n        \n        enc_ld => rout_engmnt_renal.enc_ld.val.bind();\n        \n        \n                \n        ipa_sep_ld => rout_ipa_sep.icd_ld.val.bind();\n        \n        opa_sep_ld => rout_opa_sep.op_ld.val.bind();\n        \n        creat1_val => rout_ckd_labs.creat1_val.val.bind();\n        \n        egfr1_val => rout_ckd_labs.egfr1_val.val.bind();\n        \n        egfr1_dt => rout_ckd_labs.egfr1_dt.val.bind();\n        \n        uacr1_val => rout_ckd_labs.uacr1_val.val.bind();\n        \n        uacr1_dt => rout_ckd_labs.uacr1_dt.val.bind();\n        \n        htn_rxn_acei => rout_cd_htn.htn_rxn_acei.val.bind();\n        \n        htn_rxn_arb => rout_cd_htn.htn_rxn_arb.val.bind();\n        \n        sbp_target_max => rout_cd_htn_bp_control.sbp_target_max.val.bind();\n        \n        dbp_target_max => rout_cd_htn_bp_control.dbp_target_max.val.bind();\n        \n        sbp_mu_1 => rout_cd_htn_bp_control.sbp_mu_1.val.bind(); \n        \n        sbp_max => rout_cd_htn_bp_control.sbp_max.val.bind(); \n        \n        dbp_mu_1 => rout_cd_htn_bp_control.dbp_mu_1.val.bind(); \n        \n        dm => rout_cd_dm_dx.cd_dm_dx.val.bind();\n        \n        hba1c_lv => rout_cd_dm_glyc_cntrl.hba1c_n0_val.val.bind();\n        \n        hba1c_ld => rout_cd_dm_glyc_cntrl.hba1c_n0_dt.val.bind();\n        \n        hba1c_stmt => rout_cd_dm_glyc_cntrl.hba1c_stmt.val.bind();\n        \n        review_int  : {rrt>0 =>3},{ ckd_stage_val>4 => 3},{ckd_stage_val>2 =>6},{=>12};\n        \n        \n        \n        [[rb_id]] : { ckd>0 => 1};",
    "is_active": true
  },
  {
    "name": "ortho_fractures",
    "text": "/*  Identify fractures phenotypes */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Identify fracture phenotypes\",\n                is_active:2\n                \n            }\n        );\n        \n        pelvic_frac_ld => eadv.[icd_s32_1].dt.last();\n        \n        pelvic_frac : {pelvic_frac_ld!? => 1},{=>0};\n        \n        [[rb_id]] : { coalesce(pelvic_frac,0)>0 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of fracture\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "dmg_loc",
    "text": "/* Algorithm to assess demographics */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess demographics\",\n                is_active:2\n                \n            }\n        );\n        \n        /*\n        Key index\n        01   source         (3 digits)\n             1 digit : parity\n             2 digits: Source table code\n        02   state          (1 digits 7 default)\n        03   region         (1 digit)\n        04   district       (2 digits)\n        06   locality       (5 digits)\n        11   sub-locality   (2 digits)\n        13   level of care  (1 digit P=1,T=2)\n        \n        */\n        \n        #doc(,{\n                    txt:\"most primary care frequent location in 2 years and full timeline using mbs code\"\n        });  \n        \n        mode_24_ => eadv.[mbs_%].loc.stats_mode().where(dt > sysdate - 730 and substr(loc,-1)=1);\n        \n        \n        \n        mode_full_ => eadv.[mbs_%].loc.stats_mode().where(substr(loc,-1)=1);\n        \n        #doc(,{\n                    txt:\"location code after stripping parity and source for 2y and full timeline\"\n        });  \n        \n        \n        loc_mode_24 : {.=> to_number(substr(mode_24_,4))};\n        \n        loc_mode : {.=> to_number(substr(mode_full_,4))};\n        \n        #doc(,{\n                    txt:\"location active considered if non null\"\n        });  \n        \n        loc_active : {loc_mode_24!? => 1},{=>0};\n        \n        #doc(,{\n                    txt:\"default location using either 2 y or full\"\n        });  \n        \n        loc_mode_def : {loc_mode_24!? => loc_mode_24},{loc_mode!? => loc_mode};\n        \n        #doc(,{\n                    txt:\"last and penultimate primary care location and date based on MBS\"\n        });  \n        \n        last_val => eadv.[mbs_%].loc.last().where(substr(loc,-1)=1);\n        \n        last_dt => eadv.[mbs_%].dt.last().where(substr(loc,-1)=1);\n        \n        last_t_val => eadv.[mbs_%].loc.last().where(substr(loc,-1)<>1);\n        \n        loc_last_val : {.=> to_number(substr(last_val,4))};       \n        \n        loc_last_t_val : {.=> to_number(substr(last_t_val,4))};  \n        \n        last_1_val => eadv.[mbs_%].loc.last(1).where(substr(loc,-1)=1);\n        \n        last_1_dt => eadv.[mbs_%].dt.last(1).where(substr(loc,-1)=1);\n        \n        loc_last_1_val : {.=> to_number(substr(last_1_val,4))};       \n        \n        loc_n => eadv.[mbs_%].loc.count().where(substr(loc,-1)=1);\n        \n        loc_mode_n => eadv.[mbs_%].loc.count().where(substr(loc,4)=loc_mode_def);\n        \n        loc_last_n => eadv.[mbs_%].loc.count().where(substr(loc,4)=loc_last_val);\n\n        loc_def : {loc_last_val=loc_last_1_val and last_dt-last_1_dt>90 => loc_last_val},{=> loc_mode_def};\n\n        loc_def_alt : {loc_def? =>loc_last_t_val};      \n        \n        loc_null : {coalesce(loc_def,loc_def_alt)?=>1},{=>0};\n        \n        loc_def_fd => eadv.[mbs_%].dt.min().where(substr(loc,4)=loc_last_val);\n        \n        loc_region : {loc_def!? => to_number(substr(loc_def,2,1))};\n        \n        loc_district : {loc_def!? => to_number(substr(loc_def,6,2))};\n        \n        loc_locality : {loc_def!? => to_number(substr(loc_def,8,5))};\n        \n        \n        diff_last_mode : {loc_mode_def<>loc_last_val =>1},{=>0};\n        \n        \n        mode_pct : {loc_n>0 => round(loc_mode_n/loc_n,2)*100};\n        \n       \n        episode_single : { loc_n=1 => 1},{=>0};\n        \n        loc_single : { mode_pct=1 =>1},{=>0}; \n        \n        [[rb_id]] : { coalesce(loc_def,0)>0 =>loc_def },{ coalesce(loc_def_alt,0)>0 => loc_def_alt},{=>0};",
    "is_active": true
  },
  {
    "name": "ca_careplan",
    "text": "/*  Algorithm to identify cancer careplan  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify cancer careplan\",\n                is_active:2\n                \n            }\n        );\n        \n        \n        op_enc_ld => eadv.[enc_op_onc%].dt.max();\n        \n        \n        [[rb_id]] : { op_enc_ld!? => 1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Attendance at oncology clinic\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_mets",
    "text": "/*  This is a algorithm to identify metastatic carcinoma  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify metastatic carcinoma\",\n                is_active:2\n                \n            }\n        );\n        \n        bone_met_fd => eadv.icd_c79_5.dt.first();\n        \n        cns_met_fd => eadv.icd_c79_3.dt.first();\n        \n        adr_met_fd => eadv.icd_c79_7.dt.first();\n        \n        liver_met_fd => eadv.icd_78_7.dt.first();\n        \n        lung_met_fd => eadv.icd_78_0.dt.first();\n        \n        perit_met_fd => eadv.icd_78_6.dt.first();\n        \n        nodal_met_fd => eadv.[icd_77%].dt.first();\n        \n        nos_met_fd => eadv.[icd_c79_%,icd_c78_%,icpc_a79009].dt.first();\n        \n        any_met_fd => eadv.[icd_c77_%,icd_c78_%,icd_c79_%,icpc_a79009].dt.first();\n        \n        \n        [[rb_id]] : { any_met_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of metastatic carcinoma\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_solid",
    "text": "/*  Algorithm to identify solid organ carcinoma  */\n        \n        #define_ruleblock(ca_solid,\n            {\n                description: \"Algorithm to identify solid organ carcinoma\",\n                is_active:2\n                \n            }\n        );\n        \n        ca_mets => rout_ca_mets.ca_mets.val.bind();\n        \n        \n        ca_breast_fd => rout_ca_breast.code_fd.val.bind();\n        \n        ca_prostate_fd => rout_ca_prostate.code_fd.val.bind();\n        \n        ca_rcc_fd => rout_ca_rcc.code_fd.val.bind();\n        \n        ca_crc_fd => rout_ca_crc.code_fd.val.bind();\n        \n        ca_lung_fd => rout_ca_lung.code_fd.val.bind();\n        \n        ca_thyroid_fd => rout_ca_thyroid.code_fd.val.bind();\n        \n        ca_endometrial_fd => rout_ca_endometrial.code_fd.val.bind();\n        \n        ca_ovarian_fd => rout_ca_ovarian.code_fd.val.bind();\n        \n        any_ca : { coalesce(ca_breast_fd,ca_prostate_fd,ca_rcc_fd,ca_crc_fd,ca_lung_fd,ca_thyroid_fd, ca_ovarian_fd, ca_endometrial_fd)!? => 1},{=>0};\n        \n        op_enc_ld => rout_ca_careplan.op_enc_ld.val.bind();\n        \n        ca_solid : { any_ca=1 or ca_mets=1 => 1},{=>0};\n        \n        #define_attribute(ca_solid,\n            { \n                label: \"Presence of solid organ carcinoma\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_breast",
    "text": "/*  This is a algorithm to identify breast carcinoma  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify breast carcinoma\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_c50%].dt.first();\n                \n        icpc_fd => eadv.[icpc_x76001,icpc_x76002].dt.first();\n        \n        code_fd : { . => least_date(icd_fd,icpc_fd)};\n        \n        #doc(,\n                {\n                    txt:\"Aromatase inhibitor or anti-oestrogen therapy\"\n                }\n        );  \n        \n        rxnc_l02bg => eadv.rxnc_l02bg.dt.min().where(val=1);\n        \n        rxnc_l02ba => eadv.rxnc_l02ba.dt.min().where(val=1);\n                \n        [[rb_id]] : { code_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of breast carcinoma\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_prostate",
    "text": "/*  This is a algorithm to identify prostate carcinoma  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify prostate carcinoma\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.icd_c61.dt.first();\n                \n        icpc_fd => eadv.[icpc_y7700%].dt.first();\n        \n        code_fd : { . => least_date(icd_fd,icpc_fd)};\n        \n                \n        [[rb_id]] : { code_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of prostate carcinoma\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_rcc",
    "text": "/*  This is a algorithm to identify renal cell carcinoma  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify renal cell carcinoma\",\n                is_active:2\n                \n            }\n        );\n        \n        \n        icd_fd => eadv.icd_c64.dt.first();\n                \n        icpc_fd => eadv.[icpc_u75003].dt.first();\n        \n        code_fd : { . => least_date(icd_fd,icpc_fd)};\n                \n        [[rb_id]] : { code_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of Renal cell carcinoma RCC\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_crc",
    "text": "/*  This is a algorithm to identify colorectal carcinoma  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify colorectal\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_c18%,icd_c19,icd_c20].dt.first();\n                \n        icpc_fd => eadv.[icpc_d75%].dt.first();\n        \n        code_fd : { . => least_date(icd_fd,icpc_fd)};\n      \n        [[rb_id]] : { code_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of colorectal carcinoma\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_lung",
    "text": "/*  This is a algorithm to identify lung carcinoma  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify lung carcinoma\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_c34%].dt.first();\n                \n        icpc_fd => eadv.[icpc_r84%].dt.first();\n        \n        code_fd : { . => least_date(icd_fd,icpc_fd)};\n      \n        [[rb_id]] : { code_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of lung carcinoma\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_thyroid",
    "text": "/*  This is a algorithm to identify thyroid carcinoma  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify thyroid carcinoma\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_c37%].dt.first();\n                \n        icpc_fd => eadv.[icpc_t71%].dt.first();\n        \n        code_fd : { . => least_date(icd_fd,icpc_fd)};\n      \n        [[rb_id]] : { code_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of thyroid carcinoma\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_endometrial",
    "text": "/*  This is a algorithm to identify endometrial carcinoma  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify endometrial carcinoma\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_c54_1].dt.first();                \n        \n        code_fd : { . => least_date(icd_fd)};\n      \n        [[rb_id]] : { code_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of endometrial carcinoma\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ca_ovarian",
    "text": "/*  Algorithm to identify ovarian carcinoma  */\n        \n        #define_ruleblock(ca_ovarian,\n            {\n                description: \"Algorithm to identify ovarian carcinoma\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_c56%].dt.first();  \n        \n        icpc_fd => eadv.[icpc_x77006].dt.first();\n        \n        code_fd : { . => least_date(icd_fd,icpc_fd)};\n      \n        ca_ovarian : { code_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of ovarian carcinoma\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "rrt_panel_vm",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n       rrt => rout_rrt.rrt.val.bind();\n       \n       loc_1s_txt => rout_rrt_hd_loc.loc_mode_1m_txt.val.bind();\n       \n       hd_recent_flag => rout_rrt.hd_recent_flag.val.bind();\n             \n       sodium1_val => rout_rrt_labs_euc.sodium1_val.val.bind();\n       \n       sodium1_dt => rout_rrt_labs_euc.sodium1_dt.val.bind();\n       \n       potassium1_val => rout_rrt_labs_euc.potassium1_val.val.bind();\n       \n       bicarb1_val => rout_rrt_labs_euc.bicarb1_val.val.bind();\n       \n       \n       calcium1_val => rout_ckd_shpt.calcium1_val.val.bind();\n       \n       calcium1_dt => rout_ckd_shpt.calcium1_dt.val.bind();\n       \n       magnesium1_val => rout_ckd_shpt.magnesium1_val.val.bind();\n    \n       phosphate1_val => rout_ckd_shpt.phos1_val.val.bind();\n    \n       pth1_val =>rout_ckd_shpt.pth1_val.val.bind();\n       \n       pth1_dt =>rout_ckd_shpt.pth1_val.dt.bind();\n       \n       hb1_val => rout_ckd_anaemia.hb_val.val.bind();\n       \n       hb1_dt => rout_ckd_anaemia.hb_dt.val.bind();\n       \n       plt1_val => rout_ckd_anaemia.plt1_val.val.bind();\n       \n       fer1_val => rout_ckd_anaemia.fer_val.val.bind();\n       \n       tsat1_val => rout_ckd_anaemia.tsat1_val.val.bind();\n       \n       \n       av_plasty_ld => rout_rrt_hd_acc_iv.av_plasty_ld.val.bind();\n       \n       hours => rout_rrt_hd_param.hours_val.val.bind();\n       \n       /*  mode => rout_rrt_hd_param.mode_val.val.bind();*/\n       \n       \n       urr => rout_rrt_hd_adequacy.urr.val.bind();\n       \n       spktv => rout_rrt_hd_adequacy.spktv.val.bind();\n       \n       hd_clinic_ld => rout_rrt_journey.hd_clinic_ld.val.bind();\n       \n       \n       \n       \n       [[rb_id]] : {rrt=1 => 1},{=>0};\n       \n       #define_attribute(loc_1s_txt,{\n                label:\"Dialysis panel satellite facility location\",\n                is_reportable:1,\n                type:3\n        });\n       #define_attribute(hd_recent_flag,{\n                label:\"Dialysis panel Hd recency flag\",\n                is_reportable:1,\n                type:2\n       });\n       \n       #define_attribute(sodium1_val,{\n                label:\"Dialysis panel Labs sodium\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(potassium1_val,{\n                label:\"Dialysis panel Labs potassium\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(bicarb1_val,{\n                label:\"Dialysis panel Labs bicarb\",\n                is_reportable:1,\n                type:2\n       });\n        \n       #define_attribute(calcium1_val,{\n                label:\"Dialysis panel Labs calcium\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(magnesium1_val,{\n                label:\"Dialysis panel Labs magnesium\",\n                is_reportable:1,\n                type:2\n        });\n       #define_attribute(phosphate1_val,{\n                label:\"Dialysis panel Labs phosphate\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(pth1_val,{\n                label:\"Dialysis panel Labs pth\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(cinacalcet_ld,{\n                label:\"Dialysis panel Meds cinacalcet\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(calcitriol_ld,{\n                label:\"Dialysis panel Meds calcitriol\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(phos_bind_ld,{\n                label:\"Dialysis panel Meds phos_bind_ld\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(hb1_val,{\n                label:\"Dialysis panel Labs Haemoglobin\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(plt1_val,{\n                label:\"Dialysis panel Labs platelets\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(fer1_val,{\n                label:\"Dialysis panel Labs ferritin\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(tsat1_val,{\n                label:\"Dialysis panel Labs tsat\",\n                is_reportable:1,\n                type:2\n       });\n       #define_attribute(av_plasty_ld,{\n                label:\"Dialysis panel AV plasty\",\n                is_reportable:1,\n                type:2\n        });\n       \n       #define_attribute(\n            mode_hdf,{\n                label:\"Dialysis panel parameters mode\",\n                is_reportable:1,\n                type:2\n       });\n        \n       #define_attribute(hours,{\n                label:\"Dialysis panel parameters hours\",\n                is_reportable:1,\n                type:2\n       });\n        #define_attribute(urr,{\n                label:\"Dialysis panel Labs URR\",\n                is_reportable:1,\n                type:2\n        });\n        #define_attribute(spktv,{\n                label:\"Dialysis panel Labs spKTV\",\n                is_reportable:1,\n                type:2\n        });\n        \n        #define_attribute(hd_clinic_ld,{\n                label:\"Dialysis panel last hd clinic\",\n                is_reportable:1,\n                type:2\n        });",
    "is_active": true
  },
  {
    "name": "rrt_hd_prog_vm",
    "text": "/* Assemble hd progress view model */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Assemble hd progress view model\",\n                is_active:2\n                \n            }\n        );\n                \n        age => rout_dmg.age.val.bind();\n        \n        gender => rout_dmg.gender.val.bind();\n        \n        tkc_provider => rout_dmg_source.tkc_provider.val.bind();\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        enc_ld => rout_engmnt_renal.enc_ld.val.bind();      \n                \n        ipa_sep_ld => rout_ipa_sep.icd_ld.val.bind();\n        \n        opa_sep_ld => rout_opa_sep.op_ld.val.bind();\n        \n        ibw_val  => rout_rrt_hd_param.ibw_val.val.bind();\n        \n        ibw_dt  => rout_rrt_hd_param.ibw_dt.val.bind();\n        \n        sbp_mu_1 => rout_cd_htn_bp_control.sbp_mu_1.val.bind(); \n        \n        dbp_mu_1 => rout_cd_htn_bp_control.dbp_mu_1.val.bind();\n        \n        sbp_max => rout_cd_htn_bp_control.sbp_max.val.bind(); \n        \n        spktv => rout_rrt_hd_adequacy.spktv.val.bind();\n        \n        hours => rout_rrt_hd_param.hours_val.val.bind(); \n        \n            \n        \n\n        \n        [[rb_id]] : { rrt in (1,3) => 1};",
    "is_active": true
  },
  {
    "name": "cd_cardiac_device",
    "text": "/*  cardiac investigations  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"assess cardiac device\",\n                is_active:2\n                \n            }\n        );\n        \n        #doc(,{\n                    section:\"pacemaker\"\n        });\n\n        \n        ppm_fd => eadv.[icpc_k54001,caresys_38253%].dt.first();\n        \n        defib_fd => eadv.[caresys_3839002, caresys_3839300].dt.first();\n        \n        \n        \n        [[rb_id]] : {coalesce(ppm_fd,defib_fd)!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"presence of cardiac device\",\n                type : 2,\n                is_reportable:1\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_cad",
    "text": "/* Algorithm to assess cardiac disease  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess cardiac disease\",\n                is_active:2\n                \n            }\n        );\n        \n            \n        \n            #doc(,\n                {\n                    section:\"CAD\"\n                }\n            );\n            #doc(,\n                {\n                    txt:\"first date of coronary insufficiency based on coding (ICD and ICPC)\"\n                }\n            );    \n            \n            \n            \n            cabg => eadv.[icd_z95_1,icpc_k54007].dt.min();\n            \n            /*cad_mi_icd => eadv.[icd_i21%,icd_i22%,icd_i23%].dt.min();*/\n            \n            #doc(,\n                {\n                    txt:\"first date of type 2 AMI (not implemented as codes non-existent)\"\n                }\n            );   \n            \n            /* mi_type2_icd => eadv.icd_i21_a1.dt.min(); */\n            \n            #doc(,\n                {\n                    txt:\"first and last dates of AMI inclusive of NSTEMI and STEMI and subsequent\"\n                }\n            );  \n            \n            nstemi_fd_icd => eadv.[icd_i21_4,icd_i22_2].dt.min();\n            \n            nstemi_fd_icpc => eadv.icpc_k75016.dt.min();        \n            \n            nstemi_fd : {. => least_date(nstemi_fd_icd,nstemi_fd_icpc)};\n            \n            stemi_fd_icd => eadv.[icd_i21_0,icd_i21_1,icd_i21_2,icd_i21_3,icd_i22_0,icd_i22_1,icd_i22_8,icd_i22_9].dt.min();\n            \n            stemi_fd_icpc => eadv.icpc_k75015.dt.min();\n            \n            stemi_fd : {. => least_date(stemi_fd_icd,stemi_fd_icpc)};\n        \n            nstemi_ld => eadv.[icpc_k75016,icd_i21_4,icd_i22_2].dt.max().where(dt > nstemi_fd);\n            \n            stemi_ld => eadv.[icpc_k75015,icd_i21_0,icd_i21_1,icd_i21_2,icd_i21_3,icd_i22_0,icd_i22_1,icd_i22_8,icd_i22_9].dt.max().where(dt > stemi_fd);\n            \n            ami_icd_null : {coalesce(stemi_fd_icd,nstemi_fd_icd)? => 1};\n            \n            #doc(,\n                {\n                    txt:\"STEMI vascular region\"\n                }\n            );  \n            stemi_anat_0 => eadv.[icd_i21_0,icd_i21_1,icd_i21_2,icd_i21_3].att.first();\n            \n            stemi_anat : { stemi_anat_0!? => to_number(substr(stemi_anat_0,-1))+1};\n            \n            #doc(,\n                {\n                    txt:\"AMI complication\"\n                }\n            );\n            \n            ami_i23 => eadv.[icd_i23].dt.max();\n            \n            ami : { coalesce(stemi_fd,nstemi_fd,stemi_ld,nstemi_ld,ami_i23)!? => 1},{=>0};\n            \n            #doc(,\n                {\n                    txt:\"Coronary ischaemia other than AMI\"\n                }\n            );\n            \n            cad_chronic_icd => eadv.[icd_i24%,icd_i25%].dt.min();\n            \n            cad_ihd_icpc => eadv.[icpc_k74%,icpc_k76%].dt.min();        \n                \n            cad_ex_ami :{ coalesce(cad_chronic_icd,cad_ihd_icpc)!? =>1},{=>0};    \n            \n            cad : { greatest(ami,cad_ex_ami)>0 or cabg!? =>1 },{=>0};\n            \n            \n            \n            #doc(,\n                {\n                    section:\"other CVD\"\n                }\n            );\n            \n            #doc(,\n                {\n                    txt:\"Other atherosclerotic disease\"\n                }\n            );   \n            \n            \n            cva_dt => eadv.[icd_g46%,icpc_k89%,icpc_k90%,icpc_k91%].dt.min();\n            \n            pvd_dt => eadv.[icd_i70%,icd_i71%,icd_i72%,icd_i73%,icpc_k92%].dt.min();\n           \n            cva : { cva_dt!? =>1},{=>0};\n           \n            pvd : { pvd_dt!? =>1},{=>0};\n            \n            #doc(,\n                {\n                    txt:\"Medication\"\n                }\n            ); \n            \n            #doc(,\n                {\n                    txt: \"antiplatelet agents\"\n                }\n            ); \n            \n            \n            rxn_ap => eadv.[rxnc_b01ac].dt.min().where(val=1);\n            \n            \n            #doc(,\n                {\n                    txt: \"anti-coagulation including NOAC\"\n                }\n            ); \n            \n            \n            rxn_anticoag => eadv.[rxnc_b01aa,rxnc_b01af,rxnc_b01ae,rxnc_b01ab].dt.min().where(val=1);\n            \n            #doc(,\n                {\n                    txt: \"beta blockers\"\n                }\n            ); \n            \n        \n            rxn_bb_ag => eadv.rxnc_c07ag.dt.min().where(val=1);\n            \n            rxn_bb_aa => eadv.rxnc_c07aa.dt.min().where(val=1);\n            \n            rxn_bb_ab => eadv.rxnc_c07ab.dt.min().where(val=1);\n            \n            rxn_bb : {. => least_date(rxn_bb_ag,rxn_bb_aa,rxn_bb_ab)};\n            \n            #doc(,\n                {\n                    txt: \"RAAS blockers\"\n                }\n            ); \n            \n            rxn_ace_aa => eadv.rxnc_c09aa.dt.min().where(val=1);\n            \n            rxn_arb_aa => eadv.rxnc_c09ca.dt.min().where(val=1);\n            \n            rxn_raas : {. => least_date(rxn_ace_aa, rxn_arb_aa)};\n            \n            #doc(,\n                {\n                    txt: \"lipid lowering\"\n                }\n            ); \n            \n            rxn_statin => eadv.[rxnc_c10aa,rxnc_c10bx,rxnc_c10ba].dt.min().where(val=1);\n            \n            rxn_c10_ax => eadv.rxnc_c10_ax.dt.min().where(val=1);\n           \n            rxn : {coalesce(rxn_ap,rxn_anticoag,rxn_bb,rxn_raas,rxn_statin,rxn_c10_ax)!? =>1};\n            \n            [[rb_id]] : {cad=1 =>1},{=>0};\n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"Coronary artery disease\",\n                    desc:\"Presence of Coronary artery disease\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_vhd",
    "text": "/* Algorithm to assess cardiac disease  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess cardiac disease\",\n                is_active:2\n                \n            }\n        );\n        \n                \n            #doc(,\n                {\n                    section:\"VHD\"\n                }\n            );\n            #doc(,\n                {\n                    txt:\"rheumatic heart disease based on coding\"\n                }\n            );  \n            \n            \n            \n            rhd_dt => eadv.[icd_i05%,icd_i06%,icd_i07%,icd_i08%,icd_i09%,icpc_k71%].dt.min();\n            \n            rhd_aet : {rhd_dt!? => 1},{=>0};\n            \n            #doc(,\n                {\n                    txt:\"mitral  including rheumatic and non-rheumatic\"\n                }\n            ); \n            \n            \n            \n            mv_s_dt => eadv.[icd_i05_0,icd_i05_2,icd_34_2,icpc_k73006, icpc_k83007,icpc_k71005].dt.min();\n            \n            mv_i_dt => eadv.[icd_i05_1,icd_i05_2,icd_34_0,icpc_k83004].dt.min();\n            \n            mv_r_dt => eadv.[icpc_k54009].dt.min();\n            \n            mv_s : {mv_s_dt!? => 1},{=>0};\n            \n            mv_i : {mv_i_dt!? => 1},{=>0};\n            \n            mv_r : {mv_r_dt!? => 1},{=>0};\n            \n            mv : { greatest(mv_s,mv_i,mv_r)>0 => 1},{=>0};\n            \n            #doc(,\n                {\n                    txt:\"Aortic  including rheumatic and non-rheumatic\"\n                }\n            ); \n            \n                        \n            av_s_dt => eadv.[icd_i06_0,icd_35_0, icpc_k83006,icpc_k71008].dt.min();\n            \n            av_i_dt => eadv.[icd_i06_1,icd_35_1,icpc_k83004].dt.min();\n            \n            av_r_dt => eadv.[icpc_k54005].dt.min();\n            \n            av_s : { av_s_dt!? => 1},{=>0};\n            \n            av_i : { av_i_dt!? => 1},{=>0};\n            \n            av_r : { av_r_dt!? => 1},{=>0};\n            \n            av : {greatest(av_s,av_i,av_r)>0 => 1},{=>0};\n            \n            #doc(,\n                {\n                    txt:\"Tricuspid  including rheumatic and non-rheumatic\"\n                }\n            ); \n            \n            tv_s_dt => eadv.[icd_i07_0,icd_36_0].dt.min();\n            \n            tv_i_dt => eadv.[icd_i07_1,icd_36_1,icpc_k83012].dt.min();\n            \n            tv_r_dt => eadv.[icpc_k54019].dt.min();\n            \n            tv_s : { tv_s_dt!? => 1},{=>0};\n            \n            tv_i : { tv_i_dt!? => 1},{=>0};\n            \n            tv_r : { tv_r_dt!? => 1},{=>0};\n            \n            tv : { greatest(tv_s,tv_i,tv_r)>0 => 1},{=>0};\n            \n           \n             #doc(,\n                {\n                    txt:\" infective endocarditis\"\n                }\n            ); \n            \n           \n            \n            \n            vhd_ie_icd_dt => eadv.[icd_i33%,icd_i38%,icd_i39%].dt.min();\n            \n            #doc(,\n                {\n                    txt:\" cardiac outpatient encounters\"\n                }\n            ); \n            \n            car_enc_l_dt => eadv.enc_op_car.dt.last();\n            \n            #doc(,\n                {\n                    txt:\" anticoagulation\"\n                }\n            ); \n            \n            rxn_anticoag_dt => rout_cd_cardiac_rx.rxn_anticoag.val.bind();\n        \n            rxn_anticoag : { rxn_anticoag_dt!? => 1},{=>0};\n\n            vhd : { greatest(mv,av,tv)>0 =>1},{=>0};\n            \n            \n            \n            [[rb_id]] : {.=>vhd};\n            \n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"Valvular heart disease\",\n                    desc:\"Presence of Valvular heart disease\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            mv_s,\n                {\n                    label:\"Mitral valve stenosis\",\n                    desc:\"Presence of Mitral valve stenosis\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            mv_i,\n                {\n                    label:\"Mitral valve insufficiency\",\n                    desc:\"Presence of Mitral valve insufficiency or regurgitation\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            mv_r,\n                {\n                    label:\"Mitral valve replacement\",\n                    desc:\"Presence of Mitral valve replacement\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            av_s,\n                {\n                    label:\"Aortic valve stenosis\",\n                    desc:\"Presence of Aortic valve stenosis\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            av_i,\n                {\n                    label:\"Aortic valve insufficiency\",\n                    desc:\"Presence of Aortic valve insufficiency or regurgitation\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            av_r,\n                {\n                    label:\"Aortic valve replacement\",\n                    desc:\"Presence of Aortic valve replacement\",\n                    is_reportable:1,\n                    type:2\n                }\n            );\n            \n            #define_attribute(\n            rhd_aet,\n                {\n                    label:\"Rheumatic heart disease\",\n                    desc:\"Presence of Rheumatic heart disease\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_af",
    "text": "/*  AF  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a assess chadvas score in AF\",\n                is_active:2\n                \n            }\n        );\n        \n        dob => eadv.dmg_dob.dt.max();\n        \n        gender => eadv.dmg_gender.val.last();\n        \n        \n        #doc(,\n                {\n                    txt:\"atrial fibrillation based on coding\"\n                }\n        );  \n            \n        af_icd => eadv.[icd_i48_%].dt.min();\n            \n        af_icpc => eadv.[icpc_k78%].dt.min();\n            \n        af_dt : {.=>least_date(af_icd,af_icpc)};\n            \n        af : {coalesce(af_icd,af_icpc)!? =>1},{=>0};\n        \n        vhd => rout_cd_cardiac_vhd.cd_cardiac_vhd.val.bind();\n        \n        cad =>rout_cd_cardiac_cad.cad.val.bind();\n        \n        chf =>rout_cd_cardiac_chf.chf.val.bind();\n        \n        pvd =>rout_cd_cardiac_cad.pvd.val.bind();\n        \n        cva =>rout_cd_cardiac_cad.cva.val.bind();\n        \n        htn =>rout_cd_htn.cd_htn.val.bind();\n        \n        dm =>rout_cd_dm_dx.dm.val.bind();\n        \n        age : {.=>round((sysdate-dob)/365.25,0)};\n        \n        rxn_anticoag_dt => rout_cd_cardiac_rx.rxn_anticoag.val.bind();\n        \n        rxn_anticoag : { rxn_anticoag_dt!? => 1},{=>0};\n        \n        #doc(,\n                {\n                    txt: \"CHADVASC score\"\n                }\n            ); \n            \n        \n            \n        age_score : {age <65 => 0},{age>75 > 2},{=>1};\n            \n        gender_score : {.=>gender};\n            \n        chf_hx_score :{ chf>0 => 1},{=>0};\n        \n        htn_score : { htn>0 => 1},{=>0};\n        \n        cva_score : {cva>0 =>2},{=>0};\n        \n        cvd_score : {cad>0 or pvd>0 =>1},{=>0};\n        \n        dm_score : { dm>0 => 1},{=>0};\n        \n        cha2ds2vasc : { af=1 and vhd=0 => age_score + gender_score + chf_hx_score + cva_score +cvd_score + dm_score},{=>0};\n        \n            \n        \n        \n        [[rb_id]] : {af=1 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of AF\",\n                desc:\"Presence of AF\",\n                is_reportable:1,\n                type:2\n                \n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_chf",
    "text": "/*  CHF  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a assess CHF\",\n                is_active:2\n                \n            }\n        );\n        \n        #doc(,\n                {\n                    section:\"CHF\"\n                }\n            );\n            \n        chf_code => eadv.[icd_i50_%],icpc_k77%].dt.min();\n            \n        chf : {chf_code!? =>1},{=>0};\n        \n        [[rb_id]] : {chf=1 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"presence of CHF\",\n                type : 1001\n                \n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_rx",
    "text": "/* Algorithm to assess cardiac medication  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess cardiac medication\",\n                is_active:2\n                \n            }\n        );\n        \n           \n           #doc(,\n            {\n                txt: \"Medication\",\n                cite: \"cvd_tg_2019,cvd_heart_foundation_2012\"\n            }\n            ); \n            \n            \n            #doc(,\n                {\n                    txt: \"antiplatelet agents\"\n                }\n            ); \n            \n            \n            rxn_ap => eadv.[rxnc_b01ac].dt.min().where(val=1);\n            \n            \n            #doc(,\n                {\n                    txt: \"anti-coagulation including NOAC\"\n                }\n            ); \n            \n            \n            rxn_anticoag => eadv.[rxnc_b01aa,rxnc_b01af,rxnc_b01ae,rxnc_b01ab].dt.min().where(val=1);\n            \n            #doc(,\n                {\n                    txt: \"anti-arrhythmic\"\n                }\n            ); \n            \n        \n            \n            rxn_chrono => eadv.[rxnc_c01%].dt.min().where(val=1);\n            \n            #doc(,\n                {\n                    txt: \"diuretics\"\n                }\n            ); \n            \n            rxn_diu_loop => eadv.[rxnc_c03c%].dt.min().where(val=1);\n            \n            rxn_diu_low_ceil => eadv.[rxnc_c03b%,rxnc_c03a%].dt.min().where(val=1);\n            \n            rxn_diu_k_sp => eadv.[rxnc_c03d%].dt.min().where(val=1);\n            \n            #doc(,\n                {\n                    txt: \"lipid lowering\"\n                }\n            ); \n            \n            rxn_statin => eadv.[rxnc_c10aa,rxnc_c10bx,rxnc_c10ba].dt.min().where(val=1);\n            \n            rxn : {coalesce(rxn_statin,rxn_diu_k_sp,rxn_diu_low_ceil,rxn_diu_loop,rxn_chrono,rxn_anticoag,rxn_ap)!? =>1},{=>0};\n\n            \n            [[rb_id]] : {rxn=1 =>1},{=>0};\n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"Rx cardiac meds\",\n                    desc:\"Presence of cardiac\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_enc",
    "text": "/* Algorithm to assess cardiac encounters  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess cardiac encounters\",\n                is_active:2\n                \n            }\n        );\n        \n           car_enc_f_dt => eadv.enc_op_car.dt.first();\n           \n           car_enc_l_dt => eadv.enc_op_car.dt.last();\n           \n           [[rb_id]] : {car_enc_l_dt!? => 1},{=>0};\n           \n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"cardiac outpatient encounter\",\n                    desc:\"Presence of cardiac outpatient encounter\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_rhd",
    "text": "/* Algorithm to assess rheumatic heart disease  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess rheumatic heart disease\",\n                is_active:2\n                \n            }\n        );\n        \n            #doc(,\n                {\n                    txt:\"rheumatic heart disease based on coding\"\n                }\n            );  \n            \n            rhd_dt => eadv.[icd_i05%,icd_i06%,icd_i07%,icd_i08%,icd_i09%,icpc_k71%].dt.min();\n            \n            rhd_aet : {rhd_dt!? => 1},{=>0};\n           \n            [[rb_id]] : {. => rhd_aet};\n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"rheumatic heart disease\",\n                    desc:\"Presence of rheumatic heart disease\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cd_cardiac_ix",
    "text": "/*  cardiac investigations  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"assess cardiac investigations\",\n                is_active:2\n                \n            }\n        );\n        \n        #doc(,{\n                    section:\"Echocardiogram\"\n        });\n\n        echo_ld => eadv.[ris_img_echo%].dt.last();\n        \n        echo_2_ld => eadv.[ris_img_echo%].dt.last(1);\n        \n        echo_n => eadv.[ris_img_echo%].dt.count();\n        \n        cardang_ld => eadv.[ris_img_cardan%].dt.last();\n        \n        cardang_2_ld => eadv.[ris_img_cardan%].dt.last(1);\n        \n        \n        \n        [[rb_id]] : {coalesce(echo_ld,cardang_ld)!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"presence of CHF\",\n                type : 2,\n                is_reportable:1\n            }\n        );",
    "is_active": true
  },
  {
    "name": "dmg_source",
    "text": "/* Algorithm to assess demographic source */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess demographic source\",\n                is_active:2\n                \n            }\n        );\n                \n        \n                \n        loc_def => rout_dmg_loc.loc_def.val.bind();\n        \n        loc_def_alt => rout_dmg_loc.loc_def_alt.val.bind();\n        \n        loc_null => rout_dmg_loc.loc_null.val.bind();\n        \n        loc_mode_n => rout_dmg_loc.loc_mode_n.val.bind();\n        \n        loc_n => rout_dmg_loc.loc_n.val.bind();\n        \n        mode_pct => rout_dmg_loc.mode_pct.val.bind();\n        \n        hrn => rout_dmg_hrn.hrn_last.val.bind();\n        \n        loc_region => rout_dmg_loc.loc_region.val.bind();\n        \n        tc_caresys_n => eadv.[icd_%].loc.count().where(substr(loc,2,2)=11);\n        \n        tc_caresys_ld => eadv.[icd_%].dt.max().where(substr(loc,2,2)=11);\n        \n        tc_labtrak_n => eadv.[lab_%].dt.count().where(substr(loc,2,2)=12);\n        \n        tc_labtrak_ld => eadv.[lab_%].dt.max().where(substr(loc,2,2)=12);\n        \n        pcis_n => eadv.[mbs_%].dt.count().where(dt>sysdate-1000 and substr(loc,2,2)=21);\n        \n        pcis_ld => eadv.[mbs_%].dt.max().where(dt>sysdate-1000 and substr(loc,2,2)=21);\n        \n        eacs_n => eadv.[mbs_%].dt.count(0).where(dt>sysdate-1000 and substr(loc,2,2)=22);\n        \n        eacs_ld => eadv.[mbs_%].dt.max().where(dt>sysdate-1000 and substr(loc,2,2)=22);\n        \n        laynhapuy_n => eadv.[mbs_%].dt.count(0).where(dt>sysdate-1000 and substr(loc,2,2)=33);\n        \n        laynhapuy_ld => eadv.[mbs_%].dt.max().where(dt>sysdate-1000 and substr(loc,2,2)=33);\n        \n        miwatj_n => eadv.[mbs_%].dt.count(0).where(dt>sysdate-1000 and substr(loc,2,2)=34);\n        \n        miwatj_ld => eadv.[mbs_%].dt.max().where(dt>sysdate-1000 and substr(loc,2,2)=34);\n        \n        anyinginyi_n => eadv.[mbs_%].dt.count(0).where(dt>sysdate-1000 and substr(loc,2,2)=32);\n        \n        anyinginyi_ld => eadv.[mbs_%].dt.max().where(dt>sysdate-1000 and substr(loc,2,2)=32);\n        \n        congress_n => eadv.[mbs_%].dt.count(0).where(dt>sysdate-1000 and substr(loc,2,2) in(37,38,39,41,42));\n        \n        congress_ld => eadv.[mbs_%].dt.max().where(dt>sysdate-1000 and substr(loc,2,2) in(37,38,39,41,42));\n        \n        wurli_n => eadv.[mbs_%].dt.count(0).where(dt>sysdate-1000 and substr(loc,2,2)=36);\n        \n        wurli_ld => eadv.[mbs_%].dt.max().where(dt>sysdate-1000 and substr(loc,2,2)=36);\n        \n        kwhb_n => eadv.[mbs_%].dt.count().where(dt>sysdate-1000 and substr(loc,2,2)=35);\n        \n        kwhb_ld => eadv.[mbs_%].dt.max().where(dt>sysdate-1000 and substr(loc,2,2)=35);\n        \n        ampila_n => eadv.[mbs_%].dt.count().where(dt>sysdate-1000 and substr(loc,2,2)=51);\n        \n        ampila_ld => eadv.[mbs_%].dt.max().where(dt>sysdate-1000 and substr(loc,2,2)=51);\n        \n        \n        phc_0 => eadv.[mbs_%].loc.stats_mode().where(dt > sysdate-1000 and substr(loc,2,2) between 20 and 50);\n        \n        phc_1 : { phc_0!? => to_number(substr(phc_0,2,2))},{=>0};\n        \n        phc_pcis : { phc_1=21 => 1 },{=>0};\n        \n        phc_miwatj : { phc_1=34 => 1 },{=>0};\n        \n        phc_congress : { phc_1 in(36,37,38,39,41,42) => 1 },{=>0};\n        \n        \n        phc_wurli : { phc_1=36 => 1 },{=>0};\n\n        phc_kwhb : { phc_1=35 => 1 },{=>0};\n        \n        tkc_provider : { coalesce(loc_region,0)=1 or phc_1 in(36,37,38,39,41,42) =>1},{=>2};\n        \n        [[rb_id]] : { phc_1 > 0 => phc_1 },{=>999};",
    "is_active": true
  },
  {
    "name": "ckd_labs2",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock(ckd_labs,\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:0,\n                \n            }\n        );\n\n\n       egfr1 => eadv.lab_bld_egfr_c.val.lastdv().where(dt>sysdate-730);\n       egfr2 => eadv.lab_bld_egfr_c.val.lastdv(1).where(dt>sysdate-730);\n       egfr3 => eadv.lab_bld_egfr_c.val.lastdv(2).where(dt>sysdate-730);\n       \n       creat1 => eadv.lab_bld_creatinine.val.lastdv().where(dt>sysdate-730);\n       creat2 => eadv.lab_bld_creatinine.val.lastdv(1).where(dt>sysdate-730);\n       creat3 => eadv.lab_bld_creatinine.val.lastdv(2).where(dt>sysdate-730);\n       \n       uacr1 => eadv.lab_ua_acr.val.lastdv().where(dt>sysdate-730);\n       uacr2 => eadv.lab_ua_acr.val.lastdv(1).where(dt>sysdate-730);\n       uacr3 => eadv.lab_ua_acr.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n      \n       sodium1 => eadv.lab_bld_sodium.val.lastdv().where(dt>sysdate-730);\n       sodium2 => eadv.lab_bld_sodium.val.lastdv(1).where(dt>sysdate-730);\n       sodium3 => eadv.lab_bld_sodium.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       potassium1 => eadv.lab_bld_potassium.val.lastdv().where(dt>sysdate-730);\n       potassium2 => eadv.lab_bld_potassium.val.lastdv(1).where(dt>sysdate-730);\n       potassium3 => eadv.lab_bld_potassium.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       bicarb1 => eadv.lab_bld_bicarbonate.val.lastdv().where(dt>sysdate-730);\n       bicarb2 => eadv.lab_bld_bicarbonate.val.lastdv(1).where(dt>sysdate-730);\n       bicarb3 => eadv.lab_bld_bicarbonate.val.lastdv(2).where(dt>sysdate-730);\n       \n       calcium1 => eadv.lab_bld_calcium.val.lastdv().where(dt>sysdate-730);\n       calcium2 => eadv.lab_bld_calcium.val.lastdv(1).where(dt>sysdate-730);\n       calcium3 => eadv.lab_bld_calcium.val.lastdv(2).where(dt>sysdate-730);\n       \n       phos1 => eadv.lab_bld_phosphate.val.lastdv().where(dt>sysdate-730);\n       phos2 => eadv.lab_bld_phosphate.val.lastdv(1).where(dt>sysdate-730);\n       phos3 => eadv.lab_bld_phosphate.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       hb1 => eadv.lab_bld_hb.val.lastdv().where(dt>sysdate-730);\n       hb2 => eadv.lab_bld_hb.val.lastdv(1).where(dt>sysdate-730);\n       hb3 => eadv.lab_bld_hb.val.lastdv(2).where(dt>sysdate-730);\n       \n       wcc_n1 => eadv.lab_bld_neutrophils.val.lastdv().where(dt>sysdate-730);\n       wcc_e1 => eadv.lab_bld_eosinophils.val.lastdv().where(dt>sysdate-730);\n       wcc_l1 => eadv.lab_bld_lymphocytes.val.lastdv().where(dt>sysdate-730);\n       \n       plt1 => eadv.lab_bld_platelets.val.lastdv().where(dt>sysdate-730);\n       \n       \n       \n       ferritin1 => eadv.lab_bld_ferritin.val.lastdv().where(dt>sysdate-730);\n       ferritin2 => eadv.lab_bld_ferritin.val.lastdv(1).where(dt>sysdate-730);\n       ferritin3 => eadv.lab_bld_ferritin.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       ckd_labs : {nvl(egfr1_val,0)>0 and nvl(egfr2_val,0)>0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "labs_euc",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n        \n\n       creat1 => eadv.lab_bld_creatinine.val.lastdv().where(dt>sysdate-730);\n       creat2 => eadv.lab_bld_creatinine.val.lastdv(1).where(dt>sysdate-730);\n       creat3 => eadv.lab_bld_creatinine.val.lastdv(2).where(dt>sysdate-730);\n             \n       sodium1 => eadv.lab_bld_sodium.val.lastdv().where(dt>sysdate-730);\n       sodium2 => eadv.lab_bld_sodium.val.lastdv(1).where(dt>sysdate-730);\n       sodium3 => eadv.lab_bld_sodium.val.lastdv(2).where(dt>sysdate-730);\n       \n       potassium1 => eadv.lab_bld_potassium.val.lastdv().where(dt>sysdate-730);\n       potassium2 => eadv.lab_bld_potassium.val.lastdv(1).where(dt>sysdate-730);\n       potassium3 => eadv.lab_bld_potassium.val.lastdv(2).where(dt>sysdate-730);\n       \n       bicarb1 => eadv.lab_bld_bicarbonate.val.lastdv().where(dt>sysdate-730);\n       bicarb2 => eadv.lab_bld_bicarbonate.val.lastdv(1).where(dt>sysdate-730);\n       bicarb3 => eadv.lab_bld_bicarbonate.val.lastdv(2).where(dt>sysdate-730);\n       \n       [[rb_id]] : {nvl(creat1_val,0)>0 and nvl(creat1_val,0)>0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "labs_cmp",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n       calcium1 => eadv.lab_bld_calcium.val.lastdv().where(dt>sysdate-730);\n       calcium2 => eadv.lab_bld_calcium.val.lastdv(1).where(dt>sysdate-730);\n       calcium3 => eadv.lab_bld_calcium.val.lastdv(2).where(dt>sysdate-730);\n       \n       phos1 => eadv.lab_bld_phosphate.val.lastdv().where(dt>sysdate-730);\n       phos2 => eadv.lab_bld_phosphate.val.lastdv(1).where(dt>sysdate-730);\n       phos3 => eadv.lab_bld_phosphate.val.lastdv(2).where(dt>sysdate-730);\n\n       pth1 => eadv.lab_bld_pth.val.lastdv().where(dt>sysdate-730);\n       pth2 => eadv.lab_bld_pth.val.lastdv(1).where(dt>sysdate-730);\n       pth3 => eadv.lab_bld_pth.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n      \n       [[rb_id]] : {coalesce(calcium1_val,0)>0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "labs_egfr_uacr",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n            }\n        );\n\n        rrt => rout_rrt.rrt.val.bind();\n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        egfr1 => eadv.lab_bld_egfr_c._.lastdv().where(dt>sysdate-730);\n        egfr2 => eadv.lab_bld_egfr_c._.lastdv(1).where(dt>sysdate-730);\n        egfr3 => eadv.lab_bld_egfr_c._.lastdv(2).where(dt>sysdate-730);\n       \n      \n        uacr1 => eadv.lab_ua_acr._.lastdv().where(dt>sysdate-730);\n        uacr2 => eadv.lab_ua_acr._.lastdv(1).where(dt>sysdate-730);\n        uacr3 => eadv.lab_ua_acr._.lastdv(2).where(dt>sysdate-730);\n       \n       ex_flag : { ckd=0 and rrt>0 => 1},{=>0};\n      \n       [[rb_id]] : {coalesce(egfr1_val,0)>0 and ex_flag=0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "labs_haem",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n       hb1 => eadv.lab_bld_hb.val.lastdv().where(dt>sysdate-730);\n       hb2 => eadv.lab_bld_hb.val.lastdv(1).where(dt>sysdate-730);\n       hb3 => eadv.lab_bld_hb.val.lastdv(2).where(dt>sysdate-730);\n       \n       wcc_n1 => eadv.lab_bld_neutrophils.val.lastdv().where(dt>sysdate-730);\n       wcc_e1 => eadv.lab_bld_eosinophils.val.lastdv().where(dt>sysdate-730);\n       wcc_l1 => eadv.lab_bld_lymphocytes.val.lastdv().where(dt>sysdate-730);\n       \n       plt1 => eadv.lab_bld_platelets.val.lastdv().where(dt>sysdate-730);\n       \n      \n       [[rb_id]] : {coalesce(hb1_val,0)>0 and coalesce(hb2_val,0)>0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "labs_iron",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n            \n       \n       ferritin1 => eadv.lab_bld_ferritin.val.lastdv().where(dt>sysdate-730);\n       ferritin2 => eadv.lab_bld_ferritin.val.lastdv(1).where(dt>sysdate-730);\n       ferritin3 => eadv.lab_bld_ferritin.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n      \n       [[rb_id]] : {coalesce(ferritin1_val,0)>0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "ckd_anaemia",
    "text": "/* Rule block to determine CKD complications */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine CKD complications\",\n                is_active:2                \n            }\n        );\n                \n        #doc(,\n            {\n                txt:\"Complications including Hb low\",\n                cite : \"ckd_complications_ref1, ckd_complications_ref2\"\n            }\n        );        \n        \n        ckd => rout_ckd.ckd.val.bind(); \n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        esrd : {rrt in (1,2,4)=>1},{=>0};\n        \n        #doc(,\n            {\n                txt:\"Haematenics\"\n            }\n        );\n        \n        \n        hb => eadv.lab_bld_hb._.lastdv().where(dt>sysdate-60);\n        \n        hb2 => eadv.lab_bld_hb._.lastdv().where(dt<hb_dt and dt>sysdate-90);\n        \n        hb3 => eadv.lab_bld_hb._.lastdv().where(dt<hb2_dt-21 and dt>sysdate-120);\n        \n        \n        hb2_1_qt : { coalesce(hb2_val,0)>0 => round((hb_val-hb2_val)/hb2_val,2)};\n        \n        hb3_2_qt : { coalesce(hb3_val,0)>0 => round((hb2_val-hb3_val)/hb3_val,2)};\n        \n        hb_cum_qt : { hb2_1_qt > 0.2 and (hb3_2_qt + hb2_1_qt) >0.3 => 1},\n                    { hb2_1_qt > 0.1 and (hb3_2_qt + hb2_1_qt) >0.2 => 2},\n                    { hb2_1_qt < (-0.1) and (hb3_2_qt + hb2_1_qt) < (-0.2) => 3},\n                    { hb2_1_qt < (-0.2) and (hb3_2_qt + hb2_1_qt) < (-0.3) => 4},\n                    {=>0};\n        \n        hb_non_ss : {hb_dt - hb2_dt <7 and abs(hb2_1_qt)>0.2 =>1},{=>0};\n        \n        \n        \n        plt1 => eadv.lab_bld_platelets._.lastdv().where(dt>sysdate-60);\n        \n        wcc_neut1 => eadv.lab_bld_wcc_neutrophils._.lastdv().where(dt>sysdate-60);\n        \n        wcc_eos1 => eadv.lab_bld_wcc_eosinophils._.lastdv().where(dt>sysdate-60);\n        \n        \n        \n        rbc_mcv => eadv.lab_bld_rbc_mcv._.lastdv().where(dt>sysdate-60);\n        \n        esa => eadv.rxnc_b03xa._.lastdv().where( val=1);\n        \n        b05_ld => eadv.[rxnc_b05cb,rxnc_b05xa].dt.max().where(val=1);\n        \n        \n        fer => eadv.lab_bld_ferritin._.lastdv().where(dt>sysdate-120);\n        \n        crp => eadv.lab_bld_crp._.lastdv().where(dt>sysdate-120);\n        \n        tsat1 => eadv.lab_bld_tsat._.lastdv().where(dt>sysdate-120);\n        \n        #doc(,{\n                txt:\"Determine haematenic complications\"\n        });\n        \n        \n        hb_state : { coalesce(hb_val,0)>0 and coalesce(hb_val,0)<60 =>1},\n                    { coalesce(hb_val,0)>=60 and coalesce(hb_val,0)<80 =>2},\n                    { coalesce(hb_val,0)>=80 and coalesce(hb_val,0)<100 =>3},\n                    { coalesce(hb_val,0)>=100 and coalesce(hb_val,0)<125 =>4},\n                    { coalesce(hb_val,0)>=125 and coalesce(hb_val,0)<140 =>5},\n                    { coalesce(hb_val,0)>=140 and coalesce(hb_val,0)<180 =>6},\n                    { coalesce(hb_val,0)>180 =>7},\n                    {=>0};\n                    \n        mcv_state : { hb_state=1 and coalesce(rbc_mcv_val,0)>0 and coalesce(rbc_mcv_val,0)<70 => 11 },\n                    { hb_state=1 and coalesce(rbc_mcv_val,0)>=70 and coalesce(rbc_mcv_val,0)<80 => 12 },\n                    { hb_state=1 and coalesce(rbc_mcv_val,0)>=80 and coalesce(rbc_mcv_val,0)<=100 => 20 },\n                    { hb_state=1 and coalesce(rbc_mcv_val,0)>=100 => 31 },{ =>0};\n                    \n        fe_status_null : { fer_val? and tsat1_val? =>1},{=>0};\n        \n        fe_low : { fer_val<250 or tsat1_val<0.25=> 1},{=>0};\n        \n        hyper_ferr : { fer_val>1000 => 1},{=>0};\n        \n        thal_sig : {mcv_state=11 =>1 },{=>0};\n        \n        esa_null : { esa_dt? =>1},{=>0};\n        \n        esa_state : { esa_null=0 and esa_val=1 => 1},{ esa_null=0 and esa_val=0 => 2},{=>0};\n        \n        \n                \n        \n        \n        [[rb_id]] : { rrt in(1,2,4) or ckd>4 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "sx_abdo",
    "text": "/* Algorithm to assess abdominal colorectal surgical procedures */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess abdominal colorectal surgical procedures\",\n                is_active:2\n                \n            }\n        );\n        \n        exp_lap_fd => eadv.[caresys_3037300].dt.first();\n        \n        r_hemi_fd => eadv.[caresys_32000%,caresys_32003%,caresys_32004%,caresys_32005%].dt.first();\n        \n        l_hemi_fd => eadv.[caresys_32006%].dt.first();\n        \n        hemi : {coalesce(r_hemi_fd, l_hemi_fd)!? =>1},{=>0};\n        \n        h_ar_fd => eadv.[caresys_3202400].dt.first();\n        \n        l_ar_fd => eadv.[caresys_3202500,caresys_3202600,caresys_3202800].dt.first();\n        \n        ar : {coalesce(h_ar_fd,l_ar_fd)!? =>1},{=>0};\n        \n        hartmann_fd => eadv.[caresys_32051%].dt.first();\n        \n        [[rb_id]] : { coalesce(exp_lap_fd, r_hemi_fd, l_hemi_fd, h_ar_fd,l_ar_fd,hartmann_fd)!? => 1},{=>0};\n        \n        #define_attribute(\n            [[rb_id]],{\n                label:\"Major abdominal colorectal surgery\",\n                type:2,\n                is_reportable:0\n        });\n        #define_attribute(\n            hemi,{\n                label:\"Left or Right Hemicolectomy\",\n                type:2,\n                is_reportable:1\n        });\n        #define_attribute(\n            ar,{\n                label:\"Anterior Resection\",\n                type:2,\n                is_reportable:1\n        });",
    "is_active": true
  },
  {
    "name": "ipa_sep",
    "text": "/* Algorithm to assess Inpatient activity*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Inpatient activity with exclusions\",\n                is_active:2\n                \n            }\n        );\n        \n        \n        \n        icd_ld => eadv.[icd_%].dt.last().where(att not in(`icd_z49_1`));\n        \n        icd_n => eadv.[icd_%].dt.distinct_count().where(att not in(`icd_z49_1`));\n        \n        icd_fd => eadv.[icd_%].dt.first().where(att not in(`icd_z49_1`));\n        \n        [[rb_id]] : { icd_ld!? => 1 },{=>0};    \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Inpatient activity\",\n                type:2,\n                is_reportable:0\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cm_vm",
    "text": "/*  comorbidity view model  */\n        \n        #define_ruleblock([[rb_id]], {\n                description: \"comorbidity view model\",\n                is_active:2\n        });\n        \n        #doc(,{\n                txt:\"disease entities\"\n        });\n        \n        vax_pf => rout_vacc_covid.vax_pf_dt.val.bind();\n        \n        vax_az => rout_vacc_covid.vax_az_dt.val.bind();\n        \n        vax_md => rout_vacc_covid.vax_md_dt.val.bind();\n        \n        vax_max_dt => rout_vacc_covid.vax_val.val.bind();\n        \n        vax_max_val => rout_vacc_covid.vax_dt.val.bind();\n        \n        cmidx_charlson => rout_cmidx_charlson.cmidx_charlson.val.bind();\n        \n        cmcat_charlson => rout_cmidx_charlson.cci_cat.val.bind();\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        rrt_flag : {rrt>0 =>1},{=>0};\n        \n        cvra_cat => rout_cvra.cvra_cat.val.bind();\n        \n        dm => rout_cvra.dm.val.bind();\n        \n        cad => rout_cd_cardiac_cad.cd_cardiac_cad.val.bind();\n        \n        \n        esrd_risk => rout_cvra.esrd_risk.val.bind();\n        \n        [[rb_id]] : {coalesce(cmidx_charlson,cvra_cat)!? =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "cd_hepb_coded",
    "text": "#define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to detect Chronioc hepatitis B from coding\",\n                is_active:0,\n                author: \"richardh@iinet.net.au\"\n            }\n        );\n        \n        /* Hep B ICPC codes */\n        hepb_imm_vac => eadv.[icpc_d72j97].dt.max();\n        \n        hepb_imm_inf => eadv.[icpc_d72j96].dt.max();\n        \n        hepb_imm_nos => eadv.[icpc_d72j99].dt.max();\n        \n        hepb_imm : { coalesce(hepb_imm_vac,hepb_imm_inf,hepb_imm_nos)!? =>1},{=>0};\n                \n        hepb_nonimm => eadv.[icpc_d72j93].dt.max();\n        \n        hepb_nos => eadv.[icpc_d72j92,icpc_d72j94,icpc_d72j95,icpc_d72003,icpc_d72010].dt.max();\n        \n        /* Hep B Surface antibody and antigen */\n        hb_s_ab => eadv.lab_bld_hbs_ab_level._.lastdv();\n        hb_s_ag => eadv.lab_bld_hbs_ag._.lastdv();\n        \n        /* Hep B Core antibody*/\n        hb_c_ab => eadv.lab_bld_hbc_ab._.lastdv();\n        \n        \n        /* Hep B e antibody and antigen */\n        hb_e_ab => eadv.[lab_bld_hbe_ab]._.lastdv();\n        hb_e_ag => eadv.[lab_bld_hbe_ag]._.lastdv();\n        \n        /* Hep B Viral Load */\n        hb_vl => eadv.[lab_bld_hbv_viral_load]._.lastdv();\n        \n        /* Liver Function AST */\n        ast => eadv.[lab_bld_ast]._.lastdv();\n        \n        /*\n        recovery            1\n        immunized           2\n        non-immune          3\n        immune tolerance    4\n        immune response     5\n        immune control      6\n        immune escape       7\n        */\n        \n        hbv_status : { hb_s_ag_val = 0 and hb_c_ab_val = 1 => 1},\n        { hb_s_ag_val = 0 and hb_s_ab_val = 1 => 2},\n        { hb_s_ag_val = 0 and hb_s_ab_val = 0 => 3},\n        { hb_s_ag_val = 1 and hb_e_ab_val = 0 and hb_e_ag_val = 1  and hb_vl_val > 2000 and ast_val<32 =>  4},\n        { hb_s_ag_val = 1 and hb_e_ab_val = 1 and hb_e_ag_val = 1  and hb_vl_val > 2000 =>  5},\n        { hb_s_ag_val = 1 and hb_e_ab_val = 1 and hb_vl_val < 2000 and ast_val <32 =>  6},\n        { hb_s_ag_val = 1 and hb_e_ab_val = 1 and hb_e_ag_val = 0 and hb_vl_val > 2000 and ast_val >32 =>  7},\n        {=>0};\n        \n        rcm_hbv_ic : {hbv_status = 1 =>1},{=>0};\n        \n        rcm_hbv_vacc : {hbv_status =3 =>1},{=>0};\n        \n        rcm_hbv_gp : { hbv_status in (4,6) => 12},{hbv_status in (5,7) => 3 },{=>0};\n        \n        rcm_hbv_path : { hbv_status in (5,7) => 3},{ hbv_status = 6 => 12},{=>0};\n        \n        rcm_hbv_rad : { hbv_status = 6 => 12},{ hbv_status = 7 => 6},{=>0};\n        \n        rcm_hbv_hepref : {hbv_status =5 => 1},{=>0};\n        \n        [[rb_id]] : { hbv_status>0 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Chronic HepB\"\n            }\n        );",
    "is_active": true
  },
  {
    "name": "periop_nsqip",
    "text": "/*  This is a algorithm to apply ACS NSQIP */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"algorithm to apply ACS NSQIP \",\n                \n                is_active:0\n                \n            }\n        );\n        \n        dob => eadv.dmg_dob.dt.max();\n        \n        age : { dob!? => round((sysdate-dob)/365.25,0)};\n        \n        ca_dt => eadv.[icd_c%,icpc_a79%].dt.max();\n        \n        cad => rout_cd_cardiac_cad.cd_cardiac_cad.val.bind();\n        \n        \n        \n        vhd => rout_cd_cardiac_vhd.cd_cardiac_vhd.val.bind();\n        \n        htn_0 => rout_cd_htn.cd_htn.val.bind();\n        \n        htn_rx => rout_cd_htn.htn_rxn.val.bind();\n        \n        htn : {htn_0=1 and htn_rx=1 =>1},{=>0};\n    \n        \n        pulm => rout_cd_pulm.cd_pulm.val.bind();\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        rx_gs_dt => eadv.rxnc_h02ab.dt.max().where(val=1);\n        \n        coag_dt => eadv.[icd_d68%,icpc_b83%].dt.max();\n        \n        obesity => rout_cd_obesity.cd_obesity.val.bind();\n        \n        low => rout_cd_nutr_low.cd_nutr_low.val.bind();\n\n        \n        w_inpt : {.=>0},{=>6};\n        \n        w_sepsis : {.=>0},{=>4};\n        \n        w_poor_func : {.=>0},{=>3};\n        \n        w_ca_diss : { ca_dt!? =>1},{=>0};\n        \n        w_age : { age<65 => 0},\n                { age between 65 and 70 => 0.5},\n                { age between 70 and 79 => 1},\n                { age>=80 =>2};\n        \n        w_cardiac : { greatest(cad, vhd,htn)>0=>5},{=>0};   \n        \n        w_pulm : { pulm=1 =>3},{=>0};\n        \n        w_renal : { rrt=1 or ckd>2 => 1},{=>0};\n        \n        w_steroids : {rx_gs_dt!? => 1},{=>0};\n        \n        w_bleeding : {coag_dt!? => 5},{=>0};\n        \n        w_dnr : {.=>0},{=>5};\n        \n        w_low : { low=1 =>1 },{=>0};\n        \n        w_obesity : { obesity=1 =>-1},{=>0};\n        \n        pmp_sum : {.=> w_inpt + w_sepsis + w_poor_func + w_ca_diss + w_age \n            + w_cardiac + w_pulm + w_renal + w_steroids \n            + w_bleeding + w_dnr + w_low + w_obesity};\n        \n        pmp_score : { pmp_sum  between -1 and 5 => 0.1},\n                    { pmp_sum  between 6 and 10 => 0.6},\n                    { pmp_sum  between 11 and 15 => 2.4},\n                    { pmp_sum  between 16 and 20 => 12.6},\n                    { pmp_sum  between 21 and 25 => 37.5},\n                    { pmp_sum  between 26 and 30 => 40};\n\n\n        [[rb_id]] : { pmp_score >0 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"PMP score\"\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_htn",
    "text": "/* Algorithm to assess hypertension  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess hypertension\",                \n                is_active:2\n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Calculate information entropy\"\n            }\n        );\n        \n        \n        iq_sbp => eadv.obs_bp_systolic.val.count(0).where(dt>sysdate-730);\n        \n        iq_tier : {iq_sbp>1 => 2},{iq_sbp>0 => 1},{=>0};\n        \n        #doc(,\n            {\n                section: \"Diagnosis\",\n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Hypertension diagnosis: code criteria\"\n            }\n        );\n       \n        \n        \n        htn_icd => eadv.[icd_i10%,icd_i15%].dt.min();\n        htn_icpc => eadv.[icpc_k85%,icpc_k86%,icpc_k87%].dt.min();\n        \n        #doc(,\n            {\n                txt:\"Hypertension diagnosis: observation criteria at least 3 readings over SBP140 within 2 years\",\n                cite:\"htn_nhf_2016,htn_aha_2018,htn_mja_2016\"\n            }\n        );\n        \n        htn_obs => eadv.obs_bp_systolic.val.count(0).where(val>140 and dt>sysdate-730);\n        \n        #doc(,\n            {\n                txt:\"Ancillary information for causality\"\n            }\n        );\n        \n        \n        bld_k_val => eadv.lab_bld_potassium.val.last().where(dt>sysdate-730);\n        \n        bld_k_state : {nvl(bld_k_val,0)>5.2 =>3},{nvl(bld_k_val,0)>4.0 =>2},{=>1};\n        \n        #doc(,\n            {\n                txt:\"Hypertension diagnosis: treatment criteria based on RxNorm medication codes\"\n            }\n        );\n        \n        htn_rxn_acei => eadv.[rxnc_c09aa].dt.count(0).where(val=1);\n        htn_rxn_arb => eadv.[rxnc_c09ca].dt.count(0).where(val=1);\n        htn_rxn_bb => eadv.[rxnc_c07%].dt.count(0).where(val=1);\n        htn_rxn_ccb => eadv.[rxnc_c08%].dt.count(0).where(val=1);\n        htn_rxn_c02 => eadv.[rxnc_c02%].dt.count(0).where(val=1);\n        htn_rxn_diuretic_thiaz => eadv.[rxnc_c03aa].dt.count(0).where(val=1);\n        htn_rxn_diuretic_loop => eadv.[rxnc_c03c%].dt.count(0).where(val=1);\n        \n        htn_rxn_raas : { greatest(htn_rxn_acei,htn_rxn_arb)>0 =>1},{=>0};\n        \n        htn_rxn : { coalesce(htn_rxn_acei, htn_rxn_arb, htn_rxn_bb, htn_rxn_ccb , htn_rxn_c02 , htn_rxn_diuretic_thiaz , htn_rxn_diuretic_loop) is not null =>1 },{=>0};\n        \n        #doc(,\n            {\n                section: \"Complications\"\n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt:\"Hypertension diagnosis: vintage or date of onset\"\n            }\n        );\n        \n        \n        \n        \n        htn_fd_code : { . => least_date(htn_icd,htn_icpc)};\n        \n        htn_fd_obs => eadv.obs_bp_systolic.dt.min().where(val>140);\n        \n        \n        htn_fd : { .=> least_date(htn_fd_code,htn_fd_obs)};\n        \n        htn_fd_yr : { htn_fd!? => to_char(htn_fd,`YYYY`) };\n        \n        htn_type_2 => eadv.[icd_i15_%].dt.count(0);\n        \n        htn_from_obs : { htn_fd_obs<htn_fd_code =>1},{htn_fd_obs!? and htn_fd_code? =>1},{=>0};\n        \n        #doc(,\n            {\n                txt:\"Hypertension chronology\"\n            }\n        );\n        \n        \n        htn_vintage_yr_ : { htn_fd is not null => round((sysdate-htn_fd)/365,0)},{=>0};\n        \n        htn_vintage_cat : { htn_vintage_yr_>=0 and htn_vintage_yr_ <10 => 1 },\n                            { htn_vintage_yr_>=10 and htn_vintage_yr_ <20 => 2 },\n                            { htn_vintage_yr_>=20=> 3 },{=>0};\n        \n        \n        #doc(,\n            {\n                section: \"Management\"\n            }\n        );\n        \n        \n        \n        htn : {coalesce(htn_icd,htn_icpc)!? or htn_obs>2 =>1},{=>0};\n        \n        htn_prev : { htn_fd!? => 1 },{=>0};\n        \n        htn_incd : { htn_fd > sysdate - 365 => 1},{=>0};\n        \n        [[rb_id]] : {.=> htn};\n        \n        htn_dx_uncoded : {htn_obs>=3 and coalesce(htn_icd,htn_icpc)? => 1},{=>0};\n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Hypertension\",\n                desc:\"Presence of Hypertension\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            htn_incd,\n            {\n                label:\"Incident Hypertension\",\n                desc:\"Presence of Hypertension\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            htn_prev,\n            {\n                label:\"Prevalent Hypertension\",\n                desc:\"Presence of Hypertension\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_htn_rcm",
    "text": "/* Ruleblock to assess hypertension pharmacology recommendations */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess hypertension pharmacology recommendations\",                \n                is_active:0\n                \n                \n            }\n        );\n        \n       \n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        htn => rout_cd_htn.cd_htn.val.bind();\n        \n        bpc => rout_cd_htn.bp_control.val.bind();\n        \n        cad => rout_cd_cardiac_cad.cad.val.bind();\n        #doc(,\n            {\n                txt:\"Gather existing medications\",\n                cite:\"htn_tga_2019,htn_jnc_2014\"\n            }\n        );\n        \n        \n        \n\n        acei => eadv.[rxnc_c09aa].dt.count(0).where(val=1);\n        arb => eadv.[rxnc_c09ca].dt.count(0).where(val=1);\n        bb => eadv.[rxnc_c07%].dt.count(0).where(val=1);\n        ccb => eadv.[rxnc_c08%].dt.count(0).where(val=1);\n        c02 => eadv.[rxnc_c02%].dt.count(0).where(val=1);\n        thiaz => eadv.[rxnc_c03aa].dt.count(0).where(val=1);\n        loop => eadv.[rxnc_c03c%].dt.count(0).where(val=1);\n        mrb  => eadv.[rxnc_c03da].dt.count(0).where(val=1);\n        \n        #doc(,\n            {\n                txt:\"Determine potential complications (Needs more work)\",\n                cite:\"htn_rcm_compmethods_2000,htn_rcm_amia_2017\"\n            }\n        );\n        \n        \n        k_val => eadv.lab_bld_potassium.val.last().where(dt>sysdate-730);\n        \n        k_state : {nvl(k_val,0)>5.2 =>3},{nvl(k_val,0)>4.0 =>2},{=>1};\n        \n        \n        \n        raas : { greatest(acei,arb)>0 =>1 },{=>0};\n        \n        rx_line : { greatest(acei,arb,ccb,bb,c02,thiaz,loop,mrb)=0 =>0},\n                    { raas=1 and greatest(ccb,bb,c02,thiaz,loop,mrb)=0 =>1},\n                    { raas=1 and ccb>0 and greatest(bb,c02,thiaz,loop,mrb)=0 =>2},\n                    { raas=1 and ccb>0 and thiaz>0 and greatest(bb,c02,loop,mrb)=0 =>3};\n                    \n        #doc(,\n            {\n                txt:\"Treatment recommendation as a code\",\n                cite:\"htn_rcm_amh_2019\"\n            }\n        );\n        \n        [[rb_id]] :   { htn=1 and bpc>1 and raas=0 and k_state<3 => 11 },\n                    { htn=1 and bpc>1 and raas=0 and k_state=3 and ccb=0 => 12 },\n                    { htn=1 and bpc>1 and raas=1 and ccb=0 => 22 },\n                    { htn=1 and bpc>1 and raas=1 and ccb=1 and thiaz=0 and k_state>1 => 33 },\n                    { htn=1 and bpc>1 and raas=1 and ccb=1 and thiaz=0 and k_state=1 => 34 },\n                    { htn=1 and bpc>1 and raas=1 and ccb=1 and thiaz=1 and k_state<3 => 44 },\n                    { htn=1 and bpc>1 and raas=1 and ccb=1 and thiaz=1 and k_state=3 => 35 },\n                    { htn=1 and bpc>1 and raas=1 and ccb=1 and thiaz=1 and mrb=1 => 55 },\n                    {htn=1 and bpc>1 =>99},\n                    {=>0};",
    "is_active": true
  },
  {
    "name": "cd_htn_bp_control",
    "text": "/* Ruleblock to assess blood pressure control */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess blood pressure control \",                \n                is_active:2\n                \n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"BP control : Assessing BP control in past 2 years: time  Proportion? outside of target range SBP >140\",\n                cite:\"htn_plos_2018\"\n            }\n        );\n        \n        age => rout_cvra.age.val.bind();\n        \n        cvra_cat => rout_cvra.cvra_cat.val.bind();\n        \n        htn => rout_cd_htn.cd_htn.val.bind();\n        \n        sbp_target_max : {age>=75 or cvra_cat=3 => 120},{=>140};\n        \n        dbp_target_max : {age>=75 or cvra_cat=3 => 80},{=>90};\n        \n        sbp_target_min : {1=1 => 100};\n                \n        \n                     \n        sbp_mu_1 => eadv.obs_bp_systolic.val.avg().where(dt>=sysdate-365); \n        \n        sbp_med_1 => eadv.obs_bp_systolic.val.median().where(dt>=sysdate-365); \n        \n        \n        \n        sbp_max_1 => eadv.obs_bp_systolic.val.max().where(dt>=sysdate-365); \n        \n        sbp_min_1 => eadv.obs_bp_systolic.val.min().where(dt>=sysdate-365); \n        \n        \n        dbp_mu_1 => eadv.obs_bp_diastolic.val.avg().where(dt>=sysdate-365); \n        \n        dbp_med_1 => eadv.obs_bp_diastolic.val.median().where(dt>=sysdate-365); \n        \n        \n        \n        dbp_max_1 => eadv.obs_bp_diastolic.val.max().where(dt>=sysdate-365); \n        \n        dbp_min_1 => eadv.obs_bp_diastolic.val.min().where(dt>=sysdate-365); \n        \n        \n        \n        n_1 => eadv.obs_bp_systolic.val.count().where(dt>=sysdate-365); \n        \n        opt_1_n => eadv.obs_bp_systolic.val.count().where(val<sbp_target_max and val>=sbp_target_min and dt>=sysdate-365);\n        \n        \n        \n        #doc(,\n            {\n                txt:\"BP control: Time in therapeutic range\"\n            }\n        );\n        \n        sbp_max => eadv.obs_bp_systolic.val.max().where(dt>=sysdate-365);\n        \n        sbp_min => eadv.obs_bp_systolic.val.min().where(dt>=sysdate-365);\n        \n        sbp_tir_1y : {coalesce(n_1,0)>0 => round(coalesce(opt_1_n,0)/n_1,2)*100 };\n        \n        [[rb_id]] : {coalesce(n_1,0)>0 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "rrt_tx",
    "text": "/* Rule block to determine Tx metrics*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine Tx metrics\",\n                is_active:2,\n                filter: \"SELECT eid FROM rout_rrt WHERE rrt=3\"\n                \n            }\n        );\n\n        #doc(,\n            {\n                txt : \"Transplant graft status\"\n            }\n        );\n        \n        tx_dt => rout_rrt.tx_dt.val.bind();\n        \n        \n        cr_min => eadv.lab_bld_creatinine._.minfdv().where(dt > tx_dt);\n        \n        cr_last => eadv.lab_bld_creatinine._.lastdv().where(dt > tx_dt);\n        \n        enc_op_ld => eadv.enc_op_ren_rnt.dt.last();\n        \n        rx_l04ad => eadv.rxnc_l04ad.dt.last().where(val=1);\n        \n        tdm_tac => eadv.lab_bld_tdm_tacrolimus._.lastdv().where(dt > sysdate-365);\n        \n        rx_l04aa => eadv.rxnc_l04aa.dt.last().where(val=1);\n        \n        tdm_evl => eadv.lab_bld_tdm_everolimus._.lastdv().where(dt > sysdate-365);\n        \n        rx_l04ax => eadv.rxnc_l04ax.dt.last().where(val=1);\n        \n        \n        rx_h02ab => eadv.rxnc_l04ab.dt.last().where(val=1);\n        \n        tac : { rx_l04ad!? and tdm_tac_val>2 =>1},{=>0};\n        \n        evl : { rx_l04aa!? and tdm_evl_val>2 =>1},{=>0};\n        \n        rxn : { coalesce(rx_l04ad,rx_l04aa,rx_l04ax,rx_h02ab)!? => 1},{=>0};\n        \n        tac_c0 => eadv.lab_bld_tdm_tacrolimus._.lastdv();\n        \n        enc_d90 : { enc_op_ld > sysdate -90 => 1},{=>0};\n        \n        \n        [[rb_id]] : { cr_min_val!? and rxn>0 =>1},{=>0};\n        \n        #define_attribute(\n            [[rb_id]],{\n                label:\"Graft function known and therapy\",\n                is_reportable:1,\n                type:2\n        });\n        #define_attribute(\n            cr_last_val,{\n                label:\"transplant_panel:last creatinine value\",\n                is_reportable:1,\n                type:2\n        });\n        #define_attribute(\n            cr_last_dt,{\n                label:\"transplant_panel:last creatinine date\",\n                is_reportable:1,\n                type:12\n        });\n        #define_attribute(\n            tdm_tac_val,{\n                label:\"transplant_panel:last tacrolimus val\",\n                is_reportable:1,\n                type:2\n        });\n        #define_attribute(\n            tdm_tac_dt,{\n                label:\"transplant_panel:last tacrolimus date\",\n                is_reportable:1,\n                type:12\n        });\n        #define_attribute(\n            tdm_evl_val,{\n                label:\"transplant_panel:last everolimus val\",\n                is_reportable:1,\n                type:2\n        });\n        #define_attribute(\n            tdm_evl_dt,{\n                label:\"transplant_panel:last everolimus date\",\n                is_reportable:1,\n                type:12\n        });\n        #define_attribute(\n            tx_dt,{\n                label:\"transplant_panel:transplant date\",\n                is_reportable:1,\n                type:12\n        });\n        #define_attribute(\n            enc_op_ld,{\n                label:\"transplant_panel:last clinic date\",\n                is_reportable:1,\n                type:12\n        });\n        #define_attribute(\n            enc_d90,{\n                label:\"transplant_panel:active follow up within 90 days\",\n                is_reportable:1,\n                type:2\n        });",
    "is_active": true
  },
  {
    "name": "cd_careplan",
    "text": "/*  Ruleblock to determine existing careplans*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to determine existing careplans\",\n                is_active:2\n                \n            }\n        );\n        \n        cp_l => eadv.careplan_h9_v1._.lastdv();\n        \n        phc => rout_dmg_source.phc_1.val.bind();\n        \n        is_pcis : { phc=1 =>1},{=>0};\n        \n        #doc(,\n            {\n                txt:\"Assign binary careplan attributes based on positional values \"\n            }\n        );\n        \n        \n        \n        cp_cs : {cp_l_val!? => to_number(substr(to_char(cp_l_val),-1,1))},{=>0};\n        \n        cp_ckd : {cp_l_val!? => to_number(substr(to_char(cp_l_val),-5,1))},{=>0};\n        \n        cp_dm : {cp_l_val!? => to_number(substr(to_char(cp_l_val),-6,1))},{=>0};\n        \n        cp_cvd : {cp_l_val!? => to_number(substr(to_char(cp_l_val),-7,1))},{=>0};\n        \n        cp_hicvr : {cp_l_val!? => to_number(substr(to_char(cp_l_val),-8,1))},{=>0};\n        \n        [[rb_id]] : {greatest(cp_cs,cp_ckd,cp_dm,cp_cvd,cp_hicvr)>0 => cp_cs};",
    "is_active": true
  },
  {
    "name": "opa_sep",
    "text": "/* Algorithm to assess Outpatient activity*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Outpatient activity with exclusions\",\n                is_active:2\n            }\n        );\n        \n        \n        \n        op_ld => eadv.[enc_op_%].dt.last();\n        \n        op_n => eadv.[enc_op_%].dt.distinct_count();\n        \n        op_fd => eadv.[enc_op_%].dt.first();\n        \n        op_att => eadv.[enc_op_%].att.last();\n        \n        [[rb_id]] : { op_ld!? => 1 },{=>0};    \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Inpatient activity\",\n                type:2,\n                is_reportable:0\n            }\n        );",
    "is_active": true
  },
  {
    "name": "id_sti",
    "text": "/*  This is a algorithm to identify soft tissue infection  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify soft tissue infection\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_l0%].dt.min();\n        \n        icd_ld => eadv.[icd_l0%].dt.max();\n        \n        icd_n => eadv.[icd_l0%].dt.count();\n        \n        icpc_ld => eadv.[icpc_s10%,icpc_76%].dt.max();\n        \n        code_ld : { . => greatest_date(icd_ld,icpc_ld)};\n        \n        gap : { icd_fd!? => round((icd_ld-icd_fd)/365,1)};\n        \n        multi : { coalesce(icd_n,0)>1 and coalesce(gap,0)>1 =>1},{=>0};\n        \n        [[rb_id]] : { code_ld!? and multi=1 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of recurrent soft tissue infection\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "id_cap",
    "text": "/*  This is a algorithm to identify respiratory infections  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify respiratory infections\",\n                is_active:2\n                \n            }\n        );\n        \n        cap_viral_ld => eadv.[icd_j09,icd_j10,icd_j11,icd_j12].dt.max();\n        \n        cap_strep_ld => eadv.icd_j13.dt.max();\n        \n        cap_hi_ld => eadv.icd_j14.dt.max();\n        \n        cap_nos_ld => eadv.[icd_j18%].dt.max();\n        \n        cap_mel_ld => eadv.icpc_a78054.dt.max();\n        \n        [[rb_id]] : { coalesce(cap_viral_ld, cap_strep_ld,cap_hi_ld,cap_nos_ld,cap_mel_ld)!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of respiratory infection requiring hospitalization\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "acc_study",
    "text": "#define_ruleblock([[rb_id]],\n            {\n                description: \"This is a test algorithm\",\n                is_active:0\n                \n            }\n        );\n        \n        cand => rout_core_info_entropy.is_study_cand1.val.bind();\n        \n        ckd => rout_ckd.ckd_stage_val.val.bind();\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        at_risk => rout_at_risk.at_risk.val.bind();\n        \n        \n        \n        \n        [[rb_id]] : {. =>1};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"This is a test variable uics\"\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_pulm",
    "text": "/*  This is a algorithm to identify pulmonary disease  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify pulmonary disease\",\n                is_active:2\n                \n            }\n        );\n        \n        code_copd_dt => eadv.[icpc_r95%,icd_j44%].dt.max();\n        \n        rx_r03_dt => eadv.[rxnc_r03%].dt.max().where(val=1);\n        \n        copd : {code_copd_dt!? or rx_r03_dt!?=> 1},{=>0};\n        \n        [[rb_id]] : { greatest(copd)>0 =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of COPD\"\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_imm_vasculitis",
    "text": "/*  This is a algorithm to identify vasculitic phenotypes  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify vasculitic phenotypes\",\n                is_active:2\n                \n            }\n        );\n        \n        gpa_fd => eadv.[icd_m31_3].dt.min();\n        \n        gca_fd => eadv.[icd_m31_5,icd_m31_6].dt.min();\n        \n        mpo_fd => eadv.[icd_m31_7].dt.min();\n        \n        tak_fd => eadv.[icd_m31_4].dt.min();\n                \n        \n        rxn_l01xc => eadv.[rxnc_l01xc].dt.min();\n        \n        rxn_h02ab => eadv.[rxnc_h02ab].dt.max().where(val=1);\n        \n       \n        \n        [[rb_id]] : { coalesce(gpa_fd,gca_fd,mpo_fd,tak_fd)!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of vasculitis\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_cirrhosis",
    "text": "/*  This is a algorithm to identify cirrhosis e-phenotype  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify cirrhosis e-phenotype\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_k74_%].dt.min();\n        \n        icpc_fd => eadv.[icpc_d97005].dt.min();\n    \n        code_fd : {.=> least_date(icd_fd,icpc_fd)};    \n        \n        \n        [[rb_id]] : { code_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of Cirrhosis\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "hba1c_graph",
    "text": "/* Algorithm to plot hba1c graph  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to plot hba1c graph\",\n                   \n                    is_active:2\n                    \n                }\n            );\n            \n            hba1c_max => eadv.lab_bld_hba1c_ngsp._.maxldv();\n            \n            hba1c_min => eadv.lab_bld_hba1c_ngsp._.minldv();\n            \n            hba1c_f => eadv.lab_bld_hba1c_ngsp._.firstdv();\n            \n            hba1c_l => eadv.lab_bld_hba1c_ngsp._.lastdv();\n            \n            \n            dspan : { hba1c_l_dt> hba1c_f_dt => hba1c_l_dt - hba1c_f_dt};\n            \n            dspan_y : { dspan>0 => ceil(dspan/365)};\n            \n            hba1c_n => eadv.lab_bld_hba1c_ngsp.dt.count();\n            \n            hba1c_graph_canvas_x : {1=1 => 350};\n            \n            hba1c_graph_canvas_y : {1=1 => 100};\n            \n            dm => rout_cd_dm_dx.cd_dm_dx.val.bind();\n            \n            \n            \n            hba1c_target_max : { . => 10};\n            hba1c_target_min : { . => 6};\n            \n            \n                       \n            hba1c_graph => eadv.lab_bld_hba1c_ngsp.val.serializedv2(round(val,0)~dt);    \n            \n            \n            hba1c_graph_y_max : {. => hba1c_max_val};\n            \n            hba1c_graph_y_min : {hba1c_min_val < hba1c_target_min => hba1c_min_val},{=> hba1c_target_min};\n            \n            hba1c_graph_x_scale : {. => round(hba1c_graph_canvas_x/dspan,5)};\n            \n            hba1c_graph_y_scale : { hba1c_graph_y_max > hba1c_graph_y_min => round(hba1c_graph_canvas_y/(hba1c_graph_y_max-hba1c_graph_y_min),5)},{=>round(hba1c_graph_canvas_y/10,5)};\n            \n            \n            \n                        \n            line_upper_y : {.=> 0};\n            \n            line_lower_y : {. => (hba1c_graph_y_max-hba1c_graph_y_min) * hba1c_graph_y_scale};\n            \n            line_target_upper_y : {hba1c_graph_y_min< hba1c_target_max and hba1c_graph_y_max> hba1c_target_max => (hba1c_graph_y_max-10) * hba1c_graph_y_scale};\n            \n            \n\n            \n            [[rb_id]] : { dm=1 and hba1c_n>3 and dspan>365 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "ckd_journey",
    "text": "/* Rule block to determine journey of CKD */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine journey of CKD\",\n                is_active:2\n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt :\"Get CKD status\"\n            }\n        );\n        \n        \n        rrt => rout_rrt.rrt.val.bind();\n               \n        ckd => rout_ckd.ckd.val.bind();       \n        \n        #doc(,\n            {\n                txt : \"Gather encounter procedure and careplan\"\n            }\n        );\n          \n        enc_n => eadv.[enc_op_ren,enc_op_rdu].dt.count();\n        enc_ld => eadv.[enc_op_ren,enc_op_rdu].dt.max();\n        enc_fd => eadv.[enc_op_ren,enc_op_rdu].dt.min();\n        \n        avf => eadv.caresys_3450901.dt.max();\n        \n        cp_l => eadv.careplan_h9_v1.val.lastdv();\n        \n        #doc(,\n            {\n                txt : \"Extract renal specific careplan\"\n            }\n        );\n        \n       \n        cp_ckd : {cp_l_val is not null => to_number(substr(to_char(cp_l_val),-5,1))},{=>0};\n        \n        cp_ckd_ld : {cp_l_dt is not null => cp_l_dt};\n        \n        #doc(,\n            {\n                txt :\"Gather Nursing and allied health encounters\"\n            }\n        );\n        \n        \n        \n        \n        edu_init => eadv.enc_op_renal_edu.dt.min().where(val=31);\n        \n        edu_rv => eadv.enc_op_renal_edu.dt.max().where(val=32);\n        \n        edu_n => eadv.enc_op_renal_edu.dt.count().where(val=31 or val=32);\n        \n        \n        dietn => eadv.enc_op_renal_edu.dt.max().where(val=61);\n        \n        sw => eadv.enc_op_renal_edu.dt.max().where(val=51);\n        \n        enc_multi : { nvl(enc_n,0)>1 =>1},{=>0};\n        \n        [[rb_id]] : { coalesce(edu_init, edu_rv,enc_fd)!? and rrt=0 => 1},{=>0};\n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Renal services interaction\",\n                desc:\"Integer [0-1] if Renal services interaction found\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ckd_diagnostics",
    "text": "/* Rule block to determine diagnostics */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine diagnostics\",\n                is_active:2\n            }\n        );\n             \n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        #doc(,\n            {\n                txt:\"Gather lab workup\"\n            }\n        );\n        \n        \n        \n        acr => eadv.lab_ua_acr._.lastdv();\n        \n                \n        ua_rbc => eadv.[lab_ua_rbc,lab_ua_poc_rbc]._.lastdv();\n        \n                \n        ua_wcc => eadv.[lab_ua_leucocytes,lab_ua_poc_leucocytes]._.lastdv();\n                \n        sflc_kappa => eadv.[lab_bld_sflc_kappa,lab_code_c332x]._.lastdv();\n        sflc_lambda => eadv.[lab_bld_sflc_lambda,lab_code_c332x]._.lastdv();\n        \n        spep => eadv.[lab_bld_spep_paraprotein,lab_code_c331n]._.lastdv();\n        \n        pr3 => eadv.[lab_bld_anca_pr3,lab_code_c314v]._.lastdv();\n        mpo => eadv.[lab_bld_anca_mpo,lab_code_c314v]._.lastdv();\n        \n        anca => eadv.[lab_code_c314v]._.lastdv();\n        \n        ana => eadv.[lab_code_316b]._.lastdv();\n        dsdna => eadv.[lab_bld_dsdna,lab_code_c331b]._.lastdv();\n        \n        c3 => eadv.lab_bld_complement_c3._.lastdv();\n        c4 => eadv.lab_bld_complement_c4._.lastdv();\n        \n        b2gpa => eadv.[lab_code_c319x]._.lastdv();\n        aca => eadv.[lab_code_c323b]._.lastdv();\n        \n        cryo => eadv.[lab_code_c327t]._.lastdv();\n        \n        gbma => eadv.[lab_code_c333n]._.lastdv();\n        \n        asot => eadv.[lab_code_s2136]._.lastdv();\n        \n        \n        ris_usk_ld => eadv.[enc_ris_usk,ris_code_uskidney,usk,icpc_u41010,enc_ris_uskidney].dt.max();\n        ris_bxk_ld => eadv.[enc_ris_bxk,lab_code_t141,ris_code_usbiokidney,bxk].dt.max();\n        \n        \n        \n        c3_pos : { nvl(c3_val,0)<0.2 and nvl(c3_val,0)>0 => 1},{=>0};\n        c4_pos : { nvl(c4_val,0)<0.2 and nvl(c4_val,0)>0 => 1},{=>0};\n        \n         \n        \n        dsdna_pos : { nvl(dsdna_val,0)>6 => 1},{=>0};\n        sflc_ratio : { nvl(sflc_lambda_val,0)>0 => round(nvl(sflc_kappa_val,0)/sflc_lambda_val,2)},{=1};\n        \n        sflc_ratio_abn : {sflc_ratio<0.26 or sflc_ratio>1.65 =>1 },{=>0};\n        \n        ua_rbc_pos : {nvl(ua_rbc_val,0)>=30 =>1},{=>0};\n        ua_wcc_pos : {nvl(ua_wcc_val,0)>=30 =>1},{=>0};\n        ua_acr_pos : {nvl(acr_val,0)>30 =>1},{=>0};\n        \n          \n        \n        ua_pos : { ua_rbc_pos=1 and ua_wcc_pos=0 and ua_acr_pos=1 =>1 },\n                { ua_rbc_pos=1 and ua_wcc_pos=1 => 2 },\n                {=>0};\n        \n        #doc(,\n            {\n                txt:\"Determine radiology (regional imaging) encounters\"\n            }\n        );\n        \n        \n        usk_null : { ris_usk_ld is null =>1},{=>0};\n        \n        #doc(,\n            {\n                txt: \"Determine renal biopsy status\"\n            }\n        );\n        \n        bxk : { ris_bxk_ld!? =>1},{=>0};  \n        \n        bxk_null : { ris_bxk_ld?  =>1},{=>0};\n        \n        canddt : {coalesce(ua_rbc_dt,spep_dt,ana_dt,dsdna_dt,anca_dt,c3_dt,asot_dt,aca_dt,b2gpa_dt,cryo_dt,ris_usk_ld,ris_bxk_ld)!? =>1},{=>0};\n        \n        canddt_gn_wu : {canddt=1 =>1},{=>0};\n        \n        canddt_bx : {canddt=1 =>1},{=>0};\n        \n        [[rb_id]] : {greatest(canddt_gn_wu,canddt_bx)>0 and ckd>0 => 1},{=>0};\n        \n        #define_attribute(\n            bxk,\n            {\n                label:\"Native kidney biopsy\",\n                desc:\"Native kidney biopsy\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ckd_complications",
    "text": "/* Rule block to determine CKD complications */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine CKD complications\",\n                is_active:2                \n            }\n        );\n                \n        #doc(,\n            {\n                txt:\"Complications including Hb low, metabolic bone, and electrolyte disturbances\",\n                cite : \"ckd_complications_ref1, ckd_complications_ref2\"\n            }\n        );        \n        \n        ckd => rout_ckd.ckd.val.bind(); \n        \n        #doc(,\n            {\n                txt:\"Haematenics\"\n            }\n        );\n        \n        \n        hb => eadv.lab_bld_hb._.lastdv().where(dt>sysdate-365);\n        \n        pth => eadv.lab_bld_pth._.lastdv().where(dt>sysdate-365);\n        \n        wcc_neut => eadv.lab_bld_wcc_neutrophils._.lastdv().where(dt>sysdate-365);\n        \n        wcc_eos => eadv.lab_bld_wcc_eosinophils._.lastdv().where(dt>sysdate-365);\n        \n        rbc_mcv => eadv.lab_bld_rbc_mcv._.lastdv().where(dt>sysdate-365);\n        \n        esa => eadv.rxnc_b03xa._.lastdv().where(dt>sysdate-365);\n        \n        b05_ld => eadv.[rxnc_b05cb,rxnc_b05xa].dt.max().where(val=1);\n        \n        #doc(,\n            {\n                txt:\"Electrolytes\"\n            }\n        );\n        \n        k => eadv.lab_bld_potassium._.lastdv().where(dt>sysdate-365);\n        \n        ca => eadv.lab_bld_calcium_corrected._.lastdv().where(dt>sysdate-365);\n        \n        phos => eadv.lab_bld_phosphate._.lastdv().where(dt>sysdate-365);\n        \n        hco3 => eadv.lab_bld_bicarbonate._.lastdv().where(dt>sysdate-365);\n        \n        alb => eadv.lab_bld_albumin._.lastdv().where(dt>sysdate-365);\n        \n        fer => eadv.lab_bld_ferritin._.lastdv().where(dt>sysdate-365);\n        \n        \n        #doc(,\n            {\n                txt:\"Determine haematenic complications\"\n            }\n        );\n        \n        \n        hb_state : { nvl(hb_val,0)>0 and nvl(hb_val,0)<100 =>1},\n                    { nvl(hb_val,0)>=100 and nvl(hb_val,0)<180 =>2},\n                    { nvl(hb_val,0)>180 =>3},\n                    {=>0};\n                    \n        mcv_state : { hb_state=1 and nvl(rbc_mcv_val,0)>0 and nvl(rbc_mcv_val,0)<70 => 11 },\n                    { hb_state=1 and nvl(rbc_mcv_val,0)>=70 and nvl(rbc_mcv_val,0)<80 => 12 },\n                    { hb_state=1 and nvl(rbc_mcv_val,0)>=80 and nvl(rbc_mcv_val,0)<=100 => 20 },\n                    { hb_state=1 and nvl(rbc_mcv_val,0)>=100 => 31 },{ =>0};\n                    \n        iron_low : { hb_state=1 and nvl(fer_val,0)>0 and nvl(fer_val,0)<250 => 1},{=>0};\n        \n        thal_sig : {mcv_state=11 =>1 },{=>0};\n        \n        esa_null : { esa_dt? =>1},{=>0};\n        \n        esa_state : { esa_null=0 and esa_val=1 => 1},{ esa_null=0 and esa_val=0 => 2},{=>0};\n        \n        #doc(,\n            {\n                txt:\"Determine CKD-MBD complications\"\n            }\n        );\n        \n        alb_low : { alb_val<32 => 1},{=>0};\n        \n        phos_high : {phos_val>=2 =>1},{=>0};\n        \n        pth_high : {pth_val>=63 =>1},{=>0};\n        \n        #doc(,\n            {\n                txt:\"Determine CKD electrolyte and acid base complications\"\n            }\n        );\n        \n        \n        k_high : {k_val>=6 =>1},{=>0};      \n        \n        #doc(,\n            {\n                txt:\"Need to include bicarbonate therapy\"\n            }\n        );\n        \n        ckd_anm_no_esa : { hb_state=1 and ckd>4 and esa_state=0 =>1 },{=>0};\n        \n        hco3_low : {hco3_val<22 =>1},{=>0};\n        \n        rcm_bicarb : {hco3_low=1 and b05_ld? => 1},{=>0};\n        \n        [[rb_id]] : {ckd>=3 and greatest(hco3_low,k_high,pth_high,phos_high,alb_low)>0=> 1},{=>0};\n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"CKD complication present\",\n                desc:\"Integer [0-1] if CKD current complication present\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            pth_high,\n            {\n                label:\"Hyperphosphataemia due to CKD\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        #define_attribute(\n            phos_high,\n            {\n                label:\"Likely secondary hyperparathyroidism due to CKD\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        #define_attribute(\n            alb_low,\n            {\n                label:\"Hypoalbuminaemia in CKD\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            k_high,\n            {\n                label:\"Hyperkalaemia in CKD\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            k_high,\n            {\n                label:\"Hyperkalaemia in CKD\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            ckd_anm_no_esa,\n            {\n                label:\"Anaemia in CKD without ESA\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ckd_labs",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock(ckd_labs,\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n        rrt => rout_rrt.rrt.val.bind();\n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        ex_flag : { ckd=0 and rrt=0 => 1},{=>0};\n\n\n       egfr1 => eadv.lab_bld_egfr_c.val.lastdv().where(dt>sysdate-730);\n       egfr2 => eadv.lab_bld_egfr_c.val.lastdv(1).where(dt>sysdate-730);\n       egfr3 => eadv.lab_bld_egfr_c.val.lastdv(2).where(dt>sysdate-730);\n       \n       creat1 => eadv.lab_bld_creatinine.val.lastdv().where(dt>sysdate-730);\n       creat2 => eadv.lab_bld_creatinine.val.lastdv(1).where(dt>sysdate-730);\n       creat3 => eadv.lab_bld_creatinine.val.lastdv(2).where(dt>sysdate-730);\n       \n       uacr1 => eadv.lab_ua_acr.val.lastdv().where(dt>sysdate-730);\n       uacr2 => eadv.lab_ua_acr.val.lastdv(1).where(dt>sysdate-730);\n       uacr3 => eadv.lab_ua_acr.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n      \n       sodium1 => eadv.lab_bld_sodium.val.lastdv().where(dt>sysdate-730);\n       sodium2 => eadv.lab_bld_sodium.val.lastdv(1).where(dt>sysdate-730);\n       sodium3 => eadv.lab_bld_sodium.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       potassium1 => eadv.lab_bld_potassium.val.lastdv().where(dt>sysdate-730);\n       potassium2 => eadv.lab_bld_potassium.val.lastdv(1).where(dt>sysdate-730);\n       potassium3 => eadv.lab_bld_potassium.val.lastdv(2).where(dt>sysdate-730);\n       \n       \n       bicarb1 => eadv.lab_bld_bicarbonate.val.lastdv().where(dt>sysdate-730);\n       bicarb2 => eadv.lab_bld_bicarbonate.val.lastdv(1).where(dt>sysdate-730);\n       bicarb3 => eadv.lab_bld_bicarbonate.val.lastdv(2).where(dt>sysdate-730);\n       \n       calcium1 => eadv.lab_bld_calcium_corrected.val.lastdv().where(dt>sysdate-730);\n       calcium2 => eadv.lab_bld_calcium_corrected.val.lastdv(1).where(dt>sysdate-730);\n       calcium3 => eadv.lab_bld_calcium_corrected.val.lastdv(2).where(dt>sysdate-730);\n       \n       magnesium1 => eadv.lab_bld_magnesium.val.lastdv().where(dt>sysdate-730);\n       magnesium2 => eadv.lab_bld_magnesium.val.lastdv(1).where(dt>sysdate-730);\n       magnesium3 => eadv.lab_bld_magnesium.val.lastdv(2).where(dt>sysdate-730);\n       \n       phos1 => eadv.lab_bld_phosphate.val.lastdv().where(dt>sysdate-730);\n       phos2 => eadv.lab_bld_phosphate.val.lastdv(1).where(dt>sysdate-730);\n       phos3 => eadv.lab_bld_phosphate.val.lastdv(2).where(dt>sysdate-730);\n       \n       pth1 => eadv.lab_bld_pth._.lastdv().where(dt>sysdate-730);\n       pth2 => eadv.lab_bld_pth._.lastdv(1).where(dt>sysdate-730);\n       pth3 => eadv.lab_bld_pth._.lastdv(2).where(dt>sysdate-730);\n       \n       hb1 => eadv.lab_bld_hb.val.lastdv().where(dt>sysdate-730);\n       hb2 => eadv.lab_bld_hb.val.lastdv(1).where(dt>sysdate-730);\n       hb3 => eadv.lab_bld_hb.val.lastdv(2).where(dt>sysdate-730);\n       \n       wcc_n1 => eadv.lab_bld_wcc_neutrophils.val.lastdv().where(dt>sysdate-730);\n       wcc_e1 => eadv.lab_bld_eosinophils.val.lastdv().where(dt>sysdate-730);\n       wcc_l1 => eadv.lab_bld_lymphocytes.val.lastdv().where(dt>sysdate-730);\n       \n       plt1 => eadv.lab_bld_platelets.val.lastdv().where(dt>sysdate-730);\n       \n       ferritin1 => eadv.lab_bld_ferritin.val.lastdv().where(dt>sysdate-730);\n       ferritin2 => eadv.lab_bld_ferritin.val.lastdv(1).where(dt>sysdate-730);\n       ferritin3 => eadv.lab_bld_ferritin.val.lastdv(2).where(dt>sysdate-730);\n       \n       tsat1 => eadv.lab_bld_tsat._.lastdv().where(dt>sysdate-730);\n       tsat2 => eadv.lab_bld_tsat._.lastdv(1).where(dt>sysdate-730);\n       tsat3 => eadv.lab_bld_tsat._.lastdv(2).where(dt>sysdate-730);\n       \n       crp1 => eadv.lab_bld_crp._.lastdv().where(dt>sysdate-730);\n       crp2 => eadv.lab_bld_crp._.lastdv(1).where(dt>sysdate-730);\n       crp3 => eadv.lab_bld_crp._.lastdv(2).where(dt>sysdate-730);\n       \n       [[rb_id]] : {ex_flag=0 => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "ckd_coded_dx",
    "text": "/*  Evaluate existing coded ckd diagnoses  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Evaluate existing coded ckd diagnoses\",\n                is_active:2\n            }\n        );\n        \n        #doc(,\n            {\n                txt : \"Gather ICPC2+ coding from EHR\"\n            }\n        );\n        \n        \n        u88_att => eadv.[\n                            icpc_u88j91,\n                            icpc_u88j92,\n                            icpc_u88j93,\n                            icpc_u88j94,\n                            icpc_u88j95,\n                            icpc_u88j96\n                        ].att.last();\n        \n        u88_dt => eadv.[icpc_u88j91,icpc_u88j92,icpc_u88j93,icpc_u88j94,icpc_u88j95,icpc_u88j96].dt.last();\n        \n        u99_att => eadv.[\n                            icpc_u99035,\n                            icpc_u99036,\n                            icpc_u99037,\n                            icpc_u99043,\n                            icpc_u99044,\n                            icpc_u99038,\n                            icpc_u99039\n                        ].att.last();\n        \n        u99_dt => eadv.[icpc_u99035,icpc_u99036,icpc_u99037,icpc_u99043,icpc_u99044,icpc_u99038,icpc_u99039].dt.last();\n        \n        u99f : { u99_att!? => to_number(substr(u99_att,-2))};\n        \n        u99v :  { u99f=35 => 1},\n                { u99f=36 => 2},\n                { u99f=37 => 3},\n                { u99f=43 => 3},\n                { u99f=44 => 4},\n                { u99f=38 => 5},\n                { u99f=39 => 6},\n                {=> 0};\n        \n        u88v : { u88_att!? => to_number(substr(u88_att,-1))},{=>0};\n        \n        n18_att => eadv.[icd_n18_1,icd_n18_2,icd_n18_3,icd_n18_4,icd_n18_5].att.last();\n        \n        n18v : {. => to_number(substr(n18_att,-1))},{=>0};\n        \n        \n        \n        [[rb_id]] : { u99_dt > u88_dt => u99v },{ u88_dt > u99_dt => u88v},{ => greatest(u88v,u99v)};\n        \n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Existing coded ckd diagnoses\"\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ckd_egfr_metrics",
    "text": "/* Rule block to Calculate egfr metrics */\n        \n          #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to Calculate egfr metrics\",\n                is_active:2                \n            }\n        );\n        \n        \n                \n        #doc(,\n            {\n                txt : \"Calculate egfr metrics\"\n            }\n        );\n        \n        #doc(,\n            {\n                txt : \"Gather last first and penultimate within 3-12 month windows with cardinality\"\n            }\n        );\n        \n        \n        egfr_l => eadv.lab_bld_egfr_c._.lastdv();\n        \n        egfr_l1 => eadv.lab_bld_egfr_c._.lastdv().where(dt<egfr_l_dt-90 and dt>egfr_l_dt-365);\n        \n        egfr_l1_mu => eadv.lab_bld_egfr_c.val.avg().where(dt<egfr_l_dt-90 and dt>egfr_l_dt-365);\n        \n        \n        \n        egfr_l2 => eadv.lab_bld_egfr_c._.lastdv().where(dt < egfr_l_dt-365);\n        \n        egfr_f => eadv.lab_bld_egfr_c.val.firstdv();\n        \n        egfr_outdated:{ (sysdate-egfr_l_dt>730) =>1},{=>0};\n        \n        \n        #doc(,{\n                txt : \"Check for 30 day egfr assumption violation with a threshold of 20% change between last and 30 days avg\"\n        });\n        \n        egfr_30_n2 => eadv.lab_bld_egfr_c.val.count().where(dt>egfr_l_dt-30);\n        egfr_30_mu => eadv.lab_bld_egfr_c.val.avg().where(dt>egfr_l_dt-30);\n        \n        egfr_30_qt : {egfr_30_n2>=2 => round(egfr_l_val/egfr_30_mu,2)};\n        \n        asm_viol_30 : {nvl(egfr_30_qt,1)>1.2 or nvl(egfr_30_qt,1)<0.8  => 1},{=> 0};\n        \n        #doc(,{\n                txt : \"L1 average and 30 day average ratio to determine true 1y baseline egfr\"\n        });\n        \n        l1_30_qt : { egfr_30_mu>0 => round(egfr_l1_mu/egfr_30_mu,2) };\n        \n        egfr_base : { l1_30_qt > 2 => egfr_l1_val},{=> egfr_l_val};\n\n        #doc(,{\n                txt : \"Check for 1 year egfr assumption violation with absolute 20 units change\"\n        });\n        \n        egfr_1y_delta : {egfr_l1_val!? => egfr_l_val-egfr_l1_val};\n        \n        asm_viol_1y : {abs(egfr_1y_delta)>20 => 1},{=> 0};\n        \n        \n        #doc(,{\n                txt : \"Composite Assumption violation \"\n        });\n        \n        g_asm_viol_ex : { asm_viol_1y=1 or asm_viol_30=1 =>0},{=>1};\n               \n        #doc(,{\n                txt : \"calculate egfr slope and related metrics\"\n        });\n\n        \n        \n        egfr_max => eadv.lab_bld_egfr_c._.maxldv();\n        \n        egfr_ld_max_n => eadv.lab_bld_egfr_c.dt.count(0).where(dt>egfr_max_dt and dt < egfr_l_dt);\n        \n        #doc(,\n            {\n                txt : \"Slope between last and last maximum value assuming last max represents baseline\"\n            }\n        );\n        \n        \n        \n        egfr_slope2 : {egfr_l_dt > egfr_max_dt => round((egfr_l_val-egfr_max_val)/((egfr_l_dt-egfr_max_dt)/365),2)};\n        \n        egfr_decline : {egfr_l_dt - egfr_max_dt >365 and egfr_ld_max_n >2 and egfr_max_val - egfr_l_val>=20 => 1},{=>0};\n        \n        egfr_rapid_decline : { egfr_decline=1 and egfr_slope2<-10 =>1},{=>0};\n        \n        \n        \n        \n        #doc(,{\n                txt : \"Check for 90 day egfr persistence\"\n        });\n        \n        \n        g_pers : { l1_30_qt<2 and egfr_l1_val<90 and egfr_l_val<60 => 1},{ egfr_l2_val<90 and egfr_l_val<60 =>1},{=>0};\n        \n        #doc(,{\n                txt : \"Check for 1y egfr progression\"\n        });\n        \n        ckd_prog : { egfr_l2_val!? =>1},{=>0};\n   \n        l_l2_delta : { egfr_l2_val!? => egfr_l_val-egfr_l2_val};\n        \n        g_stage_prog : {l_l2_delta < -15 =>1},{=>0};\n\n        #doc(,\n            {\n                txt : \"Apply KDIGO 2012 staging\",\n                cite: \"ckd_ref1, ckd_ref2\"\n            }\n        );\n        \n        \n        \n        [[rb_id]]:  {egfr_base>=90 => 1},\n                {egfr_base<90 AND egfr_base>=60 => 2},\n                {egfr_base<60 AND egfr_base>=45 => 3},\n                {egfr_base<45 AND egfr_base>=30 => 4},\n                {egfr_base<30 AND egfr_base>=15 => 5},\n                {egfr_base<15 => 6},\n                {=>0};",
    "is_active": true
  },
  {
    "name": "ckd_uacr_metrics",
    "text": "/* Rule block to Calculate uacr metrics */\n        \n          #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to Calculate uacr metrics\",\n                is_active:2\n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt : \"calculate uacr metrics\"\n            }\n        );\n        \n       \n        acr_l => eadv.lab_ua_acr._.lastdv();\n        \n        acr_max_l => eadv.lab_ua_acr._.maxldv();\n        \n        acr_3_n => eadv.lab_ua_acr.dt.count().where(val >3);\n        \n        acr_n => eadv.lab_ua_acr.dt.count();\n        \n        sigma_l_max : {  acr_l_dt> acr_max_l_dt and acr_max_l_val>0 => round(acr_l_val/acr_max_l_val,2)};\n        \n        sigma_3n_n : {  coalesce(acr_n,0)>0 => round(acr_3_n/acr_n,2)};\n        \n        acr_outdated : {sysdate-acr_l_dt > 730 =>1},{=>0};\n        \n        acr_past_pers_flag : { acr_l_val<3 and sigma_3n_n>0 and acr_3_n>1 => 1},{=>0};\n        \n        acr_past_singular_flag : {acr_l_val<3 and sigma_3n_n>0 and acr_3_n=1 =>1},{=>0};\n        \n        acr_decline_flag : {sigma_l_max<0.75 and acr_max_l_val>=3 =>1},{=>0};\n        \n        \n        \n        #doc(,{\n                txt : \"check for uACR persistence based on KDIGO persistence definition \"\n        });\n        \n        \n        acr_1m_v3_n => eadv.lab_ua_acr.val.count().where(dt<acr_l_dt-90 and val>=3);\n        \n        /*\n        affects performance\n        \n        acr_1m_v30_n => eadv.lab_ua_acr.val.count().where(dt<acr_l_dt-90 and val>=30);\n        \n        acr_1m_v300_n => eadv.lab_ua_acr.val.count().where(dt<acr_l_dt-90 and val>=300);\n        */\n        a_pers : {coalesce(acr_1m_v3_n,0)>0 => 1},{=>0};\n        \n        #doc(,{\n            txt : \"check for uACR assumption violation\"\n        });\n        \n        u_leuc => eadv.[lab_ua_poc_leucocytes,lab_ua_leucocytes].dt.lastdv().where(dt > acr_l_dt-14 and dt < acr_l_dt+14);\n        \n        a_asm_viol_ex : { u_leuc_val=0 =>1},{=>0};\n        \n        #doc(,{\n            txt : \"uACR criteria not otherwise met\"\n        });\n        \n        acr_nom_crit : { a_asm_viol_ex=1 and (acr_past_pers_flag=1 or acr_past_singular_flag=1) =>1},{=>0};\n        \n        #doc(,{\n                txt : \"Apply KDIGO 2012 staging\",\n                cite: \"ckd_ref1, ckd_ref2\"\n        });\n        \n            \n        [[rb_id]]: {acr_l_val<3 => 1},\n                {acr_l_val<30 AND acr_l_val>=3 => 2},\n                {acr_l_val<300 AND acr_l_val>=30 => 3},\n                {acr_l_val>300 => 4},{=>0};",
    "is_active": true
  },
  {
    "name": "ckd_access",
    "text": "/* Rule block to stage CKD */\n        \n          #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to stage CKD\",\n                is_active:2\n                \n            }\n        );\n        \n       #doc(,\n            {\n                txt : \"Access formation\"\n            }\n        );\n        \n        avf_proc => eadv.[caresys_3450901,caresys_3451200,caresys_3451800].dt.max();\n        \n        avf_icpc => eadv.icpc_k99049.dt.max();        \n                \n        avf_icd => eadv.icd_z49_0.dt.max();        \n        \n        avf : { coalesce(avf_proc,avf_icd,avf_icpc)!?  =>1},{=>0};\n        \n        avf_dt : { coalesce(avf_proc,avf_icd,avf_icpc)!? => least_date(avf_proc,avf_icd,avf_icpc)};\n        \n        [[rb_id]] :{ .=> avf};\n                \n        #define_attribute(\n            avf,\n            {\n                label:\"Prevalent arteriovenous fistula for haemodialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "engmnt_renal",
    "text": "/* Rule block to assess encounters with renal */\n        \n          #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to assess encounters with renal\",\n                is_active:2\n                \n            }\n        );\n        \n        #doc(,{\n                txt : \"Referral from primary care for renal\"\n        });\n        \n        ref_ren_n => eadv.[ref_nephrologist,icpc_u67004].dt.count();       \n        ref_ren_ld => eadv.[ref_nephrologist,icpc_u67004].dt.max();\n        \n        ref_renal : { coalesce(ref_ren_n,0)>0 =>1},{=>0};\n        \n        #doc(,{\n                txt : \" Encounters with specialist services\"\n        });\n        \n        enc_n => eadv.[enc_op_ren%,enc_op_rdu%,enc_op_med_rlp%].dt.count();\n        enc_ld => eadv.[enc_op_ren%,enc_op_rdu%,enc_op_med_rlp%].dt.max();\n        enc_fd => eadv.[enc_op_ren%,enc_op_rdu%,enc_op_med_rlp%].dt.min();\n        \n        enc_ld_1y => eadv.[enc_op_ren%,enc_op_rdu%,enc_op_med_rlp%].dt.max().where(dt>sysdate-365);\n        \n        enc_renal : { coalesce(enc_n,0)>0 =>1},{=>0};\n        \n        enc_renal_1y :  {enc_ld_1y!? =>1},{=>0};\n        \n        enc_null : { coalesce(enc_n,0)=0 =>1},{=>0};\n        \n        \n        [[rb_id]] : { ref_renal>0 or enc_renal>0 => 1},{=>0};\n        \n        \n         #define_attribute(\n            enc_renal,\n            {\n                label:\"Encounter with renal services\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        #define_attribute(\n            ref_renal,\n            {\n                label:\"Renal referral from primary care\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ckd_careplan",
    "text": "/* Rule block to assess careplan */\n        \n          #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to assess careplan\",\n                is_active:2\n                \n            }\n        );\n        \n       #doc(,\n            {\n                txt : \"Gather careplan info and extract CKD specific component\"\n            }\n        );\n        \n        cp_l => eadv.careplan_h9_v1.val.lastdv();\n        \n        phc => rout_dmg_source.phc_1.val.bind();\n               \n        is_pcis : { phc=1 =>1},{=>0};\n        \n        cp_ckd_val : {cp_l_val!? => to_number(substr(to_char(cp_l_val),-5,1))},{=>0};\n        \n        cp_ckd_ld : {cp_l_dt!? => cp_l_dt};\n        \n        #doc(,{\n                txt : \"Supportive care\"\n        });\n        \n        rsc_ld => eadv.icpc_u59011.dt.last();\n        \n        \n        rsc : {rsc_ld!? =>1},{=>0};\n        \n        ckd_careplan_doc : {. => cp_ckd_val};\n        \n        [[rb_id]] : { ckd_careplan_doc>0 or rsc=1=> 1},{=>0};\n        \n        \n         #define_attribute(\n            rsc,\n            {\n                label:\"Renal supportive care\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        #define_attribute(\n            ref_ren,\n            {\n                label:\"Renal referral from primary care\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ckd",
    "text": "/* Rule block to stage CKD */\n        \n          #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to stage CKD\",\n                is_active:2\n                \n            }\n        );\n        \n       rrt => rout_rrt.rrt.val.bind();\n       \n       hd_131_n => rout_rrt.hd_131_n.val.bind();\n       \n       #doc(,{\n                txt : \"Gather egfr metrics \"\n        });\n        \n        egfr_l_val => rout_ckd_egfr_metrics.egfr_l_val.val.bind();\n        egfr_l_dt => rout_ckd_egfr_metrics.egfr_l_dt.val.bind();\n        \n        egfr_outdated => rout_ckd_egfr_metrics.egfr_outdated.val.bind();\n        \n        egfr_decline => rout_ckd_egfr_metrics.egfr_decline.val.bind();\n        egfr_rapid_decline => rout_ckd_egfr_metrics.egfr_rapid_decline.val.bind();\n        egfr_slope2 => rout_ckd_egfr_metrics.egfr_slope2.val.bind();\n        \n        \n        #doc(,{\n                txt : \"Check for egfr and uacr assumption violation exclusion \"\n        });\n        \n        \n        g_asm_viol_ex => rout_ckd_egfr_metrics.g_asm_viol_ex.val.bind();\n               \n        a_asm_viol_ex => rout_ckd_uacr_metrics.a_asm_viol_ex.val.bind();\n        \n        asm_viol_ex : { g_asm_viol_ex=1 and a_asm_viol_ex=1 =>1},{=>0};\n        \n        #doc(,{\n                txt : \"Gather uacr metrics\"\n        });\n        \n       \n        acr_l_dt => rout_ckd_uacr_metrics.acr_l_dt.val.bind();\n        \n        acr_l_val => rout_ckd_uacr_metrics.acr_l_val.val.bind();\n        \n        \n        acr_outdated => rout_ckd_uacr_metrics.acr_outdated.val.bind();\n        \n        acr_past_pers_flag => rout_ckd_uacr_metrics.acr_past_pers_flag.val.bind();\n        \n        acr_past_singular_flag => rout_ckd_uacr_metrics.acr_past_singular_flag.val.bind();\n        \n        acr_decline_flag => rout_ckd_uacr_metrics.acr_decline_flag.val.bind();\n        \n        acr_nom_crit => rout_ckd_uacr_metrics.acr_nom_crit.val.bind();\n        \n        #doc(,{\n                txt : \"check for eGFR and uACR persistence based on KDIGO persistence definition \"\n        });\n        \n        g_pers => rout_ckd_egfr_metrics.g_pers.val.bind();\n        \n        a_pers => rout_ckd_uacr_metrics.a_pers.val.bind();\n        \n        pers : {greatest(g_pers,a_pers)>0 => 1},{=>0};\n        \n        #doc(,{\n                txt : \"Evidence of renal injury satisfying ckd without G and A\"\n        });\n        \n        c_gn => rout_ckd_c_gn.ckd_c_gn.val.bind();\n        \n        c_tid => rout_ckd_c_tid.ckd_c_tid.val.bind();\n        \n        c_rnm => rout_ckd_c_rnm.ckd_c_rnm.val.bind();\n        \n        c_crit : { greatest(c_gn,c_tid,c_rnm)>0 =>1},{=>0};\n        \n        #doc(,{\n                txt : \"Apply KDIGO 2012 staging\",\n                cite: \"ckd_ref1, ckd_ref2\"\n        });\n        \n        \n        \n        cga_g:  {egfr_l_val>=90 AND rrt=0 => `G1`},\n                {egfr_l_val<90 AND egfr_l_val>=60  AND rrt=0 => `G2`},\n                {egfr_l_val<60 AND egfr_l_val>=45  AND rrt=0 => `G3A`},\n                {egfr_l_val<45 AND egfr_l_val>=30  AND rrt=0 => `G3B`},\n                {egfr_l_val<30 AND egfr_l_val>=15  AND rrt=0 => `G4`},\n                {egfr_l_val<15 AND rrt=0 => `G5`},\n                {=>`NA`};\n                \n                \n        cga_g_val:  {egfr_l_val>=90 AND rrt=0 => 1},\n                {egfr_l_val<90 AND egfr_l_val>=60  AND rrt=0 => 2},\n                {egfr_l_val<60 AND egfr_l_val>=45  AND rrt=0 => 3},\n                {egfr_l_val<45 AND egfr_l_val>=30  AND rrt=0 => 4},\n                {egfr_l_val<30 AND egfr_l_val>=15  AND rrt=0 => 5},\n                {egfr_l_val<15 AND rrt=0 => 6},\n                {=>0};\n            \n        cga_a: {acr_l_val<3 => `A1`},\n                {acr_l_val<30 AND acr_l_val>=3 => `A2`},\n                {acr_l_val<300 AND acr_l_val>=30 => `A3`},\n                {acr_l_val>300 => `A4`},{=>`NA`};\n                \n        cga_a_val: {acr_l_val<3 => 1},\n                {acr_l_val<30 AND acr_l_val>=3 => 2},\n                {acr_l_val<300 AND acr_l_val>=30 => 3},\n                {acr_l_val>300 => 4},{=>0};\n        \n        #doc(,{\n                txt : \"KDIGO 2012 string composite attribute\"\n        });\n        \n        \n        \n                \n        ckd_stage_val :{cga_g_val=1 and (cga_a_val>1 or c_crit=1 or acr_nom_crit=1) => 1},\n                {cga_g_val=2 and (cga_a_val>1 or c_crit=1 or acr_nom_crit=1) => 2},\n                {cga_g_val=3 => 3},\n                {cga_g_val=4 => 4},\n                {cga_g_val=5 => 5},\n                {cga_g_val=6 => 6},\n                {=> 0};\n            \n        ckd_stage :{ ckd_stage_val=1 => `1`},\n                {ckd_stage_val=2 => `2`},\n                {ckd_stage_val=3 => `3A`},\n                {ckd_stage_val=4 => `3B`},\n                {ckd_stage_val=5 => `4`},\n                {ckd_stage_val=6 => `5`},\n                {ckd_stage_val=0=> null};\n            \n        #doc(,\n            {\n                txt : \"KDIGO 2012 numeric composite attribute\"\n            }\n        );\n        \n        \n        [[rb_id]] : {. => ckd_stage_val};\n        \n        egfr_current : { egfr_l_dt > sysdate-730 =>1},{=>0};\n        \n        assert_level : {. => 100000 + pers*10000 + g_asm_viol_ex*1000 + egfr_current * 100 + acr_nom_crit * 10};\n        \n        mm2 : {assert_level<111100=>1},{=>0};\n        \n        \n        esrd_risk : { cga_g_val >= 5 or (cga_g_val >=4 and cga_a_val >= 2)  or (cga_g_val >=3 and cga_a_val >=3 ) => 4},\n                    { cga_g_val >= 4 or (cga_g_val >=3 and cga_a_val >= 2)  or (cga_g_val >=1 and cga_a_val >=3 ) => 3},\n                    { (cga_g_val = 3) or (cga_g_val>=1 and cga_a_val=2)  => 2},\n                    { ckd>=1 => 1};\n        \n        #doc(,\n            {\n                txt : \"KDIGO 2012 binary attributes\"\n            }\n        );\n        \n                \n        ckd_stage_1 : { ckd=1 => 1},{=>0}; \n        \n        ckd_stage_2 : { ckd=2 => 1},{=>0};\n        \n        ckd_stage_3a : { ckd=3 => 1},{=>0};\n        \n        ckd_stage_3b : { ckd=4 => 1},{=>0};\n        \n        ckd_stage_4 : { ckd=5 => 1},{=>0};\n        \n        ckd_stage_5 : { ckd=6 => 1},{=>0};\n             \n        #define_attribute(\n            ckd_stage,\n            {\n                label:\"CKD stage as string as per KDIGO 2012\",\n                desc:\"VARCHAR2 corresponding to stage. eg.3A\",\n                is_reportable:0,\n                type:1\n            }\n        );\n        \n        #define_attribute(\n            ckd,\n            {\n                label:\"CKD stage as number as per KDIGO 2012\",\n                desc:\"Integer [1-6] corresponding to ordinal value\",\n                is_reportable:0,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            ckd_stage_1,\n            {\n\n                label:\"CKD stage 1\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            ckd_stage_2,\n            {\n                label:\"CKD stage 2\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            ckd_stage_3a,\n            {\n                label:\"CKD stage 3A\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            ckd_stage_3b,\n            {\n                label:\"CKD stage 3B\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            ckd_stage_4,\n            {\n                label:\"CKD stage 4\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            ckd_stage_5,\n            {\n                label:\"CKD stage 5\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt : \"Gather careplan info and extract CKD specific component\"\n            }\n        );\n        \n        \n        \n        cp_ckd_val => rout_ckd_careplan.cp_ckd_val.val.bind();\n        \n        cp_ckd_ld => rout_ckd_careplan.cp_ckd_ld.val.bind();\n        \n        is_pcis => rout_ckd_careplan.is_pcis.val.bind();\n        \n        rsc_ld => rout_ckd_careplan.rsc_ld.val.bind();\n        \n        \n        \n        #doc(,\n            {\n                txt : \"Gather ICPC2+ coding from EHR\"\n            }\n        );\n        \n        \n        dx_ckd => rout_ckd_coded_dx.ckd_coded_dx.val.bind();\n        \n        dx_ckd_icd => rout_ckd_coded_dx.n18v.val.bind();\n        \n        dx_ckd_stage :{dx_ckd=1 => `1`},\n                {dx_ckd=2 => `2`},\n                {dx_ckd=3 => `3A`},\n                {dx_ckd=4 => `3B`},\n                {dx_ckd=5 => `4`},\n                {dx_ckd=6 => `5`},\n                {dx_ckd=0 => `0`};\n                \n        #define_attribute(\n            dx_ckd,\n            {\n                label:\"CKD stage on EHR as per ICPC2+ Code\",\n                desc:\"Integer\",\n                is_reportable:0,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            dx_ckd_stage,\n            {\n                label:\"CKD stage on EHR as per ICPC2+ Code\",\n                desc:\"VARCHAR2 corresponding to stage. eg 3A\",\n                is_reportable:0,\n                type:1\n            }\n        );\n        \n        dx_ckd_diff :{abs(ckd-dx_ckd)>=2 => 1 },{=>0};\n        \n        #define_attribute(\n            dx_ckd_diff,\n            {\n                label:\"Difference between coded and calculated\",\n                desc:\"Algebraic difference between numeric stages \",\n                is_reportable:0,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            assert_level,\n            {\n                label:\"Composite indicating persistence and no assumption violation\",\n                desc:\"Composite number\",\n                is_reportable:0,\n                type:2\n            }\n        );\n        \n        #doc(,\n            {\n                txt : \" Encounters with specialist services\"\n            }\n        );\n        \n        \n        ref_ld => rout_engmnt_renal.ref_ren_ld.val.bind();\n        \n        enc_ld => rout_engmnt_renal.enc_ld.val.bind();\n        \n        enc_n => rout_engmnt_renal.enc_n.val.bind();\n        \n        enc_fd => rout_engmnt_renal.enc_fd.val.bind();\n        \n        #doc(,\n            {\n                txt : \"Access formation\"\n            }\n        );\n        \n        \n        \n        cp_mis :{cp_ckd_val>0 and (ckd - cp_ckd_val)>=2 => 1},{=>0};\n        \n        avf => rout_ckd_access.avf.val.bind();\n        avf_dt => rout_ckd_access.avf_dt.val.bind();\n        \n        \n        #define_attribute(\n            cp_mis,\n            {\n                label:\"Misclassifcation occured\",\n                desc:\"Integer [0-1]\",\n                is_reportable:0,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            avf_has,\n            {\n                label:\"AVF present\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        mm1 : { ckd>3 and coalesce(hd_131_n,0)>0 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "graph_tac",
    "text": "/* Algorithm to plot tac levels  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to plot tac levels\",\n                    is_active:2\n                    \n                    \n                }\n            );\n            \n            tx => rout_rrt.tx_current.val.bind();\n            \n            \n            tx_dt => rout_rrt.tx_dt.val.bind();\n            \n            tac => rout_rrt_tx.tac.val.bind();\n            \n            g_max => eadv.lab_bld_tdm_tac._.maxldv().where(dt > tx_dt);\n            \n            g_min => eadv.lab_bld_tdm_tac._.minldv().where(dt > tx_dt);\n                        \n            g_n => eadv.lab_bld_tdm_tac.dt.count().where(dt > tx_dt);\n            \n            g_graph => eadv.lab_bld_tdm_tacrolimus._.serializedv2(round(val,1)~dt);\n            \n            \n            g_graph_canvas_x : { . => 350};\n            \n            g_graph_canvas_y : { . => 100};\n            \n            \n            g_target_max : { . => 11.0};\n            g_target_min : { . => 3.0};\n            \n            \n                       \n                \n            \n            \n            g_graph_y_max : {. => greatest(g_max_val,g_target_max)};\n            \n            g_graph_y_min : {. => least(g_min_val,g_target_min)};\n            \n            g_graph_x_scale : {. => round(g_graph_canvas_x/730,5)};\n            \n            g_graph_y_scale : { . => round(g_graph_canvas_y/(g_graph_y_max-g_graph_y_min),5)};\n            \n                        \n            line_upper_y : {.=> 0};\n            \n            line_lower_y : {. => 100};\n            \n            \n            line_target_upper_y : { g_max_val > g_target_max => (g_max_val - g_target_max) * g_graph_y_scale },{ => 0 };\n            \n            line_target_lower_y : { g_min_val < g_target_min => (g_target_min - g_min_val) * g_graph_y_scale },{ => g_graph_canvas_y };\n            \n            canddt : { tx=1 =>1},{=>0};\n            \n            [[rb_id]] : { canddt=1 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "at_risk",
    "text": "/* Ruleblock to assess at risk population for CKD */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess [[rb_id]]\",                \n                is_active:2\n                \n            }\n        );\n        \n        #doc(,\n                {\n                    txt: \"Risk factor assessment for CKD\",\n                    cite: \"at_risk_ckd_ref1, at_risk_ckd_ref2, at_risk_ckd_ref3\"\n                }\n            ); \n        \n        ld => eadv.[icd_%,icpc_%,lab_%,rxnc_%,obs_%,mbs_%].dt.max();\n        \n        is_active : { ld > sysdate-730 =>1 },{=>0};\n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        dm => rout_cd_dm_dx.dm.val.bind();\n        \n        htn => rout_cd_htn.cd_htn.val.bind();\n        \n        cad => rout_cd_cardiac_cad.cad.val.bind();\n        cva => rout_cd_cardiac_cad.cva.val.bind();\n        pvd => rout_cd_cardiac_cad.pvd.val.bind();\n        \n        aki_stage => rout_tg4100.akin_stage.val.bind();\n        \n        cr_max_ld => rout_tg4100.cr_max_ld_1y.val.bind();\n        \n        cvd : { greatest(cad,cva,pvd)>0 =>1},{=>0};\n        \n        obesity => rout_cd_obesity.cd_obesity.val.bind();\n        \n        \n        \n        \n        aki_icd_ld => eadv.[icd_n17%].dt.max();\n        \n        \n        aki : {aki_icd_ld!? or aki_stage>1 =>1},{=>0};\n        \n        aki_ld : { coalesce(aki_icd_ld, cr_max_ld)!? => least_date(aki_icd_ld, cr_max_ld)};\n        \n        smoker => eadv.status_smoking_h2_v1.val.last().where(val>=29);\n        \n        \n        dod => rout_dmg.dod.val.bind();\n    \n        #doc(,\n            {\n                txt:\"Check if active\"\n            }\n        );\n       \n        \n        \n        /* obs_ld => eadv.[obs_%].dt.max().where(dt > sysdate-730);*/\n        \n        is_active_2y : {is_active=1 and dod? => 1},{=>0};\n              \n        \n        \n        #doc(,\n            {\n                txt:\"Determine at risk for CKD, and active cohort\"\n            }\n        );\n        \n            \n        [[rb_id]] : {ckd=0 and rrt=0 =>1},{=>0};\n        \n        active : {. => is_active_2y};\n        \n        \n        \n        tkc_cohort : { greatest(ckd,rrt,at_risk)>0 and active=1 =>1},{=>0};\n        \n        \n        #doc(,\n            {\n                txt:\"Determine if renal screened\"\n            }\n        );\n        \n        \n        egfr_ld => eadv.lab_bld_egfr.dt.max().where(dt > sysdate-365);\n        \n        acr_ld => eadv.lab_ua_acr.dt.max().where(dt > sysdate-365);\n        \n        bp_ld => eadv.obs_bp_systolic.dt.max().where(dt > sysdate-365);\n        last_bp_val => eadv.obs_bp_systolic.val.last().where(dt > sysdate-365);\n        \n        hba1c_ld => eadv.lab_bld_hba1c_ngsp.dt.max().where(dt > sysdate-365);\n        last_hba1c_val => eadv.lab_bld_hba1c_ngsp.val.last().where(dt > sysdate-365);\n        \n        screen_egfr : { egfr_ld!? =>1},{=>0};\n        \n        screen_acr : { acr_ld!? =>1},{=>0};\n        \n        screen_bp : { bp_ld!? =>1},{=>0};\n        \n        screen_hba1c : { hba1c_ld!? =>1},{=>0};\n        \n        screen_3 : { . => screen_egfr + screen_acr + screen_bp};\n        \n        screen_4 : { . => screen_egfr + screen_acr + screen_bp + screen_hba1c};\n        \n        #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"At risk for CKD\",\n                    is_reportable:1,\n                    type:2\n                }\n        );\n        \n        #define_attribute(\n            tkc_cohort,\n                {\n                    label:\"TKC cohort\",\n                    is_reportable:1,\n                    type:2\n                }\n        );\n        #define_attribute(\n            active,\n                {\n                    label:\"Is Active within last 2y\",\n                    is_reportable:1,\n                    type:2\n                }\n        );\n        #define_attribute(\n            smoker,\n                {\n                    label:\"Prevalent smoker\",\n                    is_reportable:1,\n                    type:2\n                }\n        );\n        #define_attribute(\n            aki,\n                {\n                    label:\"Past AKI by hospital coding\",\n                    is_reportable:1,\n                    type:2\n                }\n        );\n        \n        #define_attribute(\n            screen_egfr,\n                {\n                    label:\"screened by egfr within last 1y\",\n                    is_reportable:1,\n                    type:2\n                }\n        );\n        \n        #define_attribute(\n            screen_acr,\n                {\n                    label:\"screened by uACR within last 1y\",\n                    is_reportable:1,\n                    type:2\n                }\n        );\n        \n        #define_attribute(\n            screen_bp,\n                {\n                    label:\"screened by blood pressure within last 1y\",\n                    is_reportable:1,\n                    type:2\n                }\n        );\n        \n        #define_attribute(\n            screen_hba1c,\n                {\n                    label:\"screened by HbA1c within last 1y\",\n                    is_reportable:1,\n                    type:2\n                }\n        );\n        \n        #define_attribute(\n            screen_3,\n                {\n                    label:\"screened by blood pressure uACR and eGFR within last 1y as per recommendations\",\n                    is_reportable:1,\n                    type:2\n                }\n        );",
    "is_active": true
  },
  {
    "name": "id_uti",
    "text": "/*  This is a algorithm to identify uti  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify uti\",\n                is_active:2\n                \n            }\n        );\n        \n        uti_fd => eadv.[icd_n39%, icd_n30%,icpc_u71%].dt.min();\n        \n        uti_ld => eadv.[icd_n39%, icd_n30%,icpc_u71%].dt.max();\n        \n        uti_rec_icpc_ld => eadv.[icpc_u71015,icpc_u71014].dt.max();\n        \n        \n        [[rb_id]] : { uti_ld -uti_fd >90 or uti_rec_icpc_ld!? => 1 },{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of recurrent uti\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_rheum_sle",
    "text": "/*  This is a algorithm to identify SLE e-phenotype  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify SLE e-phenotype\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_m32_%].dt.min();\n        \n        icpc_fd => eadv.[icpc_l99056,icpc_l99065].dt.min();\n        \n        \n        \n        rxn_l04ax => eadv.[rxnc_l04ax].dt.min().where(val=1);\n        \n        rxn_p01ba => eadv.[rxnc_p01ba].dt.min().where(val=1);\n        \n        c3 => eadv.[lab_bld_complement_c3]._.lastdv().where(dt > sysdate -365);\n        c4 => eadv.[lab_bld_complement_c4]._.lastdv().where(dt > sysdate -365);\n        \n        sle_fd : { .=> least_date(icd_fd,icpc_fd)};\n        \n        [[rb_id]] : { sle_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of SLE\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_rheum_ra",
    "text": "/*  Algorithm to identify Rheumatoid Arthritis  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to identify Rheumatoid Arthritis\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_m05%].dt.min();\n        \n        icpc_fd => eadv.[icpc_l88004].dt.min();\n        \n        \n        \n        rxn_l04ax => eadv.[rxnc_l04ax].dt.min().where(val=1);\n        \n        rxn_p01ba => eadv.[rxnc_p01ba].dt.min().where(val=1);\n        \n        rxn_a07ec => eadv.[rxnc_a07ec].dt.min().where(val=1);\n        \n        op_enc_ld => eadv.[enc_op_med_rhe].dt.max();\n        \n        ra_fd : { .=> least_date(icd_fd,icpc_fd)};\n        \n        [[rb_id]] : { ra_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of Rheumatoid arthritis\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_rheum_aps",
    "text": "/*  Algorithm to identify Antiphosphlipid syndrome  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to identify Antiphosphlipid syndrome\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_d68_61%].dt.min();\n        \n        icpc_fd => eadv.[icpc_b83021].dt.min();\n\n        rxn_anticoag_dt => rout_cd_cardiac_rx.rxn_anticoag.val.bind();\n        \n        op_enc_ld => eadv.[enc_op_med_rhe].dt.max();\n        \n        aps_fd : { .=> least_date(icd_fd,icpc_fd)};\n        \n        [[rb_id]] : { aps_fd!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of Antiphosphlipid syndrome\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_rheum_gout",
    "text": "/*  Algorithm to identify Gout  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to identify Gout\",\n                is_active:2\n                \n            }\n        );\n        \n        icd_fd => eadv.[icd_m10%].dt.min();\n        \n        icpc_fd => eadv.[icpc_t92001].dt.min();\n\n        rxnc_m04aa_fd => eadv.[rxnc_m04aa].dt.min();\n        \n        rxnc_m04aa_ld => eadv.[rxnc_m04aa].dt.max().where(val=1);\n        \n        op_enc_ld => eadv.[enc_op_med_rhe].dt.max();\n        \n        gout_fd : { .=> least_date(icd_fd,icpc_fd,rxnc_m04aa_fd)};\n        \n        [[rb_id]] : { coalesce(icd_fd,icpc_fd,rxnc_m04aa_fd)!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of Gout\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "rrt_labs_euc",
    "text": "/* Rule block to gather lab tests */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to gather lab tests\",\n                is_active:2,\n                \n            }\n        );\n\n       rrt => rout_rrt.rrt.val.bind();\n             \n       sodium1 => eadv.lab_bld_sodium.val.lastdv().where(dt>sysdate-60);\n    \n       potassium1 => eadv.lab_bld_potassium.val.lastdv().where(dt>sysdate-60);\n       \n       bicarb1 => eadv.lab_bld_bicarbonate.val.lastdv().where(dt>sysdate-60);\n       \n       [[rb_id]] : {rrt=1 => 1},{=>0};",
    "is_active": true
  },
  {
    "name": "cmidx_charlson",
    "text": "/*  This is a algorithm to calculate the charlson comorbidity index  */\n        \n        #define_ruleblock([[rb_id]], {\n                description: \"This is a algorithm to calculate the charlson comorbidity index\",\n                is_active:2\n        });\n        \n        #doc(,{\n                txt:\"disease entities\"\n        });\n        \n        mi => eadv.[icd_i21%,icd_i22%,icd_25_2].dt.exists();\n        \n        chf => eadv.[icd_i09_9, icd_i11_0, icd_i13_0, icd_i13_2,icd_i25_5,icd_i42_0, \n                    icd_i42_5,icd_i42_6,icd_i42_7,icd_i42_8,icd_i42_9,\n                    icd_i43_%, icd_i50_%, icd_p29_0].dt.exists();\n        \n        pvd => eadv.[icd_i70_%, icd_i71_%, icd_i73_1, icd_i73_8, icd_i73_9, \n                    icd_i77_1, icd_i79_0, icd_i79_2, \n                    icd_k55_1, icd_k55_8, icd_k55_9, icd_z95_8, icd_z95_9].dt.exists();\n                    \n        cva => eadv.[icd_g45_%, icd_g46_%, icd_h34_%, icd_i6%].dt.exists();\n        \n        dem => eadv.[icd_f00_%,icd_f01_%,icd_f02_%,icd_f03_%, \n                    icd_f05_1, icd_g30_%, icd_g31_1].dt.exists();\n                    \n        cpd => eadv.[icd_i27_8, icd_i27_9, \n                    icd_j40_%,icd_j41_%,icd_j42_%,icd_j43_%,icd_j44_%,icd_j45_%,icd_j46_%,icd_j47_%,\n                    icd_j60_%,icd_j61_%,icd_j62_%,icd_j63_%,icd_j64_%,icd_j65_%,icd_j66_%,icd_j67_%,\n                    icd_j68_4, icd_j70_1, icd_j70_3].dt.exists();\n                    \n        rhe  => eadv.[icd_m05_%, icd_m06_%, icd_m31_5, \n                    icd_m32_%,icd_m33_%,icd_m34_%,\n                    icd_m35_1, icd_m35_3, icd_m36_0].dt.exists();\n                \n        pud => eadv.[icd_k25_%,icd_k26_%,icd_k27_%,icd_k28_%,].dt.exists();\n        \n        mld => eadv.[icd_b18_%, icd_k70_0,icd_k70_1,icd_k70_2,icd_k70_3,icd_k70_9, \n                    icd_k71_3, icd_k71_4,icd_k71_5,icd_k71_7,\n                    icd_k73_%, icd_k74_%, icd_k76_0, \n                    icd_k76_2,icd_k76_3,icd_k76_4,icd_k76_8,icd_k76_9,\n                    icd_z94_4].dt.exists();\n        \n        sld => eadv.[icd_i85_0, icd_i85_9, icd_i86_4, icd_i98_2, \n                    icd_k70_4, icd_k71_1, icd_k72_1, icd_k72_9, \n                    icd_k76_5, icd_k76_6, icd_k76_7].dt.exists();\n        \n                    \n        dmu => eadv.[icd_e10_0, icd_e10_1, icd_e10_6, icd_e10_8, icd_e10_9, \n                    icd_e11_0, icd_e11_1, icd_e11_6, icd_e11_8, icd_e11_9, \n                    icd_e12_0, icd_e12_1, icd_e12_6, icd_e12_8, icd_e12_9, \n                    icd_e13_0, icd_e13_1, icd_e13_6, icd_e13_8, icd_e13_9, \n                    icd_e14_0, icd_e14_1, icd_e14_6, icd_e14_8, icd_e14_9].dt.exists();\n        \n        \n        dmc => eadv.[icd_e10_2, icd_e10_3, icd_e10_4, icd_e10_5, icd_e10_7, \n                    icd_e11_2, icd_e11_3, icd_e11_4, icd_e11_5, icd_e11_7, \n                    icd_e12_2, icd_e12_3, icd_e12_4, icd_e12_5, icd_e12_7, \n                    icd_e13_2, icd_e13_3, icd_e13_4, icd_e13_5, icd_e13_7, \n                    icd_e14_2, icd_e14_3, icd_e14_4, icd_e14_5, icd_e14_7].dt.exists();\n                    \n        plg => eadv.[icd_g04_1, icd_g11_4, icd_g80_1, icd_g80_2, icd_g81_%, icd_g82_%, \n                    icd_g83_0,icd_g83_1,icd_g83_2,icd_g83_3,icd_g83_4,icd_g83_9].dt.exists();\n        \n        ren => eadv.[icd_i12_0, icd_i13_1, \n                    icd_n03_2, icd_n03_3,icd_n03_4, icd_n03_5,icd_n03_6,icd_n03_7,\n                    icd_n05_2,icd_n05_3,icd_n05_4,icd_n05_5,icd_n05_6,icd_n05_7,\n                    icd_n18_%, icd_n19_%, icd_n25_0, \n                    icd_z49_0,icd_z49_1,icd_z49_2,icd_z94_0, icd_z99_2].dt.exists();\n        \n        ca => eadv.[icd_c%].dt.exists();\n        \n        met => eadv.[icd_c77_%,icd_c78_%,icd_c79_%,icd_c80_%].dt.exists();\n        \n        hiv => eadv.[icd_b20_%,icd_b21_%icd_b22_%,icd_b24_%].dt.exists();\n        \n        #doc(,{\n                txt:\"apply weights and sum\"\n        });\n        \n        dmc_w : { dmc!? => dmc * 2},{=>0};\n        \n        plg_w : { plg!? => plg * 2},{=>0};\n        \n        ren_w : { ren!? => ren * 2},{=>0};\n        \n        ca_w : { ca!? => ca * 2},{=>0};\n        \n        sld_w : { sld!? => sld * 3},{=>0};\n        \n        met_w : { met!? => met * 6},{=>0};\n        \n        hiv_w : { hiv!? => hiv * 6},{=>0};\n        \n        mi_w : { mi!? => mi * 1},{=>0};\n        \n        chf_w : { chf!? => chf * 1},{=>0};\n        \n        pvd_w : { pvd!? => pvd * 1},{=>0};\n        \n        cva_w : { cva!? => cva * 1},{=>0};\n        \n        dem_w : { dem!? => dem * 1},{=>0};\n        \n        cpd_w : { cpd!? => cpd * 1},{=>0};\n        \n        pud_w : { pud!? => pud * 1},{=>0};\n        \n        rhe_w : { rhe!? => rhe * 1},{=>0};\n        \n        mld_w : { mld!? => mld * 1},{=>0};\n        \n        dmu_w : { dmu!? => dmu * 1},{=>0};    \n                    \n        [[rb_id]] : { . => dmc_w + plg_w + ren_w + ca_w + sld_w + met_w + hiv_w + mi_w + \n                        chf_w + pvd_w + cva_w + dem_w + cpd_w +pud_w + rhe_w + mld_w + dmu_w },{=>0};\n                        \n        cci_cat : {cmidx_charlson >=4 =>3 },{cmidx_charlson >=2 => 2},{=>1};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Charlson comorbidity index\"\n            }\n        );",
    "is_active": true
  },
  {
    "name": "egfr_metrics",
    "text": "/* Algorithm to compute egfr metrics  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to derive egfr metrics\",\n                    \n                    is_active:0,\n                    filter : \"select eid from rout_rrt where rrt=0\"\n                    \n                    \n                }\n            );\n            \n            \n            \n                       \n            #doc(,\n                {\n                    txt : \"Gather last count first last one before last max and min egfr\"\n                }\n            );\n            \n            egfr_n => eadv.lab_bld_egfr_c.val.count(0);\n            \n            egfr_r1 => eadv.lab_bld_egfr_c.val.firstdv();\n            \n            egfr_rn => eadv.lab_bld_egfr_c.val.lastdv();\n            \n            egfr_rn1 => eadv.lab_bld_egfr_c.val.lastdv(1);\n            \n            egfr_max => eadv.lab_bld_egfr_c.val.maxldv();\n            \n            egfr_min => eadv.lab_bld_egfr_c.val.minldv();\n            \n            egfr_3m_n2 => eadv.lab_bld_egfr_c.val.count(0).where(dt>egfr_rn_dt-30);\n            \n            egfr_3m_mu => eadv.lab_bld_egfr_c.val.avg().where(dt>egfr_rn_dt-30);\n            \n            egfr_3m_60_n => eadv.lab_bld_egfr_c.val.count(0).where(dt<egfr_rn_dt-90 and val<60);\n            \n            #doc(,\n                {\n                    txt : \"calculate ratios max/first last/min last/last-1\"\n                }\n            );\n            \n            \n            qt_r1_max : { egfr_r1_val>0 => round(egfr_max_val/egfr_r1_val,1)};\n\n            qt_rn_min : { egfr_min_val>0 => round(egfr_rn_val/egfr_min_val,1)};\n            \n            qt_rn_rn1 : { egfr_rn1_val>0 => round(egfr_rn_val/egfr_rn1_val,1)};\n            \n            \n            #doc(,\n                {\n                    txt : \"check for current vs historic\"\n                }\n            );\n            \n            cur_gap : { egfr_rn_dt!? => round((sysdate - egfr_rn_dt)/365,0) },{=> -1};\n            \n            cur_flag : { cur_gap between 0 and 2  => 1},{ =>0};\n            \n            \n            #doc(,\n                {\n                    txt : \"check for assumption violation where there is >20% variation in the last 3 months\"\n                }\n            );\n            \n\n        \n            egfr_3m_qt : {egfr_3m_n2>=2 => round(egfr_rn_val/egfr_3m_mu,2)};\n        \n            asm_viol_3m : {nvl(egfr_3m_qt,1)>1.2 or nvl(egfr_3m_qt,1)<0.8  => 1},{=> 0};\n            \n            #doc(,\n                {\n                    txt : \"check for peristence \"\n                }\n            );\n            \n\n            pers : {egfr_3m_60_n > 0 => 1},{=>0};\n            \n            \n            \n            r1_stg : { egfr_r1_val>=90 => 1},{ egfr_r1_val>=60 => 2},{ egfr_r1_val>=45 => 3},{ egfr_r1_val>=30 => 4},{ egfr_r1_val>=15 => 5},{ egfr_r1_val<15 => 6},{=>0};\n            \n            rn_stg : { egfr_rn_val>=90 => 1},{ egfr_rn_val>=60 => 2},{ egfr_rn_val>=45 => 3},{ egfr_rn_val>=30 => 4},{ egfr_rn_val>=15 => 5},{ egfr_rn_val<15 => 6},{=>0};\n            \n            rmax_stg : { egfr_max_val>=90 => 1},{ egfr_max_val>=60 => 2},{ egfr_max_val>=45 => 3},{ egfr_max_val>=30 => 4},{ egfr_max_val>=15 => 5},{ egfr_max_val<15 => 6},{=>0};\n            \n            rmin_stg : { egfr_min_val>=90 => 1},{ egfr_min_val>=60 => 2},{ egfr_min_val>=45 => 3},{ egfr_min_val>=30 => 4},{ egfr_min_val>=15 => 5},{ egfr_min_val<15 => 6},{=>0};\n        \n            \n            gap_fl : { egfr_n>1 => egfr_rn_val-egfr_r1_val};\n            \n            gap_maxl : { egfr_n>1 => egfr_rn_val-egfr_max_val};\n            \n            \n            egfr60_last => eadv.lab_bld_egfr_c.val.lastdv().where(val>60);\n            \n            p1_disc : { nvl(qt_r1_max,0)>1.5 =>1},{=>0};\n            \n            p3_disc : { nvl(qt_rn_min,0)>1.5 =>1},{=>0};\n            \n            p3_egfr45_n => eadv.lab_bld_egfr_c.val.count().where(val>45 and dt>egfr60_last_dt);\n            \n            p3pg_signal : {p3_egfr45_n>2 and egfr_rn_dt-egfr60_last_dt>=180 =>1},{=>0};\n            \n            p3rc_signal : {egfr_rn_val>20 and qt_rn_rn1>1.2 => 1},{=>0};\n            \n            p3_slope : { p3pg_signal=1 => (round((egfr_rn_val-egfr60_last_val)/(egfr_rn_dt-egfr60_last_dt),3))},{=>null};\n            \n            p3_b1 => eadv.lab_bld_egfr_c.val.regr_slope().where(dt>egfr60_last_dt);\n            \n            p3_b0 => eadv.lab_bld_egfr_c.val.regr_intercept().where(dt>egfr60_last_dt);\n            \n            p3_r2 => eadv.lab_bld_egfr_c.val.regr_r2().where(dt>egfr60_last_dt);\n            \n            px_b1 => eadv.lab_bld_egfr_c.val.regr_slope();\n            \n            px_b0 => eadv.lab_bld_egfr_c.val.regr_intercept();\n            \n            px_r2 => eadv.lab_bld_egfr_c.val.regr_r2();\n            \n            est_esrd_d : { nvl(p3_slope,0)<0 and egfr_rn_val>=5 => (5-egfr_rn_val)/p3_slope};\n\n            est_esrd_dt : { nvl(est_esrd_d,0)>0 and nvl(est_esrd_d,0)<1500 => (egfr_rn_dt + est_esrd_d)};\n            \n            est_esrd_lapsed : { sysdate>est_esrd_dt => 1};\n            \n            gap_max => eadv.lab_bld_egfr_c.val.max_neg_delta_dv();\n            \n            dspan : {1=1 => egfr_rn_dt - egfr_r1_dt };\n            \n            s1_mu => eadv.lab_bld_egfr_c.val.avg().where(dt < (egfr_rn_dt -(dspan/2)));\n            \n            s2_mu => eadv.lab_bld_egfr_c.val.avg().where(dt > (egfr_r1_dt +(dspan/2)));\n            \n            mu_delta_30 : { s1_mu - s2_mu >30 =>1},{=>0};\n            \n            mspan : { egfr_n>0 => round((egfr_rn_dt-egfr_r1_dt)/365.25,0)};\n            \n            n_avg : { mspan>0 => round(egfr_n/mspan,1)};\n            \n            \n            [[rb_id]] : {egfr_n>2 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "acr_metrics",
    "text": "/* Algorithm to compute acr metrics  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to derive uACR metrics\",\n                    is_active:0\n                    \n                }\n            );\n            \n            acr_l => eadv.lab_ua_acr._.lastdv();\n            \n            acr_f => eadv.lab_ua_acr._.firstdv();\n        \n            acr_max => eadv.lab_ua_acr.val.firstdv();\n            \n            acr_outdated : {sysdate-acr_l_dt > 730 =>1},{=>0};\n\n            acr_3m_n => eadv.lab_ua_acr.val.count(0).where(dt<acr_l_dt-30 and val>3);\n\n\n            cga_a: {acr_l_val<3 => `A1`},\n                {acr_l_val<30 AND acr_l_val>=3 => `A2`},\n                {acr_l_val<300 AND acr_l_val>=30 => `A3`},\n                {acr_l_val>300 => `A4`},{=>`NA`};\n                \n            cga_a_val: {acr_l_val<3 => 1},\n                {acr_l_val<30 AND acr_l_val>=3 => 2},\n                {acr_l_val<300 AND acr_l_val>=30 => 3},\n                {acr_l_val>300 => 4},{=>0};\n                       \n            \n            [[rb_id]] : {1=1 =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "id_tb",
    "text": "/*  This is a algorithm to identify Tuberculosis  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify Tuberculosis\",\n                is_active:2\n                \n            }\n        );\n        \n        tb_code => eadv.[icpc_a700%,icd_m49%,icd_j65].dt.min();\n        \n        ltb_code => eadv.[icpc_a70j99].dt.min();\n                \n        [[rb_id]] : { coalesce(tb_code,ltb_code)!? => 1 },{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of tuberculosis\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "vacc_covid",
    "text": "/* Algorithm to assess covid 19 vaccination  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess covid 19 vaccination \",\n                is_active:2\n                \n            }\n        );\n        \n       \n        vax_pf => eadv.vacc_covid_comirnaty._.lastdv();\n        \n        vax_az => eadv.vacc_covid_astrazeneca._.lastdv();\n        \n        vax_md => eadv.vacc_covid_moderna._.lastdv();\n        \n        vax => eadv.[vacc_covid_moderna,vacc_covid_astrazeneca,vacc_covid_comirnaty]._.maxldv();\n        \n        [[rb_id]] : { coalesce(vax_pf_dt, vax_az_dt, vax_md_dt)!? => 1},{=>0};\n        \n                \n        #define_attribute(\n            [[rb_id]],{\n                label:\"Major abdominal colorectal surgery\",\n                type:2,\n                is_reportable:0\n        });",
    "is_active": true
  },
  {
    "name": "ckd_c_gn",
    "text": "/* Rule block to determine coded glomerulonephritis */ \n     \n     \n     #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine CKD by cause\",\n                is_active:2\n                \n            }\n     );\n     \n     #doc(,{txt :\"\n        Chronic glomerular injury or suggestive of\n     \"});\n     \n     \n          \n     #doc(,{txt :\"\n        N00  U88007 Acute nephritic syndrome\n        N01  Rapidly progressive nephritic syndrome\n        N02  Recurrent and persistent hematuria\n        N03  U88008 Chronic nephritic syndrome\n        N04  U88003 U88002  Nephrotic syndrome\n        N05  U88005\tU88004  Unspecified nephritic syndrome\n        N06  Isolated proteinuria with specified morphological lesion\n        N07  Hereditary nephropathy not elsewhere classified\n        N08  U88001 Glomerular disorders in diseases classified elsewhere\n        M32_14  Lupus nephritis\n     \"});\n     \n     c_n00 => eadv.[icd_n00%,icpc_u88007].dt.min();\n     \n     c_n01 => eadv.[icd_n01%].dt.min();\n     \n     c_n02 => eadv.[icd_n02%].dt.min();\n     \n     c_n03 => eadv.[icd_n03%,icpc_u88007].dt.min();\n     \n     c_n04 => eadv.[icd_n04%,icpc_u88003,icpc_u88002].dt.min();\n     \n     c_n05 => eadv.[icd_n05%,icpc_u88004,icpc_u88005].dt.min();\n     \n     c_n06 => eadv.[icd_n06%].dt.min();\n     \n     c_n07 => eadv.[icd_n07%].dt.min();\n     \n     c_n08 => eadv.[icd_n08%,icpc_u88001].dt.min();\n     \n     c_u88 => eadv.[icpc_u88005].dt.min();\n     \n     c_m3214 =>eadv.[icd_m32_14].dt.min(); \n     \n     gn : { coalesce(c_n00,c_n01,c_n02,c_n03,c_n04,c_n05,c_n07,c_n08,c_u88,c_m3214)!? =>1},{=>0};\n     \n     gn_nephritic : { coalesce(c_n00,c_n01,c_n02,c_n03,c_n05,c_n07,c_u88,c_m3214)!? =>1},{=>0};\n     \n     gn_nephrotic : { coalesce(c_n04,c_n06)!? =>1},{=>0};\n     \n     gn_chronic : {coalesce(c_n01,c_n02,c_n03,c_n05,c_n06,c_n07,c_n08,c_u88,c_m3214)!? => 1},{=>0};\n     \n     \n     [[rb_id]] : { . => gn};\n     \n     \n     #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Glomerulonephritis GN Acute or Chronic\",\n                desc:\"Integer [0-1] if found \",\n                is_reportable:1,\n                type:2\n            }\n     );\n     \n     #define_attribute(\n            gn_chronic,\n            {\n                label:\"Glomerulonephritis GN Chronic\",\n                desc:\"Integer [0-1] if found \",\n                is_reportable:1,\n                type:2\n            }\n     );\n     #define_attribute(\n            gn_nephritic,\n            {\n                label:\"Glomerulonephritis GN Nephritic\",\n                desc:\"Integer [0-1] if found \",\n                is_reportable:1,\n                type:2\n            }\n     );\n     #define_attribute(\n            gn_nephrotic,\n            {\n                label:\"Glomerulonephritis GN Nephrotic\",\n                desc:\"Integer [0-1] if found \",\n                is_reportable:1,\n                type:2\n            }\n     );",
    "is_active": true
  },
  {
    "name": "ckd_c_tid",
    "text": "/* Rule block to determine coded tubulointerstitial disease */ \n     \n     \n     #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine coded tubulointerstitial disease\",\n                is_active:2\n                \n            }\n     );\n     \n     #doc(,{txt :\"\n        Chronic tubulo-interstitial disease\n     \"});\n     \n     #doc(,{txt :\"\n        N11  Chronic tubulo-interstitial nephritis\n        N12  Tubulo-interstitial nephritis not specified as acute or chronic\n        N13  Obstructive and reflux uropathy\n        N14  Drug- and heavy-metal-induced tubulo-interstitial and tubular conditions\n        N15  Other renal tubulo-interstitial diseases\n        N16  Renal tubulo-interstitial disorders in diseases classified elsewhere\n        N25  Disorders resulting from impaired renal tubular function\n     \"});\n     \n     \n     c_n11 => eadv.[icd_n11%].dt.min();\n     \n     c_n12 => eadv.[icd_n12%].dt.min();\n     \n     c_n13 => eadv.[icd_n13%].dt.min();\n     \n     c_n14 => eadv.[icd_n14%].dt.min();\n     \n     c_n15 => eadv.[icd_n15%].dt.min();\n     \n     c_n16 => eadv.[icd_n16%].dt.min();\n     \n     c_n25 => eadv.[icd_n25%].dt.min();\n     \n     [[rb_id]] : { coalesce(c_n11,c_n12,c_n13,c_n14,c_n15,c_n16,c_n25)!? =>1 },{=>0};\n     \n     #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Renal Tubulo-interstitial disease Chronic\",\n                desc:\"Integer [0-1] if found \",\n                is_reportable:1,\n                type:2\n            }\n     );",
    "is_active": true
  },
  {
    "name": "ckd_c_rnm",
    "text": "/* Rule block to determine coded conditions leading to reduced nephron mass */ \n     \n     \n     #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine coded conditions leading to reduced nephron mass\",\n                is_active:2\n                \n            }\n     );\n     \n     #doc(,{txt :\"\n        Chronic tubulo-interstitial disease\n     \"});\n     \n     #doc(,{txt :\"\n        Q60  Renal agenesis and other reduction defects of kidney\n        Q61  U85008 U85001 Cystic kidney disease\n        Q62  Congenital obstructive defects of renal pelvis and congenital malformations of ureter\n        Q63  U85005 U85009 U99020 Other congenital malformations of kidney\n        Q64  Other congenital malformations of urinary system\n        Z90_5   U28006 Single kidney U52012 partial Nephrectomy U52006 partial Nephrectomy\n        C64     U75003 U52014 Renal Neoplasm\n        \"\n     });\n     \n     c_q60 => eadv.[icd_q60%].dt.min();\n     \n     c_q61 => eadv.[icd_q61%,icpc_u85008,icpc_u85001].dt.min();\n     \n     c_q61_2 => eadv.[icd_q61_2,icpc_u85001].dt.min();\n     \n     c_q62 => eadv.[icd_q62%].dt.min();\n     \n     c_q63 => eadv.[icd_q63%,icpc_u85005,icpc_u85009,icpc_u99020].dt.min();\n     \n     c_q64 => eadv.[icd_q64%].dt.min();\n     \n     c_c64 => eadv.[icd_c64%,icpc_u75003,icpc_u52014].dt.min();\n     \n     c_z90_5 => eadv.[icd_z90_5,icpc_u52012,icpc_u52006].dt.min();\n     \n     apkd : { c_q61_2!? => 1},{=>0};\n     \n     [[rb_id]] : { coalesce(c_q60,c_q61,c_q62,c_q63,c_q64,c_c64,c_z90_5)!? =>1 },{=>0};\n     \n     #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Renal structural anatomical anomaly\",\n                desc:\"Integer [0-1] if found \",\n                is_reportable:1,\n                type:2\n            }\n     );\n     \n     #define_attribute(\n            apkd,\n            {\n                label:\"Adult polycystic kidney disease\",\n                desc:\"Integer [0-1] if found \",\n                is_reportable:1,\n                type:2\n            }\n     );",
    "is_active": true
  },
  {
    "name": "ckd_cause",
    "text": "/* Rule block to determine causality for CKD */ \n     \n     \n     #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine causality for CKD\",\n                is_active:2\n                \n            }\n     );\n     \n     #doc(,\n        {\n            txt :\"Gather coding supporting DM2 HTN LN and other GN\",\n            cite : \"ckd_cause_ref1, ckd_cause_ref2\",\n        }\n        \n     );\n     \n     dm => rout_cd_dm_dx.dm.val.bind(); \n     htn => rout_cd_htn.htn.val.bind();\n     ckd => rout_ckd.ckd.val.bind();\n     rrt => rout_rrt.rrt.val.bind();\n   \n     /*\n     gn_ln => eadv.icd_m32_14.dt.count(0); \n     gn_x => eadv.[icd_n0%,icpc_u88%].dt.count(0); \n     */\n     sle => rout_cd_rheum_sle.cd_rheum_sle.val.bind();\n     \n     #doc(,{txt :\"\n        N00  Acute nephritic syndrome\n        N01  Rapidly progressive nephritic syndrome\n        N02  Recurrent and persistent hematuria\n        N03  Chronic nephritic syndrome\n        N04  Nephrotic syndrome\n        N05  Unspecified nephritic syndrome\n        N06  Isolated proteinuria with specified morphological lesion\n        N07  Hereditary nephropathy not elsewhere classified\n        N08  Glomerular disorders in diseases classified elsewhere\n     \"});\n     \n     c_n00 => rout_ckd_c_gn.c_n00.val.bind();\n     \n     c_n01 => rout_ckd_c_gn.c_n01.val.bind();\n     \n     c_n02 => rout_ckd_c_gn.c_n02.val.bind();\n     \n     c_n03 => rout_ckd_c_gn.c_n03.val.bind();\n     \n     c_n04 => rout_ckd_c_gn.c_n04.val.bind();\n     \n     c_n05 => rout_ckd_c_gn.c_n05.val.bind();\n     \n     c_n06 => rout_ckd_c_gn.c_n06.val.bind();\n     \n     c_n07 => rout_ckd_c_gn.c_n07.val.bind();\n     \n     c_n08 => rout_ckd_c_gn.c_n08.val.bind();\n     \n     c_u88 => rout_ckd_c_gn.c_u88.val.bind();\n     \n     c_m3214 => rout_ckd_c_gn.c_m3214.val.bind();\n     \n     aet_gn : { coalesce(c_n00,c_n01,c_n02,c_n03,c_n04,c_n05,c_n07,c_n08,c_u88,c_m3214)!? =>1};   \n     \n     #doc(,{txt :\"\n        N10  Acute pyelonephritis\n        N11  Chronic tubulo-interstitial nephritis\n        N12  Tubulo-interstitial nephritis not specified as acute or chronic\n        N13  Obstructive and reflux uropathy\n        N14  Drug- and heavy-metal-induced tubulo-interstitial and tubular conditions\n        N15  Other renal tubulo-interstitial diseases\n        N16  Renal tubulo-interstitial disorders in diseases classified elsewhere\n     \"});\n     \n     c_n11 => rout_ckd_c_tid.c_n11.val.bind();\n     \n     c_n12 => rout_ckd_c_tid.c_n12.val.bind();\n     \n     c_n13 => rout_ckd_c_tid.c_n13.val.bind();\n     \n     c_n14 => rout_ckd_c_tid.c_n14.val.bind();\n     \n     c_n15 => rout_ckd_c_tid.c_n15.val.bind();\n     \n     c_n16 => rout_ckd_c_tid.c_n16.val.bind();\n     \n     c_n25 => rout_ckd_c_tid.c_n25.val.bind();\n     \n     aet_tid : { coalesce(c_n11,c_n12,c_n13,c_n14,c_n15,c_n16,c_n25)!? =>1 };\n     \n     \n     #doc(,{txt :\"\n        N17  Acute kidney failure\n        N18  Chronic kidney disease (CKD)\n        N19  Unspecified kidney failure\n     \"});\n\n     c_n17 => eadv.[icd_n17%].dt.min();\n     \n     aet_aki : { c_n17!? => 1};\n     \n     #doc(,{txt :\"\n        N20  Calculus of kidney and ureter\n        N21  Calculus of lower urinary tract\n        N22  Calculus of urinary tract in diseases classified elsewhere\n        N23  Unspecified renal colic\n     \"});\n     \n     c_n20_n23 => eadv.[icd_n20%,icd_n21%,icd_n22%,icd_n23%].dt.min();\n     \n     aet_calc : { c_n20_n23!? =>1};\n     \n     #doc(,{txt :\"\n        \n        N26  Unspecified contracted kidney\n        N27  Small kidney of unknown cause\n        N28  Other disorders of kidney and ureter not elsewhere classified\n        N29  Other disorders of kidney and ureter in diseases classified elsewhere\n     \"});\n     \n     c_n26_n27 => eadv.[icd_n26%,icd_n27%].dt.min();\n     \n     aet_struc : { c_n26_n27!? => 1};\n     \n     #doc(,{txt :\"\n        N30  Cystitis\n        N31  Neuromuscular dysfunction of bladder not elsewhere classified\n        N32  Other disorders of bladder\n        N33  Bladder disorders in diseases classified elsewhere\n        N34  Urethritis and urethral syndrome\n        N35  Urethral stricture\n        N36  Other disorders of urethra\n        N37  Urethral disorders in diseases classified elsewhere\n        N39  Other disorders of urinary system\n     \"});\n     \n     \n     c_n30_n39 => eadv.[icd_n3%].dt.min();\n     \n     \n     \n     #doc(,{txt :\"\n        N40  Benign prostatic hyperplasia\n     \"}); \n     \n     c_n40 => eadv.[icd_n40%].dt.min();\n     \n     aet_bladder : { coalesce(c_n30_n39,c_n40)!?  =>1 };\n     \n     #doc(,{txt :\"\n        Q60  Renal agenesis and other reduction defects of kidney\n        Q61  Cystic kidney disease\n        Q62  Congenital obstructive defects of renal pelvis and congenital malformations of ureter\n        Q63  Other congenital malformations of kidney\n        Q64  Other congenital malformations of urinary system\n        \"\n     });\n     \n     \n     c_q60 => rout_ckd_c_rnm.c_q60.val.bind();\n     \n     c_q61 => rout_ckd_c_rnm.c_q61.val.bind();\n     \n     c_q61_2 => rout_ckd_c_rnm.c_q61_2.val.bind();\n     \n     c_q62 => rout_ckd_c_rnm.c_q62.val.bind();\n     \n     c_q63 => rout_ckd_c_rnm.c_q63.val.bind();\n     \n     c_q64 => rout_ckd_c_rnm.c_q64.val.bind();\n     \n     c_c64 => rout_ckd_c_rnm.c_c64.val.bind();\n     \n     c_z90_5 => rout_ckd_c_rnm.c_z90_5.val.bind();\n     \n     esrd : {rrt in (1,2,3,4) =>1},{=>0};\n     \n     aet_rnm : { coalesce(c_q60,c_q61,c_q62,c_q63,c_q64,c_c64,c_z90_5)!? =>1 };\n     \n     #doc(,\n        {\n            txt :\"CKD due to structural and Genetic disease needs to be included here\"\n        }\n     );\n     \n     #doc(,\n        {\n            txt :\"candidate for causality\"\n        }\n     );\n     \n     canddt : {ckd>0 or rrt>0=>1},{=>0};\n     \n     aet_dm : {canddt=1 and dm>0 =>1};\n        \n     #define_attribute(\n            aet_dm,\n            {\n                label:\"CKD aetiology likely diabetes\",\n                desc:\"Integer [0-1] if CKD aetiology likely diabetes \",\n                is_reportable:1,\n                type:2\n            }\n     );\n     \n     aet_htn : {canddt=1 and htn>0 and dm=0 =>1};\n     \n     #define_attribute(\n            aet_htn,\n            {\n                label:\"CKD aetiology likely hypertension\",\n                desc:\"Integer [0-1] if CKD aetiology likely hypertension\",\n                is_reportable:1,\n                type:2\n            }\n     );\n     \n     aet_gn_ln : {canddt=1 and sle>0 =>1};\n     \n     #define_attribute(\n            aet_gn_ln,\n            {\n                label:\"CKD aetiology likely Lupus nephritis\",\n                desc:\"Integer [0-1] if CKD aetiology likely Lupus nephritis \",\n                is_reportable:1,\n                type:2\n            }\n     );\n     \n     \n     \n     #define_attribute(\n            aet_gn,\n            {\n                label:\"CKD aetiology likely other GN\",\n                desc:\"Integer [0-1] if CKD aetiology likely other GN \",\n                is_reportable:1,\n                type:2\n            }\n     );\n\n     aet_cardinality : { canddt=1 => coalesce(aet_dm,0) + coalesce(aet_htn,0) + coalesce(aet_gn_ln,0) + coalesce(aet_gn,0) + coalesce(aet_rnm,0)};\n     \n     aet_multiple : { canddt=1 and aet_cardinality >1 => 1},{=>0};\n     \n     #doc(,\n        {\n            txt :\"Determine causality\"\n        }\n        \n    );\n     \n     [[rb_id]] : { coalesce(aet_gn,aet_tid,aet_aki,aet_calc,aet_struc,aet_bladder,aet_rnm,aet_dm,aet_htn,aet_gn_ln)!? => 1},{=>0};\n     \n     \n     #define_attribute(\n            ckd_cause,\n            {\n                label:\"CKD cause\",\n                desc:\"Integer [0-1] if CKD aetiology found \",\n                is_reportable:0,\n                type:2\n            }\n    );",
    "is_active": true
  },
  {
    "name": "pregnancy",
    "text": "/* Algorithm to assess pregnancy */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess pregnancy\",\n                is_active:2\n                \n            }\n        );\n        \n        us_ld => eadv.[ris_img_uspreg%].dt.last();\n        \n        icpc_ld => eadv.[icpc_w05%,icpc_w17%,icpc_w18%,icpc_w29%,icpc_w70%,icpc_w78%,icpc_w84%,icpc_w85%].dt.last();\n        \n        us_2_ld => eadv.[ris_img_uspreg%].dt.last().where(dt < us_ld - 304); \n        \n        preg_1y_f : { coalesce(us_ld,icpc_ld)> sysdate-365 =>1},{=>0};\n        \n        preg_ld : { .=> greatest_date(us_ld,icpc_ld)};\n        \n        [[rb_id]] : { coalesce(us_ld,icpc_ld)!? => 1},{=>0};\n        \n        #define_attribute(\n            [[rb_id]],{\n                label:\"Major abdominal colorectal surgery\",\n                type:2,\n                is_reportable:0\n        });",
    "is_active": true
  },
  {
    "name": "kpi_uncategorised",
    "text": "#define_ruleblock([[rb_id]],\n            {\n                description: \"these are the rules for KPIs which do not fit into other categories\",\n                is_active:1\n            }\n        );\n        \n        #doc(,\n            {\n                txt : \"Get billing status over last year\"\n            }\n        );\n\n        mbs_715_1y_n => eadv.[mbs_715].dt.count(0).where(dt > sysdate-365);\n        mbs_721_1y_n => eadv.[mbs_721].dt.count(0).where(dt > sysdate-365);\n        mbs_723_1y_n => eadv.[mbs_723].dt.count(0).where(dt > sysdate-365);\n        mbs_732_1y_n => eadv.[mbs_732].dt.count(0).where(dt > sysdate-365);\n\n        mbs_715_1y : {mbs_715_1y_n > 0 => 1},{=> 0};\n        mbs_721_1y : {mbs_721_1y_n > 0 => 1},{=> 0};\n        mbs_723_1y : {mbs_723_1y_n > 0 => 1},{=> 0};\n        mbs_732_1y : {mbs_732_1y_n > 0 => 1},{=> 0};\n\n\n        #doc(,\n            {\n                txt : \"Get number of non Z49.1 discharges in last year\"\n            }\n        );\n\n        total_dc_n => eadv.[icd_%].dt.distinct_count(0).where(dt > sysdate-365);\n        #define_attribute(total_dc_n,\n            { \n                label: \"The total number of discharges.\"\n            }\n        );\n\n        z491_dc_n => eadv.[icd_z49_1].dt.distinct_count(0).where(dt > sysdate-365);\n        #define_attribute(z491_dc_n,\n            { \n                label: \"The number of discharges with Z49 icd code as diagnosis.\"\n            }\n        );\n\n        [[rb_id]] : {. =>1};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"This is a placeholder variable, useful info stored in other variables in this block\"\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_dm_dx",
    "text": "/* Ruleblock to assess diabetic diagnosis */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess diabetic diagnosis\",\n                is_active:2\n                \n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt:\"Calculate information entropy\"\n            }\n        );\n        \n       \n        \n        #doc(,\n            {\n                section: \"Diagnosis\"\n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt :\"Determine diagnosis by code lab and rxn criteria\",\n                cite:\"dm_bmc_ehr_2019\"\n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt:\"code criteria\"\n            }\n        );\n        \n        dm1_icd_fd => eadv.icd_e10%.dt.min();\n        \n        dm1_icpc_fd => eadv.icpc_t89002.dt.min();\n        \n        dm1_fd : {.=> least_date(dm1_icd_fd,dm1_icpc_fd) };\n        \n        dm2_icd_fd => eadv.[icd_e08%,icd_e11%,icd_e14%].dt.min();\n        \n        dm2_icpc_fd => eadv.[icpc_t90%].dt.min();\n        \n        dm_ins_icpc_fd => eadv.[icpc_t89001].dt.min();\n        \n        dm2_fd : {.=> least_date(dm2_icd_fd,dm2_icpc_fd) };\n        \n        dm3_icd_fd => eadv.[icd_e09%,icpc_t89003,icpc_t89008].dt.min();\n               \n        dm3_fd : {.=> dm3_icd_fd };\n        \n        predm_icpc_fd => eadv.icpc_a91011.dt.min();\n        \n        predm_icd_fd => eadv.icd_r73_03%.dt.min();\n        \n        predm_fd : {.=>least_date(predm_icd_fd,predm_icpc_fd)};\n        \n        dm_mixed : { dm1_fd!? and dm2_fd!? => 1},{=>0};\n        \n        dm_icd_fd : {.=> least_date(dm1_icd_fd,dm2_icd_fd,dm3_icd_fd) };\n        \n        dm_icpc_fd : {.=> least_date(dm1_icpc_fd,dm2_icpc_fd,dm_ins_icpc_fd) };\n        \n        \n        #doc(,{\n                txt :\"Code criteria for Gestational DM\"\n        });\n        \n        gdm_code_fd => eadv.[icd_o24%,icpc_w85001,icpc_w85002].dt.min();\n      \n        #doc(,{\n                txt :\"Differentiate Type 1 prioritising ICPC\"\n        });\n        dm_code_fd : { . => least_date(dm_icd_fd,dm_icpc_fd) };\n        \n        \n        dm_type_1 : { dm1_icpc_fd!? and dm1_icpc_fd>=dm_icpc_fd => 1},{ dm2_icpc_fd? and dm1_icd_fd!? =>1},{=>0}; \n        \n        \n        \n        #doc(,\n            {\n                txt:\"lab criteria with hba1c(ngsp) threshold at 6.5\",\n                cite:\"dm_mja_2012,dm_nhmrc_2009\"\n            }\n        );\n       \n        gluc_hba1c_high1 => eadv.lab_bld_hba1c_ngsp._.lastdv().where(val>=65/10);\n        \n        gluc_hba1c_high2 => eadv.lab_bld_hba1c_ngsp._.lastdv(1).where(val>=65/10);\n        \n        gluc_hba1c => eadv.lab_bld_hba1c_ngsp._.lastdv();\n        \n        /* not implemented yet\n        gluc_fasting => eadv.lab_bld_glucose_fasting.val.count(0).where(val>=7);\n        \n        gluc_random => eadv.lab_bld_glucose_random.val.count(0).where(val>=111/10);\n        \n        gluc_ogtt_0h => eadv.lab_bld_glucose_ogtt_0h.val.count(0).where(val>=7);\n        \n        gluc_ogtt_2h => eadv.lab_bld_glucose_ogtt_2h.val.count(0).where(val>=111/10);\n        */\n        \n        dm_lab : { gluc_hba1c_high1_val!? and gluc_hba1c_high2_val!?  =>1},{=>0};\n        \n        /* not implemented yet\n        dm_lab : {coalesce(gluc_hba1c_high1_dt,gluc_fasting,gluc_random,gluc_ogtt_0h,gluc_ogtt_2h)!? =>1},{=>0};\n        */\n        \n        gluc_hba1c_high_f => eadv.lab_bld_hba1c_ngsp._.firstdv().where(val>=65/10);\n        \n        #doc(,\n            {\n                txt:\"medication criteria based on rxnorm based on WHO ATC A10\",\n                cite:\"dm_rxn,dm_tg_2019\"\n            }\n        );\n        \n        \n        dm_rxn_n => eadv.[rxnc_a10%].dt.count(0).where(val=1);\n        \n        #doc(,\n            {\n                txt:\"Medications that if present signify diagnosis\"\n            }\n        );\n        dm_rxn1_fd => eadv.[rxnc_a10bb,rxnc_a10ae,rxnc_a10ac,rxnc_a10ad,rxnc_a10ab,rxnc_a10bh,rxnc_a10bj,rxnc_a10bk].dt.min();\n    \n        dm_rxn2_fd => eadv.[rxnc_a10ba].dt.min();\n    \n        dm_rxn_su => eadv.[rxnc_a10bb].dt.min().where(val=1);\n        dm_rxn_ins_long => eadv.[rxnc_a10ae].dt.min().where(val=1);\n        dm_rxn_ins_int => eadv.[rxnc_a10ac].dt.min().where(val=1);\n        dm_rxn_ins_mix => eadv.[rxnc_a10ad].dt.min().where(val=1);\n        dm_rxn_ins_short => eadv.[rxnc_a10ab].dt.min().where(val=1);\n        dm_rxn_bg => eadv.rxnc_a10ba.dt.min().where(val=1);\n        \n        \n        dm_rxn_dpp4 => eadv.[rxnc_a10bh].dt.min().where(val=1);\n        dm_rxn_glp1 => eadv.[rxnc_a10bj].dt.min().where(val=1);\n        dm_rxn_sglt2 => eadv.[rxnc_a10bk].dt.min().where(val=1);\n           \n        dm_rxn_ins : {coalesce(dm_rxn_ins_long,dm_rxn_ins_int,dm_rxn_ins_mix,dm_rxn_ins_short)!? =>1},{=>0};\n           \n        dm_rxn : { coalesce(dm_rxn1_fd,dm_rxn2_fd)!? => 1},{=>0};\n        \n        dm_dx_rxn : { dm_rxn1_fd!? => 1},{=>0};\n        \n        dm_fd :{ . => least_date(dm_code_fd,dm_rxn1_fd,gluc_hba1c_high_f_dt)  };\n        \n        dm_fd_year :{ . => extract(year from dm_fd) };\n        \n        dm_vintage_yr_ : { dm_fd!? => round((sysdate-dm_fd)/365,0)},{=>0};\n        \n        dm_vintage_cat : { dm_vintage_yr_>=0 and dm_vintage_yr_ <10 => 1 },\n                            { dm_vintage_yr_>=10 and dm_vintage_yr_ <20 => 2 },\n                            { dm_vintage_yr_>=20=> 3 },{=>0};\n\n        \n        dm_icpc_coded : { dm_icpc_fd!? =>1},{=>0};\n        \n        dm_icd_coded : { dm_icd_fd!? =>1},{=>0};\n        \n        dm : { dm_fd!? =>1},{=>0};\n        \n        dm_type : {dm=1 and dm_type_1=1 =>1},\n                    {dm=1 and dm_type_1=0=>2},\n                    {dm_mixed=1 =>2},\n                    {=>0};\n        \n        dm_prev : { dm_fd!? => 1 },{=>0};\n        \n        dm_incd : { dm_fd > sysdate - 365 => 1},{=>0};\n        \n        \n        dm_dx_code_flag : {greatest(dm_icd_coded,dm_icpc_coded)>0 => 1},{=>0};\n        \n        dm_dx_uncoded : {dm_dx_code_flag=0 => 1},{=>0};\n        \n        \n\n        dm_dx_code : {dm=1 => (dm*1000 + dm_type*100 + dm_vintage_cat*10)},{=>0};\n        \n        dm1_mm_1 : { dm_type=1 and dm_rxn_ins=0 => 1},{=>0};\n        \n        dm1_mm_2 : { dm_type=1 and dm1_icd_fd? => 1},{ dm_type=1 and dm1_icpc_fd? => 2},{=>0};\n        \n        dm1_mm_3 : { dm_type=1 and dm2_fd>dm1_fd => 1},{=>0};\n        \n        dm1_mm : { .=> least(dm1_mm_1,dm1_mm_2,dm1_mm_3)};\n        \n        dm1_mm_code : {.=> 10000 + dm1_mm_1*1000 + dm1_mm_2*100 + dm1_mm_3*10};\n        \n        dm2_mm_1 : { dm=1 and dm_type_1=0 and dm_rxn=0 and gluc_hba1c_val<6 =>1 },{=>0};\n        \n        dm2_mm_2 : { dm=1 and dm_type_1=0 and gluc_hba1c_high_f_dt!? and dm_lab=0 =>1 },{=>0};\n        \n        dm2_mm_3 : { predm_fd > dm2_fd =>1},{=>0};\n        \n        dm2_mm_4 : { dm3_fd!? and dm2_fd? and dm1_fd? and predm_fd? =>1},{=>0};\n        \n        cd_dm_dx_code : { dm=1 => 100000 + dm_icd_coded*10000 + dm_icpc_coded*1000 + dm_lab*100 + dm_rxn*10};\n        \n        [[rb_id]] : { . => dm};\n        \n        #define_attribute(\n            dm,\n            {\n                label:\"Diabetes\",\n                desc:\"Presence of Type 2/1 Diabetes mellitus\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            dm_prev,\n            {\n                label:\"Prevalent Diabetes Mellitus\",\n                desc:\"Presence of Type 2/1 Diabetes mellitus\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            dm_incd,\n            {\n                label:\"Incident Diabetes Mellitus\",\n                desc:\"Presence of Type 2/1 Diabetes mellitus\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        \n        #define_attribute(\n            dm_dx_uncoded,\n            {\n                label:\"Absent ICPC2+ coding indicating Diabetes Mellitus\",\n                desc:\"\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_dm_comp",
    "text": "/* Ruleblock to assess diabetes */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess diabetes\",\n                is_active:2,\n                filter: \"SELECT eid FROM rout_cd_dm_dx WHERE cd_dm_dx=1\"\n                \n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt:\"Calculate information entropy\"\n            }\n        );\n        \n       \n       dm => rout_cd_dm_dx.cd_dm_dx.val.bind();\n        \n        \n        #doc(,{\n                section: \"Complications\"\n        });\n        \n        #doc(,{\n                txt:\"Determine diabetic complications including retinopathy neuropathy dm foot\",\n                cite:\"dm_dmcare_2014\"\n        });\n        \n        #doc(,{\n                txt:\"Non-proliferative diabetic retinopathy ICD codes\"\n                \n        });\n        \n        ndr_icd_e31 => eadv.[icd_e10_31,icd_e11_31,icd_e13_31].dt.min();\n                \n        ndr_icd_e32 => eadv.[icd_e10_32,icd_e11_32,icd_e13_32].dt.min();\n        \n        ndr_icd_e33 => eadv.[icd_e10_33,icd_e11_33,icd_e13_33].dt.min();\n        \n        ndr_icd_e34 => eadv.[icd_e10_34,icd_e11_34,icd_e13_34].dt.min();\n        \n        ndr_icd : {coalesce(ndr_icd_e31, ndr_icd_e32,ndr_icd_e33,ndr_icd_e34)!? =>1},{=>0};\n        \n        #doc(,{\n                txt:\"Proliferative diabetic retinopathy ICD codes\"\n                \n        });\n        \n        pdr_icd_e35 => eadv.[icd_e11_35%,icd_e11_35%,icd_e13_35%].dt.min();\n        \n        #doc(,{\n                txt:\"Diabetic retinopathy ICPC codes\"\n        });\n        \n        dr_icpc_f83 => eadv.icpc_f83002.dt.min();\n        \n        dm_micvas_retino : { ndr_icd=1 or pdr_icd_e35!? or dr_icpc_f83!? =>1};\n        \n        #doc(,{\n                txt:\"Diabetic neuropathy ICD codes\"\n        });\n\n        dm_micvas_neuro => eadv.[icd_e11_4%,icpc_n94012,icpc_s97013].dt.min();\n        \n        #doc(,{\n                txt:\"Diabetic foot ulcer\"\n        });\n        \n        dm_foot_ulc => eadv.icd_e11_73.dt.min();\n        \n        dm_micvas :{ dm_micvas_neuro!? or dm_micvas_retino!? or dm_foot_ulc!?=> 1};\n        \n        #doc(,{\n                txt:\"Diabetic ketoacidosis\"\n        });\n        \n        dka_icd_ld => eadv.icd_e11_11.dt.max();\n        \n        dka_icd_fd => eadv.icd_e11_11.dt.min();\n        \n        dka_icpc_ld => eadv.icpc_t99077.dt.max();\n        \n        dka_ld : { .=> greatest(dka_icd_ld,dka_icpc_ld)};\n        \n        dm_dka : { dka_ld!? => 1};\n        \n        \n        [[rb_id]] : { coalesce(dm_micvas,dm_dka)>0 and dm=1 =>1},{=>0};\n        \n        \n        #define_attribute(\n            [[[rb_id]],\n            {\n                label:\"Diabetic complications\",\n                desc:\"Presence of Diabetic complications\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_dm_glyc_cntrl",
    "text": "/* Ruleblock to assess diabetic glycaemic control*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess diabetic glycaemic control\",                \n                is_active:2,\n                filter: \"SELECT eid FROM rout_cd_dm_dx WHERE cd_dm_dx=1\"\n                \n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt:\"Calculate information entropy\"\n            }\n        );\n        \n       \n        \n        iq_hba1c => eadv.lab_bld_hba1c_ngsp.val.count(0).where(dt>sysdate-730);\n        \n        iq_tier : {iq_hba1c>1 => 2},{iq_hba1c>0 => 1},{=>0};\n        \n        dm => rout_cd_dm_dx.cd_dm_dx.val.bind();\n        \n        #doc(,\n            {\n                section: \"Glycaemic Level\"\n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Diabetic glycaemic levels which includes short and long term levels\",\n                cite:\"dm_pcd_2019,dm_ada_2018\"\n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Australian guidelines set target glycaemic target as 7 but range from 6-8 in specific populations. However intensive glycaemic target 6pct has limited additional outcome benefits\",\n                cite:\"dm_bmj_2011,dm_nejm_2008,dm_ada_2016\"\n            }\n        );\n        \n        \n        hba1c_n_tot => eadv.lab_bld_hba1c_ngsp.dt.count().where(dt > sysdate-730);\n        hba1c_n_opt => eadv.lab_bld_hba1c_ngsp.dt.count().where(val>=6 and val<8 and dt > sysdate-730);\n        \n        \n        \n        \n        hba1c_max => eadv.lab_bld_hba1c_ngsp._.maxldv();\n        \n        #doc(,\n            {\n                txt:\"Calculate tir of HbA1c\",\n                cite:\"dm_dmtech_2019,dm_dmrr_2018\"\n            }\n        );\n        \n        n_opt_qt :{coalesce(hba1c_n_tot,0)>0 => round((coalesce(hba1c_n_opt,0)/hba1c_n_tot),2)*100};\n        \n        hba1c_n0 => eadv.lab_bld_hba1c_ngsp.val.lastdv();\n        \n        last_hba1c : {hba1c_n0_val!? => hba1c_n0_val};\n        \n        #doc(,\n            {\n                txt:\"Categories levels into 4 classes\",\n                cite:\"dm_aihwa_atsi_kpi_2018\"\n            }\n        );\n        \n        \n        n0_st : { hba1c_n0_val <6 => 1},\n                            { hba1c_n0_val >=6 and hba1c_n0_val <8 => 2},\n                            { hba1c_n0_val >=8 and hba1c_n0_val <10 => 3},\n                            { hba1c_n0_val >=10 =>4},{=>0};\n        \n        cd_dm_glyc_cntrl : { dm=1 => n0_st};\n        \n        #define_attribute(\n            cd_dm_glyc_cntrl,\n            {\n                label:\"Diabetic glycaemic control\",\n                desc:\"Diabetic glycaemic control class\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n         #define_attribute(\n            hba1c_n0_val,\n            {\n                label:\"Last HbA1c ngsp\",\n                desc:\"Last HbA1c ngsp\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_dm_mx",
    "text": "/* Ruleblock to assess diabetic management*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess diabetic management\",\n                is_active:2,\n                filter: \"SELECT eid FROM rout_cd_dm_dx WHERE cd_dm_dx=1\"\n                \n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt:\"Get careplan information\"\n            }\n        );\n        dm => rout_cd_dm_dx.cd_dm_dx.val.bind();\n        \n        cp_lv => eadv.careplan_h9_v1.val.last();\n        \n        cp_ld => eadv.careplan_h9_v1.dt.max();\n        \n        cp_dm : {cp_lv is not null => to_number(substr(to_char(cp_lv),-6,1))},{=>0};\n        \n        cp_dm_ld : {cp_dm>0 => cp_ld};\n        \n        rv_pod_ld => eadv.mbs_10962.dt.max();\n        \n        rv_edu_ld => eadv.mbs_10951.dt.max();\n        \n        cd_dm_mx : {dm=1 and (cp_dm>0 or coalesce(rv_pod_ld, rv_edu_ld)!?) => 1},{=>0};\n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Diabetic management\",\n                desc:\"Diabetic management\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "cd_dm_rx_rcm",
    "text": "/* Ruleblock to recommend diabetic pharmacotherapy*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to recommend diabetic pharmacotherapy\",\n                is_active:2\n                \n            }\n        );\n        \n        \n        #doc(,{\n                txt:\"Get careplan information\"\n        });\n        \n        dm => rout_cd_dm_dx.cd_dm_dx.val.bind();\n        \n        #doc(,{\n                txt:\"Get past medication\"\n        });\n        \n        \n        ins_long_0=> eadv.[rxnc_a10ae].dt.max().where(val=0);\n        ins_int_0 => eadv.[rxnc_a10ac].dt.max().where(val=0);\n        ins_mix_0 => eadv.[rxnc_a10ad].dt.max().where(val=0);\n        ins_short_0 => eadv.[rxnc_a10ab].dt.max().where(val=0);\n        \n        bg_0 => eadv.rxnc_a10ba.dt.max().where(val=0);\n        su_0 => eadv.[rxnc_a10bb].dt.max().where(val=0);\n    \n        dpp4_0 => eadv.[rxnc_a10bh].dt.max().where(val=0);\n        glp1_0 => eadv.[rxnc_a10bj].dt.max().where(val=0);\n        sglt2_0 => eadv.[rxnc_a10bk].dt.max().where(val=0);\n        \n        #doc(,{\n                txt:\"Get cuurent medication\"\n        });\n        \n        \n        ins_long => eadv.[rxnc_a10ae].dt.min().where(val=1);\n        ins_int => eadv.[rxnc_a10ac].dt.min().where(val=1);\n        ins_mix => eadv.[rxnc_a10ad].dt.min().where(val=1);\n        ins_short => eadv.[rxnc_a10ab].dt.min().where(val=1);\n        \n        bg => eadv.rxnc_a10ba.dt.min().where(val=1);\n        su => eadv.[rxnc_a10bb].dt.min().where(val=1);\n    \n        dpp4 => eadv.[rxnc_a10bh].dt.min().where(val=1);\n        glp1 => eadv.[rxnc_a10bj].dt.min().where(val=1);\n        sglt2 => eadv.[rxnc_a10bk].dt.min().where(val=1);\n        \n        #doc(,{\n                txt:\"Derive contraindications\"\n        });\n        \n        egfr_lv => eadv.lab_bld_egfr_c.val.last().where(dt>sysdate-90);\n        \n        bmi => rout_cd_obesity.bmi.val.bind();\n\n        panc_dt => eadv.[icpc_d99058,icpc_d99043,icd_k86%,icd_k85%].dt.max();\n        \n        \n        \n        [[rb_id]] : {dm=1 => 1},{=>0};",
    "is_active": true
  },
  {
    "name": "cd_endo_hypothyroid",
    "text": "/*  This is a algorithm to identify hypothyroidism  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"This is a algorithm to identify hypothyroidism\",\n                is_active:2\n                \n            }\n        );\n        \n        cong_fd => eadv.[icd_e03_1,icpc_t86004].dt.min();\n        \n        rx_induced_fd => eadv.[icd_e03_2,icpc_t86008].dt.min();\n        \n        post_mx_fd => eadv.[icd_89%,icpc_t86005,icpc_t86006].dt.min();\n        \n        nos_fd => eadv.[icpc_t86009,icpc_t86003,icd_e03_5,icd_e03_8,icd_e03_9].dt.min();\n        \n        code_fd : { . => least_date(cong_fd,rx_induced_fd,post_mx_fd,nos_fd)};\n        \n        rx_h03aa_ld => eadv.[rxnc_h03aa].dt.max().where(val=1);\n        \n        [[rb_id]] : { coalesce(code_fd,rx_h03aa_ld)!? =>1},{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of hypothyroidism\"\n            }\n        );",
    "is_active": true
  },
  {
    "name": "bp_graph",
    "text": "/* Algorithm to plot bp graph  */\n        \n            \n             #define_ruleblock([[rb_id]],\n                {\n                    description: \"Algorithm to plot bp graph\",\n                   \n                    is_active:2\n                    \n                }\n            );\n            \n            rrt => rout_rrt.rrt.val.bind();  \n            \n            bp_graph_canvas_x : {1=1 => 350};\n            \n            bp_graph_canvas_y : {1=1 => 100};\n            \n            htn => rout_cd_htn.cd_htn.val.bind();\n            \n            /*avg_bp_1y => rout_cd_htn.avg_bp_1y.val.bind();*/\n            \n            /*sigma_1 => rout_cd_htn.sigma_1.val.bind();*/\n            \n            sbp_max => rout_cd_htn_bp_control.sbp_max.val.bind();\n            \n            sbp_min => rout_cd_htn_bp_control.sbp_min.val.bind();\n            \n            sbp_target_max => rout_cd_htn_bp_control.sbp_target_max.val.bind();\n            \n            sbp_target_min => rout_cd_htn_bp_control.sbp_target_min.val.bind();\n            \n            tir => rout_cd_htn_bp_control.sbp_tir_1y.val.bind();\n            \n            sbp_graph => eadv.obs_bp_systolic.val.serializedv2(round(val,0)~dt).where(dt>sysdate-1825);    \n            \n            sbp_graph_n => eadv.obs_bp_systolic.val.count().where(dt>sysdate-1825);    \n            \n            bp_graph_y_max : {1=1 => sbp_max};\n            \n            bp_graph_y_min : {sbp_min < sbp_target_min => sbp_min},{=> sbp_target_min};\n            \n            bp_graph_x_scale : {1=1 => round(bp_graph_canvas_x/730,5)};\n            \n            bp_graph_y_scale : { bp_graph_y_max > bp_graph_y_min => round(bp_graph_canvas_y/(bp_graph_y_max-bp_graph_y_min),5)},{=>round(bp_graph_canvas_y/10,5)};\n            \n            \n            \n            tir_pct : {1=1 => tir*100};\n            \n            \n            \n            radius : {1=1 => 25};\n            \n            circum : {1=1 => radius * 2* 3.14159 };\n            \n            tir_arc : {1=1 => tir_pct * circum/100};\n            \n            pie_colour : { tir>=0.7 => `green`},{ tir>=0.5 and tir<0.7=> `orange`},{ tir<0.5 => `tomato`};\n            \n            \n            line_upper_y : {1=1 => 0};\n            \n            line_lower_y : {1=1 => (bp_graph_y_max-bp_graph_y_min) * bp_graph_y_scale};\n            \n            line_target_upper_y : {bp_graph_y_min< sbp_target_max and bp_graph_y_max> sbp_target_max => (bp_graph_y_max-140) * bp_graph_y_scale};\n            \n            \n            \n            \n            [[rb_id]] : {  sbp_graph_n>2 and sbp_graph_val!? =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "cd_cardiac_vte",
    "text": "/* Algorithm to assess VTE  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to assess VTE\",\n                is_active:2\n                \n            }\n        );\n        \n                \n            #doc(,{\n                    section:\"Pulmonary embolism\"\n            });\n            \n            \n            \n            pe_fd => eadv.[icd_i26%,icpc_k93002].dt.min();\n            \n            pe_ld => eadv.[icd_i26%,icpc_k93002].dt.max();\n            \n            pe_multi : { pe_ld - pe_fd > 90 =>1},{=>0};\n            \n            dvt_fd => eadv.[icd_i82_2,icd_i82_3,icd_82_9].dt.min();\n            \n            svt_fd => eadv.[icd_i82_8].dt.min();\n            \n            budd_chiari_fd =>eadv.[icd_i82_0].dt.min();\n            \n                        \n            #doc(,{\n                    txt:\" anticoagulation\"\n            }); \n            \n            rxn_anticoag_dt => eadv.[rxnc_b01aa,rxnc_b01af,rxnc_b01ae,rxnc_b01ab].dt.min().where(val=1);\n        \n            rxn_anticoag : { rxn_anticoag_dt!? => 1},{=>0};     \n            \n            \n            [[rb_id]] : { coalesce(pe_fd,dvt_fd,budd_chiari_fd,svt_fd)!? =>1},{=>0};\n            \n            \n            #define_attribute(\n            [[rb_id]],\n                {\n                    label:\"VTE\",\n                    desc:\"Venous-thrombo embolism\",\n                    is_reportable:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "cd_dyslip",
    "text": "/* Ruleblock to assess for dyslipidaemia*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess for cd_dyslipidaemia\",\n                is_active:2\n                \n            }\n        );\n        \n        \n        ascvd => rout_cvra.cvd_prev.val.bind();\n        \n        dob => rout_dmg.dob.val.bind();\n        \n        gender => rout_dmg.gender.val.bind();\n        \n        \n        cad => rout_cd_cardiac_cad.cd_cardiac_cad.val.bind();\n        \n        age : { dob!? => round((sysdate-dob)/365.25,1)};\n        \n        prem_cad_wt :   { gender=0 and age<55 and cad=1 => 2},\n                        { gender=1 and age<60 and cad=1 => 2},\n                        {=>0};\n                    \n        prem_ascvd_wt :     { gender=0 and age<55 and ascvd=1 and cad=0 => 1},\n                            { gender=1 and age<60 and ascvd=1 and cad=0 => 1},\n                            {=>0};\n        \n        \n        \n        \n        \n        dyslip_code_dt => eadv.[icd_e78%,icpc_t93%].dt.min();\n        \n        ldl => eadv.lab_bld_cholesterol_ldl._.lastdv().where(dt>sysdate-365);\n        \n        ldl_unl : { ascvd=1 => 1.8},{=>4.9};\n        \n        ldl_dls_wt :    { ldl_val>8.5 => 8},\n                        { ldl_val between 6.5 and 8.4 => 5},\n                        { ldl_val between 5.0 and 6.4 => 3},\n                        { ldl_val between 4.0 and 4.9 => 1},\n                        { =>0};\n                        \n        dls : { . => prem_cad_wt + ldl_dls_wt + prem_ascvd_wt };\n        \n        fhc_prob :  { dls>8 =>4 },\n                    { dls between 6 and 8 =>3},\n                    { dls between 3 and 5 =>2},\n                    { dls<3 =1},\n                    {=>0};\n        \n        \n        fhc_prob4 : { fhc_prob=4 =>1},{=>0};\n        \n        fhc_prob3 : { fhc_prob=3 =>1},{=>0};\n        \n        fhc_prob2 : { fhc_prob=2 =>1},{=>0};\n        \n        fhc_prob1 : { fhc_prob=1 =>1},{=>0};\n        \n        ldl_subopt : { (ldl_val/ldl_unl)>1.2 =>1},{=>0};\n        \n        \n        \n        \n        [[rb_id]] :  {((ascvd=1 and nvl(ldl_val,0)>1.8)) or nvl(ldl_val,0)>4.9 or dyslip_code_dt!? or fhc_prob>1 => 1},{=>0};\n        \n        \n        #define_attribute(\n            fhc_prob4,\n            {\n                label:\"Definitive Familial Hypercholesterolaemia based on modified DLS\",\n                desc:\"Definitive Familial Hypercholesterolaemia based on modified DLS\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            fhc_prob3,\n            {\n                label:\"Probable Familial Hypercholesterolaemia based on modified DLS\",\n                desc:\"Probable Familial Hypercholesterolaemia based on modified DLS\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            fhc_prob2,\n            {\n                label:\"Possible Familial Hypercholesterolaemia based on modified DLS\",\n                desc:\"Possible Familial Hypercholesterolaemia based on modified DLS\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Hypercholesterolaemia\",\n                desc:\"Presence of Hypercholesterolaemia\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "core_info_entropy",
    "text": "/* Ruleblock to assess core information entropy */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Ruleblock to assess core information entropy\",\n                \n                is_active:0\n                \n            }\n        );\n        \n        \n        \n         #doc(,\n            {\n                txt:\"Get core information entropy\"\n            }\n        );\n       \n        dod => eadv.dmg_dod.dt.max();\n       \n        icpc_n => eadv.[icpc_%].dt.count();\n        \n        icd_n => eadv.[icd_%].dt.count();\n        \n        lab_n => eadv.[lab_%].dt.count();\n        \n        obs_n => eadv.[obs_%].dt.count();\n        \n        dmg_n => eadv.[dmg_%].dt.count();\n        \n        rxnc_n => eadv.[rxnc_%].dt.count();\n        \n        \n        rxnc_active_n => eadv.[rxnc_%].dt.count().where(val=1);\n        \n        mbs_n => eadv.[mbs_%].dt.count();\n        \n        fd => eadv.[icd%,icpc%,lab%,rxnc%,obs%,mbs%].dt.min();\n        \n        ld => eadv.[icd%,icpc%,lab%,rxnc%,obs%,mbs%].dt.max();\n        \n        ts : { .=> round((ld-fd)/365,2)};\n        \n        icpc_d : { ts>0 => round(icpc_n/ts,2)};\n        \n        icd_d : { ts>0 => round(icd_n/ts,2)};\n        \n        lab_d : { ts>0 => round(lab_n/ts,2)};\n        \n        obs_d : { ts>0 => round(obs_n/ts,2)};\n        \n        dmg_d : { ts>0 => round(dmg_n/ts,2)};\n        \n        rxnc_d : { ts>0 => round(rxnc_n/ts,2)};\n        \n        mbs_d : { ts>0 => round(mbs_n/ts,2)};\n        \n        icpc : { icpc_n>0 => 1},{=>0};\n        \n        icd : { icd_n>0 => 1},{=>0};\n        \n        lab : { lab_n>0 => 1},{=>0};\n        \n        obs : { obs_n>0 => 1},{=>0};\n        \n        rxnc : { rxnc_n>0 => 1},{=>0};\n        \n        mbs : { mbs_n>0 => 1},{=>0};\n        \n        sigma : { . => icpc + icd + lab  + rxnc + obs + mbs};\n        \n        is_active : { sigma>0 and ld > sysdate-730 =>1 },{=>0};\n        is_active_3y : { sigma>0 and ld > sysdate-1095 =>1 },{=>0};\n        is_active_5y : { sigma>0 and ld > sysdate-1825 =>1 },{=>0};\n        \n        is_study_cand1 : { lab_n>2 and obs_n>2 and is_active=1 =>1},{=>0};\n        \n        \n        \n        [[rb_id]] : {. => sigma};\n        \n        \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Core information entropy\",\n                desc:\"Core information entropy\",\n                is_reportable:0,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "rrt",
    "text": "/* Rule block to determine RRT status*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine RRT status\",\n                is_active:2\n                \n            }\n        );\n\n        #doc(,\n            {\n                txt : \"Haemodialysis episode ICD proc codes and problem ICPC2p coding\",\n                cite : \"rrt_hd_icd,rrt_pd_icd\"\n            }\n        );\n        hd_z49_n => eadv.icd_z49_1.dt.count();\n        \n        hd_131_n => eadv.[caresys_1310000].dt.count();\n        \n        hd_z49_1y_n => eadv.icd_z49_1.dt.count().where(dt>sysdate-365);\n        \n        hd_131_1y_n => eadv.[caresys_1310000].dt.count().where(dt>sysdate-365);\n        \n        /*\n        hd_dt0 => eadv.[caresys_1310000,caresys_1310004, icpc_u59001,icpc_u59008,icd_z49_1,mbs_13105].dt.max(); \n        */\n        \n        mbs_13105_dt_max => eadv.mbs_13105.dt.max(); \n        \n        mbs_13105_dt_min => eadv.mbs_13105.dt.min(); \n        \n        hhd_op_enc_dt_min => eadv.enc_op_ren_hdp.dt.min();\n        \n        hhd_op_enc_dt_max => eadv.enc_op_ren_hdp.dt.max();\n        \n        hd_icpc_dt => eadv.[icpc_u59001,icpc_u59008].dt.max(); \n        \n        hd_dt => eadv.icd_z49_1.dt.max(); \n        \n        hd_dt_min => eadv.[caresys_1310000,icpc_u59001,icpc_u59008,icd_z49_1,mbs_13105].dt.min();\n        \n        #doc(,\n            {   \n                txt : \"Peritoneal episode ICD and problem ICPC2p coding\"\n            }\n        );\n        \n        pd_dt => eadv.[caresys_1310006,caresys_1310007,caresys_1310008,icpc_u59007,icpc_u59009,icd_z49_2].dt.max();\n        \n        pd_dt_min => eadv.[caresys_1310006,caresys_1310007,caresys_1310008,icpc_u59007,icpc_u59009,icd_z49_2].dt.min();\n        \n        pd_ex_dt => eadv.[caresys_1311000].dt.min();\n        \n        #doc(,\n            {\n                txt : \"Transplant problem ICPC2p coding\"\n            }\n        );\n        tx_dt_icpc => eadv.icpc_u28001.dt.min();\n        \n        #doc(,\n            {\n                txt : \"Transplant problem ICD coding\"\n            }\n        );\n        \n        \n        \n        tx_dt_icd => eadv.icd_z94_0.dt.min();\n        \n        #doc(,{ \n            txt : \"Handling muliparity based on intervening hd \" \n        } );\n                \n        tx_dt_icd_last => eadv.icd_z94_0.dt.max();\n        \n        #doc(,{ \n            txt : \"Number and last date of hd between transplant codes indicating graft failure and multi parity\" \n        } );\n        \n        hd_tx_tx2_n => eadv.icd_z49_1.dt.count().where(dt between tx_dt_icd and tx_dt_icd_last );\n        \n        hd_tx_tx2_ld => eadv.icd_z49_1.dt.max().where(dt between tx_dt_icd and tx_dt_icd_last );\n        \n        #doc(,{ \n            txt : \"Number of hd after last transplant indicating graft failure\" \n        } );\n        \n        hd_tx2 => eadv.icd_z49_1.dt.count().where(dt > tx_dt_icd_last + 30 );\n        \n        tx_multi_fd => eadv.icd_z94_0.dt.min().where(dt > hd_tx_tx2_ld );\n        \n        tx_multi_flag : { hd_tx_tx2_n >10 =>1},{=>0};\n        \n        tx_multi_current : { tx_multi_flag =1 and coalesce(hd_tx2,0)=0 =>1},{=>0};        \n        \n        tx_dt : { . => least_date(tx_dt_icpc,tx_dt_icd)};\n        \n        tx_active : { tx_dt_icd_last!? and coalesce(hd_tx2,0)=0 =>1 },{=>0};\n        \n        #doc(,{\n                txt : \"Home-haemodialysis ICPC2p coding\"\n        });\n        \n        homedx_icpc_dt => eadv.[icpc_u59j99].dt.min();\n        \n        homedx_dt => eadv.[icpc_u59j99,enc_op_ren_hdp].dt.min();\n        \n        \n        ren_enc => eadv.[enc_op%].dt.max();\n        \n        #doc(,\n            {\n                txt: \"Determine RRT category based on chronology. RRT cat 1 [HD] requires more than 10 sessions within last year\"\n            }\n        );\n        \n        /* adjusted switch order to catpure home haemo 18-08-21*/\n        [[rb_id]]:{homedx_dt > nvl(greatest_date(hd_icpc_dt,pd_dt,tx_dt),lower__bound__dt) and tx_multi_current=0  => 4},\n            {hd_dt > nvl(greatest_date(pd_dt,tx_dt,homedx_dt),lower__bound__dt) and (hd_z49_n>10 or hd_131_n>10) and tx_multi_current=0 and tx_active=0 => 1},\n            {hd_icpc_dt > nvl(greatest_date(pd_dt,tx_dt,homedx_dt),lower__bound__dt) and coalesce(hd_dt,mbs_13105_dt_max)>sysdate-90 =>1},\n            {pd_dt > nvl(greatest_date(hd_dt,tx_dt,homedx_dt),lower__bound__dt) and pd_dt>coalesce(pd_ex_dt,lower__bound__dt) and tx_multi_current=0 => 2},\n            {tx_dt!? and tx_dt >= nvl(greatest_date(hd_dt,pd_dt,homedx_dt),lower__bound__dt) => 3},\n            {tx_dt!? and tx_multi_current=1 => 3},\n            {tx_active=1 => 3},\n            {=>0};\n        #doc(,\n            {\n                txt: \"Generate binary variables for rrt categories\"\n            }\n        );\n        \n        rrt_mm1 : { hd_dt<sysdate-90 =>1},{=>0};\n            \n        rrt_hd : {rrt=1 => 1},{=>0};\n        \n        rrt_pd : {rrt=2 => 1},{=>0};\n        \n        rrt_tx : {rrt=3 => 1},{=>0};\n        \n        rrt_hhd : {rrt=4 => 1},{=>0};\n        \n        rrt_hd_rsd : { mbs_13105_dt_max!?=> 1 },{=>0};\n        \n        rrt_hd_rsd_1y : { mbs_13105_dt_max > sysdate - 365 => 1 },{=>0};\n        \n        hd_incd : {hd_dt_min > sysdate-365 and hd_z49_n>=10 => 1},{=>0};\n          \n        pd_incd : {pd_dt_min > sysdate-365 => 1},{=>0};\n        \n        rrt_incd : { hd_incd=1 or pd_incd=1 => 1},{=>0};\n        \n        rrt_past :  {rrt=1 and coalesce(pd_dt,tx_dt,homedx_dt)!? => 1},\n                    {rrt=2 and coalesce(hd_dt,tx_dt,homedx_dt)!? => 1},\n                    {rrt=3 and coalesce(pd_dt,hd_dt,homedx_dt)!? => 1},\n                    {rrt=4 and coalesce(hd_dt,tx_dt,pd_dt)!? => 1},\n                    {rrt=0 and hd_icpc_dt!? =>1 },\n                    {=>0};\n        ;\n        #doc(,{\n                txt:\"Satellite Hd recency\"\n        });\n        \n        hd_recent_flag : {mbs_13105_dt_max> sysdate-30 or hd_dt> sysdate-30 =>1},{=>0};\n        \n        #doc(,{\n                txt:\"Return to hd post tx or pd failures\"\n        });\n        \n        \n        ret_hd_post_tx => eadv.icd_z49_1.dt.min().where(dt > tx_dt + 90);\n        \n        ret_hd_post_pd => eadv.icd_z49_1.dt.min().where(dt > pd_dt_min + 90);\n        \n        \n        \n        \n        #doc(,{\n                txt:\"Current transplant patient based on 2y encounter activity\"\n        });\n        \n        \n        \n        tx_current : { rrt_tx=1 and ren_enc>sysdate-731 => 1 },{=>0};\n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Prevalent renal replacement therapy category [1=HD, 2=PD, 3=TX, 4=HHD]\",\n                desc:\"Integer [1-4] where 1=HD, 2=PD, 3=TX, 4=HHD\",\n                is_reportable:0,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            rrt_hd,\n            {\n                label:\"RRT Haemodialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n         #define_attribute(\n            rrt_pd,\n            {\n                label:\"RRT Peritoneal dialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            rrt_tx,\n            {\n                label:\"RRT Renal transplant\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            rrt_hhd,\n            {\n                label:\"RRT Home haemodialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            hd_incd,\n            {\n                label:\"Incident Haemodialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            pd_incd,\n            {\n                label:\"Incident Peritoneal dialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            rrt_incd,\n            {\n                label:\"Incident Peritoneal or haemodialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        \n        #define_attribute(\n            tx_multi_flag,\n            {\n                label:\"Renal transplant multi-parity\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "rrt_1_metrics",
    "text": "/* Rule block to determine RRT 1 metrics*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine RRT 1 metrics\",\n                is_active:2\n                \n            }\n        );\n\n        #doc(,\n            {\n                txt : \"rrt session regularity\"\n            }\n        );\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        hd_ld => eadv.icd_z49_1.dt.max();\n        \n        hd_fd => eadv.icd_z49_1.dt.min();\n        \n        hd_n => eadv.icd_z49_1.dt.count();\n        \n        hd0_2w_f : { (sysdate - hd_ld)<14 => 1},{=>0};\n        \n        tspan : { . => hd_ld-hd_fd };\n        \n        tspan_y : { .=> round(tspan/365,1) };\n        \n        hd_oe : { tspan > 1 => round(100*(hd_n /tspan)/0.427,0)},{=>0};\n        \n        hd_tr => eadv.icd_z49_1.dt.temporal_regularity();\n        \n        hd_sl : { .=> round(hd_tr*100,0) };\n        \n        \n        \n        [[rb_id]] : {rrt=1 =>1};",
    "is_active": true
  },
  {
    "name": "rrt_journey",
    "text": "/* Rule block to determine RRT 1 metrics*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine RRT 1 metrics\",\n                is_active:2\n                \n            }\n        );\n\n        #doc(,\n            {\n                txt : \"rrt session regularity\"\n            }\n        );\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        hd_dt => eadv.icd_z49_1.dt.max();\n        \n        hd_dt_2w => eadv.icd_z49_1.dt.max().where(dt> sysdate-14);\n\n        hd0_2w_f : { hd_dt_2w!? => 1},{=>0};\n        \n        hd_tr => eadv.icd_z49_1.dt.temporal_regularity();\n        \n        hd_clinic_ld => eadv.[enc_op_ren_nru,enc_op_med_rpc,enc_op_ren_wdd,enc_op_med_ksc,enc_op_ren_gpd,enc_op_ren_rsr].dt.max();\n        \n        \n        [[rb_id]] : {. =>1};\n        \n        #define_attribute(\n            rrt_hhd,\n            {\n                label:\"RRT Home haemodialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "rrt_1_metrics",
    "text": "/* Rule block to determine RRT 1 metrics*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine RRT 1 metrics\",\n                is_active:2\n                \n            }\n        );\n\n        #doc(,\n            {\n                txt : \"rrt session regularity\"\n            }\n        );\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        loc_def => rout_rrt_hd_location.loc_1s.val.bind();\n        \n        loc_1_fd => rout_rrt_hd_location.loc_1_fd.val.bind();\n        \n        loc_fixed => rout_rrt_hd_location.loc_fixed.val.bind();\n        \n        loc_1_n => rout_rrt_hd_location.loc_1_n.val.bind();\n        \n        hd_ld => eadv.[icd_z49_1,mbs_13105].dt.max();\n        \n        hd_fd => eadv.[icd_z49_1,mbs_13105].dt.min();\n        \n        hd_n => eadv.[icd_z49_1,mbs_13105].dt.count();\n        \n        hd0_2w_f : { (sysdate - hd_ld)<14 => 1},{=>0};\n        \n        tspan : { . => hd_ld-hd_fd };\n        \n        tspan_y : { .=> round(tspan/365,1) };\n        \n        hd_oe : { tspan > 1 => round(100*(hd_n /tspan)/0.427,0)},{=>0};\n        \n        hd_tr => eadv.icd_z49_1.dt.temporal_regularity();\n        \n        hd_sl : { .=> round(hd_tr*100,0) };\n        \n        canddt : {rrt in(1,4) =>1},{=>0};\n        \n        \n        [[rb_id]] : {rrt in(1,4) =>1};",
    "is_active": true
  },
  {
    "name": "rrt_hd_acc_iv",
    "text": "/* Rule block to determine Fistula intervention*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine Fistula intervention\",\n                is_active:2            \n                \n            }\n        );\n\n        #doc(,\n            {\n                txt : \"Intervntion codes from RIS episodes\"\n            }\n        );\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        acc_side => eadv.hd_access_side._.lastdv();\n        \n        acc_type => eadv.hd_access_type._.lastdv();\n        \n        acc_detail : {coalesce(acc_side_val,acc_type_val)!? => 1},{=>0};\n        \n        avf_dt => rout_ckd_access.avf_dt.val.bind();\n        \n        avf_us_ld => eadv.ris_img_usavfist.dt.last();\n        \n        av_gram_ld => eadv.[ris_img_dshfist,ris_img_dsarenal].dt.last();\n        \n        av_plasty_ld => eadv.[ris_img_dshplas%, ris_img_angplas%,ris_img_dsarenal].dt.last();\n        \n        av_plasty_1_ld => eadv.[ris_img_dshplas%, ris_img_angplas%,ris_img_dsarenal].dt.last(1);\n        \n        av_plasty_fd => eadv.[ris_img_dshplas%, ris_img_angplas%,ris_img_dsarenal].dt.first();\n        \n        av_plasty_n => eadv.[ris_img_dshplas1%, ris_img_angplas%,ris_img_dsarenal].dt.count();\n        \n        av_surv_ld : {.=> greatest(avf_us_ld,av_gram_ld,av_plasty_ld)};\n        \n        plasty_gap : {.=> av_plasty_ld-av_plasty_1_ld};\n        \n        iv_periodicity : {plasty_gap between 0 and 100 => 3},\n                        {plasty_gap between 100 and 200 => 6},\n                        {plasty_gap between 200 and 600 => 12},\n                        {plasty_gap >400 or plasty_gap?=> 99};\n                        \n        av_iv : {av_plasty_ld!? => 1},{=>0};\n        \n        [[rb_id]] : { rrt in (1,4) and (av_surv_ld!? or avf_dt!? or acc_detail=1)=>1},{=>0};\n        \n        #define_attribute(\n            [[rb_id]] ,\n            {\n                label:\"AV fistuloplasty\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "rrt_hd_param",
    "text": "/* Rule block to determine Haemodialysis parameters*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine Haemodialysis parameters\",\n                is_active:2\n                \n            }\n        );\n\n        \n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        mode => eadv.[psi_hd_param_mode]._.lastdv();\n        \n        hours => eadv.hd_param_hours._.lastdv();\n        \n        ibw => eadv.obs_dry_weight._.lastdv().where(dt > sysdate-90);\n        \n        bw => eadv.obs_weight._.lastdv().where(dt > sysdate-90);\n        \n        ex_wt : {bw_dt > ibw_dt => bw_val - ibw_val};\n        \n        dx => eadv.[psi_hd_param_dx]._.lastdv();        \n        \n        mode_hdf : {mode_val in (20,22)=>1},{=>0};\n        \n        \n        [[rb_id]] : { rrt in (1,4) and coalesce(mode_val,hours_val,ibw_val,dx_val)!? =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "rrt_hd_adequacy",
    "text": "/* Rule block to determine Haemodialysis adequacy*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine Haemodialysis adequacy\",\n                is_active:2\n                \n            }\n        );\n\n        \n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        #doc(,{\n                txt : \"Post dialysis urea\"\n        });\n        \n        post_u => eadv.lab_bld_urea_post_hd._.lastdv();\n        \n        pre_u => eadv.lab_bld_urea_pre_hd._.lastdv().where(dt = post_u_dt);\n        \n        urr : { pre_u_val>post_u_val and post_u_val>0 => round((pre_u_val - post_u_val)/pre_u_val,2)};\n        \n        #doc(,{\n                txt : \"Post dialysis urea preceding 1st\"\n        });\n        \n        post_u_1 => eadv.lab_bld_urea_post_hd._.lastdv(1);\n        \n        pre_u_1 => eadv.lab_bld_urea_pre_hd._.lastdv(1).where(dt = post_u_1_dt);\n        \n        urr_1 : { pre_u_1_val>post_u_1_val and post_u_1_val>0 => round((pre_u_1_val - post_u_1_val)/pre_u_1_val,2)};\n        \n        \n        #doc(,{\n                txt : \"Post dialysis urea preceding 2nd\"\n        });\n        \n        post_u_2 => eadv.lab_bld_urea_post_hd._.lastdv(2);\n        \n        pre_u_2 => eadv.lab_bld_urea_pre_hd._.lastdv(2).where(dt = post_u_2_dt);\n        \n        urr_2 : { pre_u_2_val>post_u_2_val and post_u_2_val>0 => round((pre_u_2_val - post_u_2_val)/pre_u_2_val,2)};\n        \n        #doc(,{\n                txt : \"Persistent suboptimal flag\"\n        });\n        \n        low_urr_flag : {urr<0.65 and (urr_1<0.65 or urr_2<0.65) and rrt=1 =>1},{=>0};\n        \n        #doc(,{\n                txt : \"Erroneous collection flag\"\n        });\n        \n        err_urr_flag : {urr<0.5 and rrt=1 =>1},{=>0};\n        \n        #doc(,{\n                txt : \"Calc spKTV based Ln transformation\"\n        });\n        \n        spktv : { coalesce(urr,0)>0 => round(ln(1-urr)*-1,2) };\n            \n        \n        [[rb_id]] : { rrt in (1,4) and urr!? =>1},{=>0};",
    "is_active": true
  },
  {
    "name": "rrt_hd_location",
    "text": "/* Rule block to determine Haemodialysis location or facility*/\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to determine Haemodialysis\",\n                is_active:2\n                \n            }\n        );\n\n        \n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        #doc(,{\n                txt : \"Determine localtion from icd z49 or mbs 13105\"\n        });\n        \n        hd_code_1_dt => eadv.[icd_z49_1,mbs_13105].dt.last().where(dt > sysdate-60);\n        \n        loc_1 => eadv.dmg_location.val.last().where(dt = hd_code_1_dt);\n        \n        loc_1s : {.=>substr(loc_1,4)};\n        \n        \n        hd_code_2_dt => eadv.[icd_z49_1,mbs_13105].dt.last(1).where(dt > sysdate-60);\n        \n        loc_2 => eadv.dmg_location.val.last().where(dt = hd_code_2_dt);\n        \n        loc_2s : {.=>substr(loc_2,4)};\n        \n        hd_code_3_dt => eadv.[icd_z49_1,mbs_13105].dt.last(2).where(dt > sysdate-60);\n        \n        loc_3 => eadv.dmg_location.val.last().where(dt = hd_code_3_dt);\n        \n        loc_3s : {.=>substr(loc_3,4)};\n        \n        loc_fixed : {loc_1s=loc_2s and loc_1s=loc_3s=>1},{=>0};\n        \n        loc_1_fd => eadv.dmg_location.dt.first().where(val=loc_1);\n        \n        loc_1_n => eadv.dmg_location.dt.count().where(val=loc_1);\n        \n        loc_hd_tehs_nru : { loc_1s = 720600013032  => 1},{=>0};\n        \n        loc_hd_tehs_7ad : { loc_1s = 720600015062  => 1},{=>0};\n        \n        \n        [[rb_id]] : {loc_1!? =>1},{=>0};\n        \n       \n        #define_attribute(\n            loc_hd_tehs_nru,\n            {\n                label:\"Prevalent Nightcliff satellite dialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );\n        #define_attribute(\n            loc_hd_tehs_7ad,\n            {\n                label:\"Prevalent 7A satellite dialysis\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "ckd_shpt",
    "text": "/* Rule block to assess for secondary hyperparathyroidism */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Rule block to assess for secondary hyperparathyroidism\",\n                is_active:2,\n                \n            }\n        );\n    \n       ckd => rout_ckd.ckd_stage_val.val.bind();\n       \n       rrt => rout_rrt.rrt.val.bind();\n       \n       esrd : {rrt in (1,2,4)=>1},{=>0};\n        \n\n       calcium1 => eadv.lab_bld_calcium_corrected._.lastdv().where(dt>sysdate-60);\n       calcium2 => eadv.lab_bld_calcium_corrected._.lastdv(1).where(dt>sysdate-60);\n       \n       \n       ca_n_30d => eadv.lab_bld_calcium_corrected.dt.count().where(dt>sysdate-30);\n       \n       magnesium1 => eadv.lab_bld_magnesium.val.lastdv().where(dt>sysdate-60);\n       \n       phos1 => eadv.lab_bld_phosphate._.lastdv().where(dt>sysdate-60);\n       phos2 => eadv.lab_bld_phosphate._.lastdv(1).where(dt>sysdate-60);\n       \n\n       pth1 => eadv.lab_bld_pth._.lastdv().where(dt>sysdate-120);\n       pth2 => eadv.lab_bld_pth._.lastdv(1).where(dt>sysdate-120 and dt< pth1_dt-30);\n       \n       \n       pth_qt: { coalesce(pth2_val,0)>0 and coalesce(pth1_val,0)>0 => round(pth2_val - pth1_val/pth2_val,2)};\n       \n       cinacalcet_ld => eadv.rxnc_hb05bx.dt.last().where(val=1);\n       \n       \n       calcitriol_ld => eadv.rxnc_a11cc.dt.last().where(val=1);\n       \n       phos_bind_ld => eadv.rxnc_v03ae.dt.last().where(val=1);\n    \n      \n       [[rb_id]] : { (rrt in(1,2,4) or ckd>4) and pth1_val!? => 1 },{=>0};",
    "is_active": true
  },
  {
    "name": "id_hcv",
    "text": "/*  Algorithm to identify Chronic Hepatitis C  */\n        \n        #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to identify Chronic Hepatitis C\",\n                is_active:2\n                \n            }\n        );\n        \n        icpc_code => eadv.[icpc_d72008].dt.min();\n        \n        icd_code => eadv.[icd_b18_2%].dt.min();\n                \n        [[rb_id]] : { coalesce(icpc_code,icd_code)!? => 1 },{=>0};\n        \n        #define_attribute([[rb_id]],\n            { \n                label: \"Presence of Chronic Hepatitis C\",\n                is_reportable:1,\n                type:2\n            }\n        );",
    "is_active": true
  },
  {
    "name": "tg4410",
    "text": "/* Algorithm to detect nephrotic syndrome */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to detect nephrotic syndrome\",\n                is_active:2\n                \n                \n            }\n        );\n        \n        \n        #doc(,\n            {\n                txt:\"Calculate information quantity\"\n            }\n        );\n        \n        dod => rout_dmg.dod.val.bind();\n        \n\n        \n        iq_uacr => eadv.lab_ua_acr.val.count(0).where(dt>sysdate-365);\n        iq_egfr => eadv.lab_bld_egfr.val.count(0).where(dt>sysdate-365);\n        iq_alb => eadv.lab_bld_albumin.val.count(0).where(dt>sysdate-365);\n        iq_chol => eadv.lab_bld_cholesterol_total.val.count(0).where(dt>sysdate-365);\n        iq_sbp => eadv.obs_bp_systolic.val.count(0).where(dt>sysdate-365);\n        iq_ana => eadv.lab_bld_ana.val.count(0).where(dt>sysdate-(365*5));\n        iq_spep => eadv.lab_bld_ana.val.count(0).where(dt>sysdate-(365*5));\n        \n        iq_tier :\n                {iq_uacr>=2 and least(iq_egfr,iq_alb,iq_chol,iq_sbp,iq_ana,iq_spep)>1 => 4},\n                {iq_uacr>=2 and least(iq_egfr,iq_alb,iq_chol,iq_sbp,0)>1 => 3},\n                {iq_uacr>=2 and least(iq_egfr,iq_alb)>1 => 2},\n                {iq_uacr>=2 and iq_alb>1 => 1},\n                {=>0};\n        \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4410._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n               \n        rrt => rout_rrt.rrt.val.bind();\n        dm => rout_cd_dm_dx.dm.val.bind();\n        ckd => rout_ckd.ckd.val.bind();\n       \n        #doc(,\n            {\n                txt:\"Exclude previously diagnosed nephrotic and if recent renal encounters\"\n            }\n        );  \n        \n        \n        \n        dx_nephrotic => eadv.[icd_n04%].dt.count(0);\n        \n                \n        ref_ren => rout_engmnt_renal.ref_renal.val.bind();\n        \n        enc_ren => rout_engmnt_renal.enc_renal.val.bind();\n        \n                \n        ex_flag :{greatest(rrt,dm,enc_ren,dx_nephrotic)>0 or dod!? or ckd>4 or csu_act_dt!? or dmg_source=999 => 1},{=>0};\n\n        \n        #doc(,{\n                txt:\"Inclusions for nephrotic syndrome\",\n                cite: \"tg4410_ref1, tg4410_ref2\"\n        });\n        \n        uacr_n => eadv.lab_ua_acr.dt.count(0).where(val>300 and dt>sysdate-365);\n        \n        uacr1 => eadv.lab_ua_acr.val.last().where(dt>sysdate-365);\n        \n        uacr2 => eadv.lab_ua_acr.val.last(1).where(dt>sysdate-365);\n        \n        #doc(,{\n                txt:\"Use delta of log transformed uacr\" \n        });\n       \n        uacr_log_delta : {uacr1>0 and uacr2>0 => round(log(10,uacr1)-log(10,uacr2),1)};\n        \n        #doc(,{\n                txt:\"Nephrotic associations of albumin and cholesterol\"\n        });\n        \n        \n        alb1 => eadv.lab_bld_albumin.val.last().where(dt>sysdate-365);\n        \n        alb2 => eadv.lab_bld_albumin.val.last(1).where(dt>sysdate-365);\n        \n        chol1 => eadv.lab_bld_cholesterol_total.val.last(1).where(dt>sysdate-365);\n        \n        \n        \n        low_alb : {nvl(alb1,0)<30=>1},{=>0};\n        high_chol : {nvl(chol1,0)>7=>1},{=>0};\n        \n        \n                \n        [[rb_id]] : {ex_flag=0 and uacr1>300 and uacr2>300 and uacr_log_delta>-0.1 => 1 },{=>0};\n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Alert:Nephrotic range proteinuria in the absence of diabetes\",\n                desc:\"Integer [0-1] if meets criteria \",\n                is_reportable:1,\n                is_trigger:1,\n                type:2,\n                priority:1\n            }\n        );",
    "is_active": true
  },
  {
    "name": "tg4420",
    "text": "/* Algorithm to detect nephritic syndrome */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to detect nephritic syndrome\",\n                \n                is_active:2,\n                \n                priority:2\n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Calculate information quantity\"\n            }\n        );\n        \n        dod => rout_dmg.dod.val.bind();\n        \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4420._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        iq_uacr => eadv.lab_ua_acr.val.count(0).where(dt>sysdate-365);\n        iq_egfr => eadv.lab_bld_egfr.val.count(0).where(dt>sysdate-365);\n        iq_urbc => eadv.lab_ua_rbc.val.count(0).where(dt>sysdate-365);\n        iq_uleu => eadv.lab_ua_leucocytes.val.count(0).where(dt>sysdate-365);\n        \n        iq_sbp => eadv.obs_bp_systolic.val.count(0).where(dt>sysdate-365);\n        \n        iq_ana => eadv.lab_bld_ana.val.count().where(dt>sysdate-(365*5));\n        iq_anca => eadv.[lab_bld_anca_pr3,lab_bld_anca_mpo].val.count(0).where(dt>sysdate-(365*5));\n        iq_comp => eadv.[lab_bld_complement_c3,lab_bld_complement_c4].val.count(0).where(dt>sysdate-(365*5));\n        \n        #doc(,\n            {\n                txt:\"Exclusions RRT\"\n            }\n        );\n        \n        rrt => rout_rrt.rrt.val.bind();\n        \n        #doc(,\n            {\n                txt:\"Exclude previously diagnosed nephrotic syndromes from coding\"\n            }\n        );\n        \n      \n        \n        dx_nephritic => eadv.[icd_n0%].dt.count(0);\n        \n        #doc(,\n            {\n                txt:\"Exclude if renal encounters present\"\n            }\n        );\n        \n        \n        \n        ref_ren => rout_engmnt_renal.ref_renal.val.bind();\n        \n        enc_ren => rout_engmnt_renal.enc_renal.val.bind();\n        \n                \n        ex_flag:{greatest(rrt,enc_ren,dx_nephritic)>0 or dod!? or csu_act_dt!? or dmg_source=999 => 1},{=>0};\n        \n        #doc(,\n            {\n                txt:\"Inclusions for nephritic syndrome\"\n                cite: \"tg4420_ref1, tg4420_ref2, tg4420_ref3\"\n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Inclusion by urine rbc\"\n            }\n        );\n        \n        /*  Urine analysis */        \n        \n        ua_rbc => eadv.lab_ua_rbc.val.last().where(dt>sysdate-365);\n        \n        ua_leu => eadv.lab_ua_leucocytes.val.last().where(dt>sysdate-365);\n        \n        ua_acr => eadv.lab_ua_acr.val.last().where(dt>sysdate-365);\n        \n        #doc(,\n            {\n                txt:\"urine rbc threshold more than 100 provided leucs less than 40\"\n            }\n        );\n        \n        \n        \n        t4420_code : {ua_rbc>100 and ua_leu<40 and ua_acr>30 => 2},\n                    {ua_rbc>100 and ua_leu<40 => 1},    \n                    {=>0};\n        \n        [[rb_id]] : { t4420_code >=2 and ex_flag=0 => 1},{=>0};            \n        \n        #define_attribute(\n            [[rb_id]],\n            {\n                label:\"Alert:Possible nephritic syndrome\",\n                desc:\"Integer [0-1] if meets criteria \",\n                is_reportable:1,\n                is_trigger:1,\n                type:2,\n                priority:1\n            }\n        );",
    "is_active": true
  },
  {
    "name": "tg4100",
    "text": "/*  Algorithm to generate AKI trigger   */\n        \n         #define_ruleblock(rb_id,\n            {\n                description: \"Algorithm to generate AKI trigger from labs\",\n                \n                is_active:2\n                \n            }\n        );\n        \n        #doc(,{\n                txt:\"External bindings\"\n        });\n        \n        dod => rout_dmg.dod.val.bind();\n          \n        rrt => rout_rrt.rrt.val.bind(); \n          \n        ckd => rout_ckd.ckd.val.bind();\n          \n          #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4100._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n\n\n\n        \n          cr_n => eadv.lab_bld_creatinine.dt.count(); \n          cr_fd => eadv.lab_bld_creatinine.dt.min(); \n          cr_ld => eadv.lab_bld_creatinine.dt.max(); \n          \n          egfr_base => eadv.lab_bld_egfr_c.val.lastdv().where(dt<cr_ld-90 and dt>cr_ld-365);\n          \n          cr_span_days : {1=1 => cr_ld-cr_fd}; \n          cr_tail_days : {1=1 => ROUND(SYSDATE-cr_ld,0)}; \n        \n        #doc(,{\n                txt:\"Minima Maxima and last\"\n        });  \n          \n        \n          cr_lv => eadv.lab_bld_creatinine.val.last().where(dt>sysdate-365); \n          cr_max_1y => eadv.lab_bld_creatinine.val.max().where(dt>sysdate-365); \n          cr_min_1y_real => eadv.lab_bld_creatinine.val.min().where(dt>sysdate-365);\n          \n        #doc(,{\n                txt:\"adjust creatinine for unusually low values due to error\"\n        }); \n         \n          cr_median_1y => eadv.lab_bld_creatinine.val.median().where(dt<cr_ld-90);  \n         \n          cr_min_1y : { cr_min_1y_real > 40 => cr_min_1y_real},{=> cr_median_1y};  \n          \n         #doc(,\n            {\n                txt:\"Date of event and window\"\n            }\n        ); \n        \n        \n          cr_max_ld_1y => eadv.lab_bld_creatinine.dt.max().where(val=cr_max_1y and dt>sysdate-365); \n          win_lb : {1=1 => cr_max_ld_1y-30 };\n          win_ub : {1=1 => cr_max_ld_1y+30 };\n          \n        #doc(,\n            {\n                txt:\"Determine true baseline\"\n            }\n        );\n\n          \n          cr_avg_2y => eadv.lab_bld_creatinine.val.avg().where(val<cr_max_1y and val>cr_min_1y and dt>sysdate-730 and dt<cr_ld-30);\n          cr_avg_min_1y_qt : {nvl(cr_avg_2y,0)>0 => round(cr_min_1y/cr_avg_2y,1) };\n          cr_base : {cr_avg_min_1y_qt<0.5 => cr_avg_2y},{=>cr_min_1y};\n          \n        #doc(,\n            {\n                txt:\"Calculate proportions\n            }\n        );\n          \n        \n        \n          \n          cr_base_max_1y_qt : {nvl(cr_base,0)>0 => round(cr_max_1y/cr_base,1) };\n          \n          \n          cr_base_lv_1y_qt : {nvl(cr_base,0)>0 => round(cr_lv/cr_base,1) };\n          \n          cr_max_lv_1y_qt : {nvl(cr_lv,0)>0 => round(cr_max_1y/cr_lv,1) };\n          \n        \n        \n        #doc(,\n            {\n                txt:AKI Stage as per AKIN excluding stage 1\",\n                cite: \"tg4100_ref1, tg4100_ref2\"\n            }\n        );\n          \n         /*Sensitivity adjustment : only for ckd <4 */\n         \n         \n          \n          akin_stage : {cr_base_max_1y_qt>2 => 3 },\n                        {cr_base_max_1y_qt>1.5 => 2 },\n                        {cr_base_max_1y_qt between 1 and 1.5 => 1 },\n                        {=>0};\n        \n        #doc(,\n            {\n                txt:\"AKI context as per baseline function\"\n            }\n        );\n          \n          \n          \n          aki_context : { akin_stage>=1 and egfr_base_val>=60 => 1},\n                        { akin_stage>=1 and egfr_base_val>30 and egfr_base_val<60 => 2},\n                        { akin_stage>=1 and egfr_base_val<30 => 3},{=>0};\n        \n        #doc(,\n            {\n                txt:\"AKI resolution to baseline\"\n            }\n        );  \n          \n\n          \n          aki_outcome : {akin_stage>=1 and cr_max_lv_1y_qt>=1 and cr_max_lv_1y_qt<1.2 => 3 },\n                        {akin_stage>=1 and cr_max_lv_1y_qt>=1.2 and cr_max_lv_1y_qt<1.7 => 2},\n                        {akin_stage>=1 and cr_max_lv_1y_qt>=1.7 => 1};  \n          \n          ex_flag : {dod!? or rrt>0 or ckd>4 or csu_act_dt!? or dmg_source=999 => 1},{=>0};\n          \n          \n          [[rb_id]] : {cr_base_max_1y_qt>4 and akin_stage>=2 and aki_outcome>=2 and ex_flag=0 => 1 },{=>0};\n          \n          #define_attribute(\n                [[rb_id]],\n                {\n                    label:\"Alert:Acute kidney injury in community\",\n                    desc:\"Integer [0-1] if meets criteria \",\n                    is_reportable:1,\n                    is_trigger:1,\n                    type:2,\n                    priority:1\n                }\n            );",
    "is_active": true
  },
  {
    "name": "tg4110",
    "text": "/*  Algorithm to generate AKI from hospital coded diagnosis   */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to generate AKI from hospital coded diagnosis\",\n                \n                is_active:0,\n                priority:2\n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Based only on ICD 10CM coding\"\n            }\n        );\n        \n        dod => rout_dmg.dod.val.bind();\n        \n        aki_icd => eadv.[icd_n17%].dt.count(0).where(dt>sysdate-180);\n        \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4110._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n\n\n\n        \n        ex_flag : {dod!? or csu_act_dt!? or dmg_source=999 => 1},{=>0};\n          \n        [[rb_id]] : {aki_icd>0 and ex_flag=0 => 1},{=>0};\n          \n        \n                        \n         #define_attribute(\n                [[rb_id]],\n                {\n                    label:\"Alert:Acute kidney injury in hospital by coding\",\n                    desc:\"Integer [0-1] if meets criteria \",\n                    is_reportable:1,\n                    is_trigger:1,\n                    type:2,\n                    priority:1\n                }\n            );",
    "is_active": true
  },
  {
    "name": "tg4610",
    "text": "/*  Algorithm to generate CKD2 or 3, rapid progression (20% decline per annum)   */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to generate CKD2 or 3 rapid progression 20% decline per annum \",\n                \n                is_active:2\n                \n            }\n        );\n        \n        #doc(,{\n                txt:\"Get CKD stage\"\n        });\n        \n        \n        \n        age => rout_dmg.age.val.bind();\n        \n        dod => rout_dmg.dod.val.bind();\n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4610._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        ckd_stage => rout_ckd.ckd_stage.val.bind();\n        \n        cga_a_val => rout_ckd.cga_a_val.val.bind();               \n               \n        #doc(,{\n                txt:\"Get last l-1 and maximum where max is earlier than l-1\"\n        });\n        \n        egfr_l => eadv.lab_bld_egfr_c._.lastdv().where(dt > sysdate-365);\n        \n        egfr_l1 => eadv.lab_bld_egfr_c._.lastdv().where(dt < egfr_l_dt and dt>egfr_l_dt - 180);\n        \n        egfr_max => eadv.lab_bld_egfr_c._.maxldv().where(dt>sysdate-730 and dt < egfr_l1_dt);\n        \n        #doc(,{\n                txt:\"Calc slope from max to last\"\n        });\n        \n        eb : {egfr_l_dt > egfr_max_dt => round((egfr_l_val-egfr_max_val)/((egfr_l_dt-egfr_max_dt)/365),2)};  \n        \n        #doc(,{\n                txt:\"Calc l and l-1 ratio to establish steady within 6 months accepting 20pct variance\"\n        });\n        \n        \n        egfr_l_l1_qt : { coalesce(egfr_l1_val,0)>0 =>(egfr_l_val/egfr_l1_val)},{=>0};\n        \n        egfr_ss : { egfr_l_l1_qt>0.8 and egfr_l_l1_qt<1.2 =>1 },{=>0};\n        \n        #doc(,{\n                txt:\"Slope threshold for 1 and 2 is -20 per year for 3 onwards -30\"\n        });\n        \n        eb_thresh : {ckd<3 => -20},{ckd>=3 and ckd<6 => -30};\n        \n        \n        ckd_null : { nvl(ckd,0)=0 =>1},{=0};\n        \n        #doc(,{\n                txt:\"Exclude existing referred or reviewed\"\n        });\n        \n        ref_ren => rout_engmnt_renal.ref_renal.val.bind();\n        \n        enc_ren => rout_engmnt_renal.enc_renal.val.bind();\n        \n        #doc(,\n            {\n                txt:\"Triggered for stage 1 or 2 with eb of minus 20pc provided no renal encounter\",\n                cite: \"tg4610_ref1\"\n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"only if slope x is more than 180 and egfr last value less than 80 and max is known\"\n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"sensitivity adjustment with inclusion of a3 albuminuria\"\n            }\n        );\n        ex_flag : {dod!? or enc_ren=1 or ref_ren=1  or dmg_source=0 or age>69 or csu_act_dt!? or dmg_source=999=> 1},{=>0};\n          \n        [[rb_id]] : {\n                        ckd>0 and ckd<6 and nvl(eb,0)<eb_thresh \n                        and egfr_l_dt - egfr_max_dt >180 \n                        and egfr_l_val<80 and egfr_max_val is not null \n                        and egfr_ss=1\n                        and cga_a_val>3\n                        and ex_flag=0 => 1\n                    },{=>0};\n        \n        #define_attribute(\n                [[rb_id]],\n                {\n                    label:\"Alert:Unmanaged possible early CKD with rapid progression\",\n                    desc:\"Integer [0-1] if meets criteria \",\n                    is_reportable:1,\n                    is_trigger:1,\n                    type:2,\n                    priority:1\n                }\n            );",
    "is_active": true
  },
  {
    "name": "tg4620",
    "text": "/*  Algorithm to generate CKD4 or 5 rapid progression 5% decline per annum no AVF   */\n        \n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to generate CKD4 or 5 rapid progression 5% decline per annum no AVF\",\n                is_active:2\n                \n            }\n        );\n        \n        #doc(,\n            {\n                txt:\"Get CKD G stage and slope and AVF proc codes\"\n            }\n        );\n        \n        dod => rout_dmg.dod.val.bind();\n        \n        age => rout_dmg.age.val.bind();\n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        eb => rout_ckd_egfr_metrics.egfr_slope2.val.bind();\n        \n        assert_level => rout_ckd.assert_level.val.bind();\n        \n        ckd_stage =>rout_ckd.ckd_stage.val.bind();\n        \n        avf => rout_ckd.avf.val.bind();\n        \n        \n        \n        ref_ren => rout_engmnt_renal.ref_renal.val.bind();\n        \n        enc_ren_1y => rout_engmnt_renal.enc_renal_1y.val.bind();\n          \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4620._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        #doc(,\n            {\n                txt:\"Triggered for stage 4+ with eb of minus 5pc or more and no avf proc\"\n                cite: \"tg4620_ref1, tg4620_ref2\"\n            }\n        );\n        \n        ex_flag : {dod!? or enc_ren_1y=1 or age>69 or assert_level<111100 or csu_act_dt!? or dmg_source=999=> 1},{=>0};\n          \n        [[rb_id]] : {ckd=6  and avf=0 and ex_flag=0 => 1},{=>0};\n        \n        #define_attribute(\n                [[rb_id]],\n                {\n                    label:\"Alert:No AVF with advanced CKD 4+ with rapid progression\",\n                    desc:\"Integer [0-1] if meets criteria \",\n                    is_reportable:1,\n                    is_trigger:1,\n                    type:2,\n                    priority:1\n                }\n            );",
    "is_active": true
  },
  {
    "name": "tg4720",
    "text": "/*  Algorithm to detect new RRT   */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to detect new RRT\",\n                \n                is_active:2\n                \n            }\n        );\n        \n        dod => rout_dmg.dod.val.bind();\n        \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4720._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        hd_dt_min => eadv.icd_z49_1.dt.min();\n        hd_n => eadv.icd_z49_1.dt.count(0);\n        hd_dt_max => eadv.icd_z49_1.dt.max();\n        \n        \n        \n        pd_dt_min => eadv.[caresys_13100_06,caresys_13100_07,caresys_13100_08,icpc_u59007,icpc_u59009,icd_z49_2].dt.min();\n        \n        \n        hd_start : {hd_dt_min > sysdate-90 and hd_n>=10 => 1},{=>0};\n          \n        pd_start : {pd_dt_min > sysdate-90 => 1},{=>0};\n        \n        rrt_start :{ .=> greatest_date(hd_dt_min,pd_dt_min)};\n        \n        ex_flag : {dod!? or dmg_source=999 => 1},{=>0};\n          \n        [[rb_id]] : { hd_start=1 or pd_start=1 and ex_flag=0 or csu_act_dt!? => 1},{=>0};\n        \n        #define_attribute(\n                [[rb_id]],\n                {\n                    label:\"Alert:New commencement on Renal replacement therapy within last 3 months\",\n                    desc:\"Integer [0-1] if meets criteria \",\n                    is_reportable:1,\n                    is_trigger:1,\n                    type:2,\n                    priority:3\n                }\n            );",
    "is_active": true
  },
  {
    "name": "tg4722",
    "text": "/*  Algorithm to detect new RRT within 1 year  */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to detect new RRT\",\n                \n                is_active:2\n                \n            }\n        );\n        \n        dod => rout_dmg.dod.val.bind();\n        \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4722._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        hd_dt_min => eadv.icd_z49_1.dt.min();\n        hd_n => eadv.icd_z49_1.dt.count(0);\n        hd_dt_max => eadv.icd_z49_1.dt.max();\n        \n        \n        \n        pd_dt_min => eadv.[caresys_13100_06,caresys_13100_07,caresys_13100_08,icpc_u59007,icpc_u59009,icd_z49_2].dt.min();\n        \n        \n        hd_start : {hd_dt_min > sysdate-365 and hd_n>=10 => 1},{=>0};\n          \n        pd_start : {pd_dt_min > sysdate-365 => 1},{=>0};\n        \n        rrt_start :{ .=> greatest_date(hd_dt_min,pd_dt_min)};\n        \n        ex_flag : {dod!? or csu_act_dt!? or dmg_source=999 => 1},{=>0};\n          \n        [[rb_id]] : { hd_start=1 or pd_start=1 and ex_flag=0 => 1},{=>0};\n        \n        #define_attribute(\n                [[rb_id]],\n                {\n                    label:\"Alert:New commencement on Renal replacement therapy within 1 year\",\n                    desc:\"Integer [0-1] if meets criteria \",\n                    is_reportable:1,\n                    is_trigger:1,\n                    type:2,\n                    priority:3\n                }\n            );",
    "is_active": true
  },
  {
    "name": "tg4660",
    "text": "/*  Algorithm medication safety concern in CKD   */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm medication safety concern in CKD \",\n                \n                is_active:2,\n                \n                priority:2\n                \n            }\n        );\n        \n        ckd => rout_ckd.ckd.val.bind();\n        \n        dod => rout_dmg.dod.val.bind();\n        \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4660._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        #doc(,\n            {\n                txt:\"presence of biguanide sglt2 nsaids \",\n                cite: \"tg4660_ref1, tg4660_ref2, tg4660_ref3\"\n            }\n        );\n        \n        \n        dm_rxn_bg => rout_cd_dm_dx.dm_rxn_bg.val.bind();\n        \n        dm_rxn_sglt2 => rout_cd_dm_dx.dm_rxn_sglt2.val.bind();\n        \n        rx_nsaids => eadv.[rxnc_m01a%].dt.count(0).where(val=1);\n        \n        #doc(,\n            {\n                txt:\"activate if ckd3+ and above present\"\n            }\n        );\n        \n        ex_flag : {dod!? or csu_act_dt!? or dmg_source=999=> 1},{=>0};\n          \n        [[rb_id]] : { ckd>3 and coalesce(dm_rxn_bg,dm_rxn_sglt2) is not null and rx_nsaids >0 and ex_flag=0 => 1},{=>0};\n        \n        #define_attribute(\n                [[rb_id]],\n                {\n                    label:\"Alert:Medication safety concern\",\n                    desc:\"Integer [0-1] if meets criteria \",\n                    is_reportable:1,\n                    is_trigger:1,\n                    type:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "tg2610",
    "text": "/*  Algorithm to detect detect untreated chronic disease   */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to detect untreated chronic disease\",\n                \n                is_active:2\n                \n                \n            }\n        );\n        \n        dod => rout_dmg.dod.val.bind();\n        \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg2610._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        dm => rout_cd_dm_dx.dm.val.bind();\n        \n        dm_rxn => rout_cd_dm_dx.dm_rxn.val.bind();\n        \n        hba1c_n0_val => rout_cd_dm_glyc_cntrl.hba1c_n0_val.val.bind();\n        \n        cga_a => rout_ckd.cga_a_val.val.bind();\n        \n        cga_g => rout_ckd.ckd.val.bind();\n        \n        acr_outdt => rout_ckd.acr_outdated.val.bind();\n        \n        egfr_outdt => rout_ckd.egfr_outdated.val.bind();\n        \n        res_outdt : { greatest(acr_outdt,egfr_outdt)>0 =>1},{=>0};\n        \n        ckd_met : { cga_a >= 3 and cga_g >=1 and cga_g<4 and res_outdt=0 =>1},{=>0};\n        \n        raas => eadv.[rxnc_c09%].val.lastdv();\n        \n        \n        raas_cur : { nvl(raas_val,0)=1 =>1},{=>0};\n        raas_past : { raas_dt is not null and raas_val=0 =>1 },{=>0};\n        \n        \n        \n        sbp => eadv.obs_bp_systolic.val.lastdv();\n        \n        k => eadv.lab_bld_potassium.val.lastdv();\n        \n        sbp_safe : { sbp_val> 110 and sbp_dt>sysdate-365 =>1},{=>0};\n        \n        k_safe : { k_val< 5 and k_dt>sysdate-365 => 1},{=>0};\n        \n        \n        ckd_untreat : { ckd_met=1 and sbp_safe=1 and k_safe=1 and raas_cur=0 =>1},{=>0};\n        \n        dm_untreat : {dm=1 and nvl(dm_rxn,0)=0 and nvl(hba1c_n0_val,0)>8 => 1},{=>0};\n        \n        ex_flag : {dod!? or csu_act_dt!? or dmg_source=999=> 1},{=>0};\n\n        #doc(,\n            {\n                txt:\"Chronic diseases include ckd, dm, possibly not on treatment\",\n                cite: \"tg2610_ref1, tg2610_ref2\"\n            }\n        );\n\n        [[rb_id]] : { coalesce(ckd_untreat,dm_untreat)=1 and ex_flag=0 => 1},{=>0};\n        \n        #define_attribute(\n                [[rb_id]],\n                {\n                    label:\"Alert:Potentially untreated chronic disease\",\n                    desc:\"Integer [0-1] if meets criteria \",\n                    is_reportable:1,\n                    is_trigger:1,\n                    type:2,\n                    priority:2\n                }\n            );",
    "is_active": true
  },
  {
    "name": "tg4810",
    "text": "/*  Algorithm to detect high haemoglobin while on ESA  */\n        \n         #define_ruleblock([[rb_id]],\n            {\n                description: \"Algorithm to detect high haemoglobin while on ESA\",\n                \n                is_active:2\n                \n            }\n        );\n        \n        dod => rout_dmg.dod.val.bind();\n        \n        #doc(,{\n                txt:\"previous CSU action and assumes that the trigger will never fire again\"\n        });  \n        \n        csu_act => eadv.csu_action_tg4810._.lastdv();\n        \n        dmg_source => rout_dmg_source.dmg_source.val.bind();\n        \n        esa_dt => eadv.rxnc_b03xa.dt.max().where(val=1);\n        \n        hb_i => eadv.lab_bld_hb.val.lastdv().where(dt>sysdate-180);\n        \n        hb_i1 => eadv.lab_bld_hb.val.lastdv(1);\n        \n        ex_flag : {dod!? or csu_act_dt!? or dmg_source=999=> 1},{=>0};\n\n        #doc(,\n            {\n                txt:\"activate if ckd3+ and above present\",\n                cite: \"tg4810_ref1, tg4810_ref2\"\n            }\n        );\n\n        [[rb_id]] : { hb_i_val>130 and esa_dt is not null and hb_i1_val<hb_i_val and esa_dt < hb_i_dt and ex_flag=0 => 1},{=>0};\n        \n        #define_attribute(\n                [[rb_id]],\n                {\n                    label:\"Alert: High Hb associated with ESA therapy\",\n                    desc:\"Integer [0-1] if meets criteria \",\n                    is_reportable:1,\n                    is_trigger:1,\n                    type:2,\n                    priority:2\n                }\n            );",
    "is_active": true
  }
]
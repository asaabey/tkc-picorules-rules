/* Algorithm to plot hb graph  */

#define_ruleblock([[rb_id]],    {
        description: "Algorithm to plot hb graph",
        is_active:2
});

hb_max => eadv.lab_bld_hb._.maxldv().where(dt>sysdate-730);

hb_min => eadv.lab_bld_hb._.minldv().where(dt>sysdate-730);

hb_n => eadv.lab_bld_hb.dt.count().where(dt>sysdate-730);

hb_last => eadv.lab_bld_hb._.lastdv().where(dt>sysdate-730);
hb_last_1 => eadv.lab_bld_hb._.lastdv(1).where(dt < hb_last_dt);
hb_first =>  eadv.lab_bld_hb._.firstdv().where(dt>sysdate-730);

hb_delta_pct : { . => round(((hb_last_val-hb_last_1_val)/hb_last_1_val)*100,1)};

rrt => rout_rrt.rrt.val.bind();

hb_graph_canvas_x : {1=1 => 350};

hb_graph_canvas_y : {1=1 => 200};


hb_target_max : { . => 120};
hb_target_min : { . => 100};

hb_graph => eadv.lab_bld_hb.val.serializedv2(round(val,0)~dt).where(dt>sysdate-730);

hb_graph_y_max : {. => hb_max_val};

hb_graph_y_min : { hb_min_val < hb_target_min => hb_min_val},{=> hb_target_min};

hb_graph_x_scale : {. => round(hb_graph_canvas_x/730,5)};

graph_y_scale : { hb_graph_y_max > hb_graph_y_min => round(hb_graph_canvas_y/(hb_graph_y_max - hb_graph_y_min),2)};

line_upper_y : {.=> 0};

line_lower_y : {. => (hb_graph_y_max-hb_graph_y_min) * graph_y_scale};

line_target_upper_y : { . => (hb_max_val-hb_target_max)* graph_y_scale  };
line_target_lower_y : { . => (hb_max_val-hb_target_min )* graph_y_scale  };
line_target_delta_y : { . => line_target_lower_y - line_target_upper_y};

[[rb_id]] : { hb_n>3 =>1},{=>0};